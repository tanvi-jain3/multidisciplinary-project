import socket
from picamera import PiCamera
from picamera.array import PiRGBArray
import imagezmq
import time
import sys
import queue
import numpy as np
import cv2

from bluetoothapi import BluetoothAPI

class ImageAPI:
    
    HOST = '192.168.1.1'  
    PORT = '5555'
    READ_BUFFER_SIZE = 2048

    
    def __init__(self):
        self.client = None  
        self.count = 0  
        self.camera = PiCamera()          
        self.camera.resolution = (1280,720)

    def sendImage(self, image):
        print("[Image] Attempting to connect to Image Server...")
        sender = imagezmq.ImageSender(connect_to="tcp://"+self.HOST+":"+self.PORT)
        print("[Image] Successfully connected to Image Server: " + str(self.HOST))
        
        rpi_name = socket.gethostname()
        print('[Image] Sending image to server...')
        reply = sender.send_image(rpi_name, image)
        self.count += 1
        print(f"[Image] We sent picture {self.count}.")
        print(f"[Image] ID for picture {self.count}: ", reply)
        print(f'[Image] Connection with image server closed after picture {self.count}')
        
        reply = reply.decode('utf-8')
        return reply

    
    def rpiTakePicture(self):
        while True:
            try:
                print('[Image] Initializing Camera.')
                print('[Image] Taking Picture')
                
                self.camera.awb_mode = 'auto'
                self.camera.exposure_mode = 'backlight'
               

                output = PiRGBArray(self.camera)
                self.camera.capture(output, 'bgr')
                image = output.array
                
                print('[Image] Finished taking picture')

           
                output.truncate(0)
                break

            except Exception as exception:
                print("[Image] Sending image to the server failed: " + str(exception))
                time.sleep(1)
        
        return image

    
    def imageClose(self):
        self.camera.close()

    
    def read(self):
        print("[Image] Attempting to read from image server via Wi-Fi...")
        try:
            message = self.client.recv(self.READ_BUFFER_SIZE)
        except Exception as exception:
            print("[Image] Failed to read from image server via Wi-Fi: " + str(exception))
        else:
            if message is not None and len(message) > 0:
                print("[Image] Message read from image server via Wi-Fi:")
                message = message.decode()
                print('[Image] Received: ' + str(message))
                return message


if __name__ == '__main__':
    ic = ImageAPI()
    time.sleep(2)
    while True:
        command = input("Execute Image Capturing(y/n/end): ")
        if command == "Y" or command == 'y':
            image = ic.rpiTakePicture()
            imageID = ic.sendImage(image)
            print("Image ID:", imageID)
            if imageID == "N":
                print("no detection result")
        elif command == "exit":
            ic.camera.close()
            print("Exiting")
            exit()
        elif command == "end":
            ic.sendEmptyImage()
            print()

