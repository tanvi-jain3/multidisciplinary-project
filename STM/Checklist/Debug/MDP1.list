
MDP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c98  0800b268  0800b268  0001b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf00  0800bf00  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf00  0800bf00  0001bf00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf08  0800bf08  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf08  0800bf08  0001bf08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf0c  0800bf0c  0001bf0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800bf10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000051e4  20000068  20000068  00020068  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000524c  2000524c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c520  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039c3  00000000  00000000  0003c5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001900  00000000  00000000  0003ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013a2  00000000  00000000  000418c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003c8a  00000000  00000000  00042c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c914  00000000  00000000  000468ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d849f  00000000  00000000  00063200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007184  00000000  00000000  0013b6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00142824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b250 	.word	0x0800b250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800b250 	.word	0x0800b250

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b970 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	460d      	mov	r5, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4694      	mov	ip, r2
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0xe2>
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	b143      	cbz	r3, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	f1c3 0220 	rsb	r2, r3, #32
 8000c00:	409f      	lsls	r7, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0e:	fa1f f58c 	uxth.w	r5, ip
 8000c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c16:	0c22      	lsrs	r2, r4, #16
 8000c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c20:	fb01 f005 	mul.w	r0, r1, r5
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c28:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	f080 811c 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f240 8119 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	4462      	add	r2, ip
 8000c3e:	1a12      	subs	r2, r2, r0
 8000c40:	b2a4      	uxth	r4, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4e:	fb00 f505 	mul.w	r5, r0, r5
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x90>
 8000c56:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x294>
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x294>
 8000c68:	4464      	add	r4, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c70:	1b64      	subs	r4, r4, r5
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11e      	cbz	r6, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40dc      	lsrs	r4, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0xbc>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ed 	beq.w	8000e66 <__udivmoddi4+0x28a>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d149      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca0:	42ab      	cmp	r3, r5
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xce>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d0e2      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cbc:	e7df      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xe6>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x210>
 8000ccc:	1a8a      	subs	r2, r1, r2
 8000cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd2:	fa1f fe8c 	uxth.w	lr, ip
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce0:	0c22      	lsrs	r2, r4, #16
 8000ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce6:	fb0e f005 	mul.w	r0, lr, r5
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cee:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f200 80cb 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000cfe:	4645      	mov	r5, r8
 8000d00:	1a12      	subs	r2, r2, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d10:	fb0e fe00 	mul.w	lr, lr, r0
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c2>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d32:	e79f      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d34:	f1c1 0720 	rsb	r7, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa05 f401 	lsl.w	r4, r5, r1
 8000d46:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4a:	40fd      	lsrs	r5, r7
 8000d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	b29d      	uxth	r5, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dac:	d26c      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	d96a      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	4464      	add	r4, ip
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fba3 9502 	umull	r9, r5, r3, r2
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	46c8      	mov	r8, r9
 8000dc6:	46ae      	mov	lr, r5
 8000dc8:	d356      	bcc.n	8000e78 <__udivmoddi4+0x29c>
 8000dca:	d053      	beq.n	8000e74 <__udivmoddi4+0x298>
 8000dcc:	b156      	cbz	r6, 8000de4 <__udivmoddi4+0x208>
 8000dce:	ebb0 0208 	subs.w	r2, r0, r8
 8000dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dda:	40ca      	lsrs	r2, r1
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	4317      	orrs	r7, r2
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	4618      	mov	r0, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dec:	f1c3 0120 	rsb	r1, r3, #32
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	fa20 f201 	lsr.w	r2, r0, r1
 8000df8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dfc:	409d      	lsls	r5, r3
 8000dfe:	432a      	orrs	r2, r5
 8000e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e16:	fb00 f50e 	mul.w	r5, r0, lr
 8000e1a:	428d      	cmp	r5, r1
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x258>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2a:	d22f      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	428d      	cmp	r5, r1
 8000e2e:	d92d      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1b49      	subs	r1, r1, r5
 8000e36:	b292      	uxth	r2, r2
 8000e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	fb05 f10e 	mul.w	r1, r5, lr
 8000e48:	4291      	cmp	r1, r2
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x282>
 8000e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e54:	d216      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d914      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	4462      	add	r2, ip
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e64:	e738      	b.n	8000cd8 <__udivmoddi4+0xfc>
 8000e66:	4631      	mov	r1, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	e6e6      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e70:	4610      	mov	r0, r2
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x90>
 8000e74:	4548      	cmp	r0, r9
 8000e76:	d2a9      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e78:	ebb9 0802 	subs.w	r8, r9, r2
 8000e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e80:	3b01      	subs	r3, #1
 8000e82:	e7a3      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e84:	4645      	mov	r5, r8
 8000e86:	e7ea      	b.n	8000e5e <__udivmoddi4+0x282>
 8000e88:	462b      	mov	r3, r5
 8000e8a:	e794      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	e7d1      	b.n	8000e34 <__udivmoddi4+0x258>
 8000e90:	46d0      	mov	r8, sl
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3d02      	subs	r5, #2
 8000e96:	4462      	add	r2, ip
 8000e98:	e732      	b.n	8000d00 <__udivmoddi4+0x124>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xd8>
 8000e9e:	4464      	add	r4, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x14e>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000eac:	f3bf 8f4f 	dsb	sy
}
 8000eb0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <__NVIC_SystemReset+0x24>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eba:	4904      	ldr	r1, [pc, #16]	; (8000ecc <__NVIC_SystemReset+0x24>)
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_SystemReset+0x28>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec2:	f3bf 8f4f 	dsb	sy
}
 8000ec6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <__NVIC_SystemReset+0x20>
 8000ecc:	e000ed00 	.word	0xe000ed00
 8000ed0:	05fa0004 	.word	0x05fa0004

08000ed4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ed8:	f002 facc 	bl	8003474 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000edc:	f000 f890 	bl	8001000 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ee0:	f000 fb88 	bl	80015f4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ee4:	f000 f8ea 	bl	80010bc <MX_I2C1_Init>
	MX_TIM1_Init();
 8000ee8:	f000 f916 	bl	8001118 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000eec:	f000 f9b2 	bl	8001254 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000ef0:	f000 fa04 	bl	80012fc <MX_TIM3_Init>
	MX_TIM4_Init();
 8000ef4:	f000 fa56 	bl	80013a4 <MX_TIM4_Init>
	MX_TIM8_Init();
 8000ef8:	f000 faa8 	bl	800144c <MX_TIM8_Init>
	MX_USART3_UART_Init();
 8000efc:	f000 fb50 	bl	80015a0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8000f00:	f002 fa2c 	bl	800335c <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
 8000f04:	2205      	movs	r2, #5
 8000f06:	4924      	ldr	r1, [pc, #144]	; (8000f98 <main+0xc4>)
 8000f08:	4824      	ldr	r0, [pc, #144]	; (8000f9c <main+0xc8>)
 8000f0a:	f005 ff5c 	bl	8006dc6 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000f0e:	f006 ff27 	bl	8007d60 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000f12:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <main+0xcc>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <main+0xd0>)
 8000f18:	f006 ff6c 	bl	8007df4 <osThreadNew>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <main+0xd4>)
 8000f20:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of motorTask */
	motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <main+0xd8>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <main+0xdc>)
 8000f28:	f006 ff64 	bl	8007df4 <osThreadNew>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <main+0xe0>)
 8000f30:	6013      	str	r3, [r2, #0]

	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000f32:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <main+0xe4>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4821      	ldr	r0, [pc, #132]	; (8000fbc <main+0xe8>)
 8000f38:	f006 ff5c 	bl	8007df4 <osThreadNew>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <main+0xec>)
 8000f40:	6013      	str	r3, [r2, #0]

	/* creation of gyroTask */
	gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000f42:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <main+0xf0>)
 8000f44:	2100      	movs	r1, #0
 8000f46:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <main+0xf4>)
 8000f48:	f006 ff54 	bl	8007df4 <osThreadNew>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <main+0xf8>)
 8000f50:	6013      	str	r3, [r2, #0]

	/* creation of ultrasonicTask */
	ultrasonicTaskHandle = osThreadNew(StartUltrasonicTask, NULL,
 8000f52:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <main+0xfc>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <main+0x100>)
 8000f58:	f006 ff4c 	bl	8007df4 <osThreadNew>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <main+0x104>)
 8000f60:	6013      	str	r3, [r2, #0]
			&ultrasonicTask_attributes);

	/* creation of communicateTask */
	communicateTaskHandle = osThreadNew(StartCommunicateTask, NULL,
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <main+0x108>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	481e      	ldr	r0, [pc, #120]	; (8000fe0 <main+0x10c>)
 8000f68:	f006 ff44 	bl	8007df4 <osThreadNew>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <main+0x110>)
 8000f70:	6013      	str	r3, [r2, #0]
			&communicateTask_attributes);

	/* creation of encoderRTask */
	encoderRTaskHandle = osThreadNew(StartEncoderRTask, NULL,
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <main+0x114>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	481d      	ldr	r0, [pc, #116]	; (8000fec <main+0x118>)
 8000f78:	f006 ff3c 	bl	8007df4 <osThreadNew>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <main+0x11c>)
 8000f80:	6013      	str	r3, [r2, #0]
			&encoderRTask_attributes);

	/* creation of encoderLTask */
	encoderLTaskHandle = osThreadNew(StartEncoderLTask, NULL,
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <main+0x120>)
 8000f84:	2100      	movs	r1, #0
 8000f86:	481c      	ldr	r0, [pc, #112]	; (8000ff8 <main+0x124>)
 8000f88:	f006 ff34 	bl	8007df4 <osThreadNew>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <main+0x128>)
 8000f90:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f92:	f006 ff09 	bl	8007da8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f96:	e7fe      	b.n	8000f96 <main+0xc2>
 8000f98:	200002a4 	.word	0x200002a4
 8000f9c:	20000240 	.word	0x20000240
 8000fa0:	0800b330 	.word	0x0800b330
 8000fa4:	08001e41 	.word	0x08001e41
 8000fa8:	20000284 	.word	0x20000284
 8000fac:	0800b354 	.word	0x0800b354
 8000fb0:	08001e61 	.word	0x08001e61
 8000fb4:	20000288 	.word	0x20000288
 8000fb8:	0800b378 	.word	0x0800b378
 8000fbc:	080022d5 	.word	0x080022d5
 8000fc0:	2000028c 	.word	0x2000028c
 8000fc4:	0800b39c 	.word	0x0800b39c
 8000fc8:	08002499 	.word	0x08002499
 8000fcc:	20000290 	.word	0x20000290
 8000fd0:	0800b3c0 	.word	0x0800b3c0
 8000fd4:	08002639 	.word	0x08002639
 8000fd8:	20000294 	.word	0x20000294
 8000fdc:	0800b3e4 	.word	0x0800b3e4
 8000fe0:	08002675 	.word	0x08002675
 8000fe4:	20000298 	.word	0x20000298
 8000fe8:	0800b408 	.word	0x0800b408
 8000fec:	0800288d 	.word	0x0800288d
 8000ff0:	2000029c 	.word	0x2000029c
 8000ff4:	0800b42c 	.word	0x0800b42c
 8000ff8:	08002915 	.word	0x08002915
 8000ffc:	200002a0 	.word	0x200002a0

08001000 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	; 0x50
 8001004:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	2230      	movs	r2, #48	; 0x30
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f009 fc44 	bl	800a89c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <SystemClock_Config+0xb4>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <SystemClock_Config+0xb4>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <SystemClock_Config+0xb4>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <SystemClock_Config+0xb8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <SystemClock_Config+0xb8>)
 800104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <SystemClock_Config+0xb8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001064:	2310      	movs	r3, #16
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fdc7 	bl	8004c04 <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x80>
		Error_Handler();
 800107c:	f001 fc8e 	bl	800299c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001080:	230f      	movs	r3, #15
 8001082:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 f82a 	bl	80050f4 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xaa>
		Error_Handler();
 80010a6:	f001 fc79 	bl	800299c <Error_Handler>
	}
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C1_Init+0x50>)
 80010c2:	4a13      	ldr	r2, [pc, #76]	; (8001110 <MX_I2C1_Init+0x54>)
 80010c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C1_Init+0x50>)
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <MX_I2C1_Init+0x58>)
 80010ca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_I2C1_Init+0x50>)
 80010da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010de:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_I2C1_Init+0x50>)
 80010fa:	f002 fdc5 	bl	8003c88 <HAL_I2C_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001104:	f001 fc4a 	bl	800299c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000084 	.word	0x20000084
 8001110:	40005400 	.word	0x40005400
 8001114:	000186a0 	.word	0x000186a0

08001118 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b096      	sub	sp, #88	; 0x58
 800111c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800111e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800112c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
 8001146:	615a      	str	r2, [r3, #20]
 8001148:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2220      	movs	r2, #32
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f009 fba3 	bl	800a89c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <MX_TIM1_Init+0x134>)
 8001158:	4a3d      	ldr	r2, [pc, #244]	; (8001250 <MX_TIM1_Init+0x138>)
 800115a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 800115c:	4b3b      	ldr	r3, [pc, #236]	; (800124c <MX_TIM1_Init+0x134>)
 800115e:	22a0      	movs	r2, #160	; 0xa0
 8001160:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <MX_TIM1_Init+0x134>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8001168:	4b38      	ldr	r3, [pc, #224]	; (800124c <MX_TIM1_Init+0x134>)
 800116a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800116e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001170:	4b36      	ldr	r3, [pc, #216]	; (800124c <MX_TIM1_Init+0x134>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <MX_TIM1_Init+0x134>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <MX_TIM1_Init+0x134>)
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001182:	4832      	ldr	r0, [pc, #200]	; (800124c <MX_TIM1_Init+0x134>)
 8001184:	f004 f996 	bl	80054b4 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0x7a>
		Error_Handler();
 800118e:	f001 fc05 	bl	800299c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001198:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800119c:	4619      	mov	r1, r3
 800119e:	482b      	ldr	r0, [pc, #172]	; (800124c <MX_TIM1_Init+0x134>)
 80011a0:	f004 fee2 	bl	8005f68 <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0x96>
		Error_Handler();
 80011aa:	f001 fbf7 	bl	800299c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80011ae:	4827      	ldr	r0, [pc, #156]	; (800124c <MX_TIM1_Init+0x134>)
 80011b0:	f004 f9cf 	bl	8005552 <HAL_TIM_PWM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0xa6>
		Error_Handler();
 80011ba:	f001 fbef 	bl	800299c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80011c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ca:	4619      	mov	r1, r3
 80011cc:	481f      	ldr	r0, [pc, #124]	; (800124c <MX_TIM1_Init+0x134>)
 80011ce:	f005 fc39 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80011d8:	f001 fbe0 	bl	800299c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011dc:	2360      	movs	r3, #96	; 0x60
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	220c      	movs	r2, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <MX_TIM1_Init+0x134>)
 80011fe:	f004 fdf1 	bl	8005de4 <HAL_TIM_PWM_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8001208:	f001 fbc8 	bl	800299c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001224:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <MX_TIM1_Init+0x134>)
 8001230:	f005 fc84 	bl	8006b3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 800123a:	f001 fbaf 	bl	800299c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <MX_TIM1_Init+0x134>)
 8001240:	f001 fd8e 	bl	8002d60 <HAL_TIM_MspPostInit>

}
 8001244:	bf00      	nop
 8001246:	3758      	adds	r7, #88	; 0x58
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000d8 	.word	0x200000d8
 8001250:	40010000 	.word	0x40010000

08001254 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2224      	movs	r2, #36	; 0x24
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f009 fb1a 	bl	800a89c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_TIM2_Init+0xa4>)
 8001272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001276:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_TIM2_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_TIM2_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_TIM2_Init+0xa4>)
 8001286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_TIM2_Init+0xa4>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_TIM2_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001298:	2303      	movs	r3, #3
 800129a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80012a8:	230a      	movs	r3, #10
 80012aa:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b0:	2301      	movs	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 80012b8:	230a      	movs	r3, #10
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_TIM2_Init+0xa4>)
 80012c4:	f004 fab5 	bl	8005832 <HAL_TIM_Encoder_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x7e>
		Error_Handler();
 80012ce:	f001 fb65 	bl	800299c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_TIM2_Init+0xa4>)
 80012e0:	f005 fbb0 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80012ea:	f001 fb57 	bl	800299c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000120 	.word	0x20000120

080012fc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2224      	movs	r2, #36	; 0x24
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f009 fac6 	bl	800a89c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_TIM3_Init+0xa0>)
 800131a:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <MX_TIM3_Init+0xa4>)
 800131c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_TIM3_Init+0xa0>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM3_Init+0xa0>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM3_Init+0xa0>)
 800132c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001330:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM3_Init+0xa0>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM3_Init+0xa0>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800133e:	2303      	movs	r3, #3
 8001340:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800134e:	230a      	movs	r3, #10
 8001350:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001356:	2301      	movs	r3, #1
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 800135e:	230a      	movs	r3, #10
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM3_Init+0xa0>)
 800136a:	f004 fa62 	bl	8005832 <HAL_TIM_Encoder_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001374:	f001 fb12 	bl	800299c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM3_Init+0xa0>)
 8001386:	f005 fb5d 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001390:	f001 fb04 	bl	800299c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3730      	adds	r7, #48	; 0x30
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000168 	.word	0x20000168
 80013a0:	40000400 	.word	0x40000400

080013a4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <MX_TIM4_Init+0xa4>)
 80013c4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16 - 1;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013c8:	220f      	movs	r2, #15
 80013ca:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 80013e6:	4817      	ldr	r0, [pc, #92]	; (8001444 <MX_TIM4_Init+0xa0>)
 80013e8:	f004 f9d4 	bl	8005794 <HAL_TIM_IC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0x52>
		Error_Handler();
 80013f2:	f001 fad3 	bl	800299c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	480f      	ldr	r0, [pc, #60]	; (8001444 <MX_TIM4_Init+0xa0>)
 8001406:	f005 fb1d 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM4_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 8001410:	f001 fac4 	bl	800299c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001414:	2300      	movs	r3, #0
 8001416:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001418:	2301      	movs	r3, #1
 800141a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_TIM4_Init+0xa0>)
 800142c:	f004 fc3d 	bl	8005caa <HAL_TIM_IC_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM4_Init+0x96>
		Error_Handler();
 8001436:	f001 fab1 	bl	800299c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001b0 	.word	0x200001b0
 8001448:	40000800 	.word	0x40000800

0800144c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b096      	sub	sp, #88	; 0x58
 8001450:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001452:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001460:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2220      	movs	r2, #32
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f009 fa09 	bl	800a89c <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800148a:	4b43      	ldr	r3, [pc, #268]	; (8001598 <MX_TIM8_Init+0x14c>)
 800148c:	4a43      	ldr	r2, [pc, #268]	; (800159c <MX_TIM8_Init+0x150>)
 800148e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001490:	4b41      	ldr	r3, [pc, #260]	; (8001598 <MX_TIM8_Init+0x14c>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b40      	ldr	r3, [pc, #256]	; (8001598 <MX_TIM8_Init+0x14c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 800149c:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <MX_TIM8_Init+0x14c>)
 800149e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014a2:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80014aa:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80014b6:	4838      	ldr	r0, [pc, #224]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014b8:	f003 fffc 	bl	80054b4 <HAL_TIM_Base_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM8_Init+0x7a>
		Error_Handler();
 80014c2:	f001 fa6b 	bl	800299c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80014cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d0:	4619      	mov	r1, r3
 80014d2:	4831      	ldr	r0, [pc, #196]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014d4:	f004 fd48 	bl	8005f68 <HAL_TIM_ConfigClockSource>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM8_Init+0x96>
		Error_Handler();
 80014de:	f001 fa5d 	bl	800299c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80014e2:	482d      	ldr	r0, [pc, #180]	; (8001598 <MX_TIM8_Init+0x14c>)
 80014e4:	f004 f835 	bl	8005552 <HAL_TIM_PWM_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM8_Init+0xa6>
		Error_Handler();
 80014ee:	f001 fa55 	bl	800299c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80014fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014fe:	4619      	mov	r1, r3
 8001500:	4825      	ldr	r0, [pc, #148]	; (8001598 <MX_TIM8_Init+0x14c>)
 8001502:	f005 fa9f 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800150c:	f001 fa46 	bl	800299c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001510:	2360      	movs	r3, #96	; 0x60
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	2200      	movs	r2, #0
 8001532:	4619      	mov	r1, r3
 8001534:	4818      	ldr	r0, [pc, #96]	; (8001598 <MX_TIM8_Init+0x14c>)
 8001536:	f004 fc55 	bl	8005de4 <HAL_TIM_PWM_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001540:	f001 fa2c 	bl	800299c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	2204      	movs	r2, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4812      	ldr	r0, [pc, #72]	; (8001598 <MX_TIM8_Init+0x14c>)
 800154e:	f004 fc49 	bl	8005de4 <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8001558:	f001 fa20 	bl	800299c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001574:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_TIM8_Init+0x14c>)
 8001580:	f005 fadc 	bl	8006b3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 800158a:	f001 fa07 	bl	800299c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3758      	adds	r7, #88	; 0x58
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200001f8 	.word	0x200001f8
 800159c:	40010400 	.word	0x40010400

080015a0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_USART3_UART_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_USART3_UART_Init+0x4c>)
 80015d8:	f005 fb16 	bl	8006c08 <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80015e2:	f001 f9db 	bl	800299c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000240 	.word	0x20000240
 80015f0:	40004800 	.word	0x40004800

080015f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	; 0x30
 80015f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	4b5b      	ldr	r3, [pc, #364]	; (800177c <MX_GPIO_Init+0x188>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a5a      	ldr	r2, [pc, #360]	; (800177c <MX_GPIO_Init+0x188>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b58      	ldr	r3, [pc, #352]	; (800177c <MX_GPIO_Init+0x188>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	4b54      	ldr	r3, [pc, #336]	; (800177c <MX_GPIO_Init+0x188>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a53      	ldr	r2, [pc, #332]	; (800177c <MX_GPIO_Init+0x188>)
 8001630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <MX_GPIO_Init+0x188>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <MX_GPIO_Init+0x188>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a4c      	ldr	r2, [pc, #304]	; (800177c <MX_GPIO_Init+0x188>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b4a      	ldr	r3, [pc, #296]	; (800177c <MX_GPIO_Init+0x188>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <MX_GPIO_Init+0x188>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a45      	ldr	r2, [pc, #276]	; (800177c <MX_GPIO_Init+0x188>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b43      	ldr	r3, [pc, #268]	; (800177c <MX_GPIO_Init+0x188>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <MX_GPIO_Init+0x188>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a3e      	ldr	r2, [pc, #248]	; (800177c <MX_GPIO_Init+0x188>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b3c      	ldr	r3, [pc, #240]	; (800177c <MX_GPIO_Init+0x188>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <MX_GPIO_Init+0x188>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a37      	ldr	r2, [pc, #220]	; (800177c <MX_GPIO_Init+0x188>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b35      	ldr	r3, [pc, #212]	; (800177c <MX_GPIO_Init+0x188>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80016b8:	4831      	ldr	r0, [pc, #196]	; (8001780 <MX_GPIO_Init+0x18c>)
 80016ba:	f002 fab1 	bl	8003c20 <HAL_GPIO_WritePin>
	OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin,
 80016be:	2200      	movs	r2, #0
 80016c0:	213c      	movs	r1, #60	; 0x3c
 80016c2:	4830      	ldr	r0, [pc, #192]	; (8001784 <MX_GPIO_Init+0x190>)
 80016c4:	f002 faac 	bl	8003c20 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ce:	482e      	ldr	r0, [pc, #184]	; (8001788 <MX_GPIO_Init+0x194>)
 80016d0:	f002 faa6 	bl	8003c20 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016da:	482c      	ldr	r0, [pc, #176]	; (800178c <MX_GPIO_Init+0x198>)
 80016dc:	f002 faa0 	bl	8003c20 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 LED3_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin
 80016e0:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80016e4:	61fb      	str	r3, [r7, #28]
			| OLED_DC_Pin | LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4821      	ldr	r0, [pc, #132]	; (8001780 <MX_GPIO_Init+0x18c>)
 80016fa:	f002 f8f5 	bl	80038e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin;
 80016fe:	233c      	movs	r3, #60	; 0x3c
 8001700:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170a:	2302      	movs	r3, #2
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	481b      	ldr	r0, [pc, #108]	; (8001784 <MX_GPIO_Init+0x190>)
 8001716:	f002 f8e7 	bl	80038e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Buzzer_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin;
 800171a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <MX_GPIO_Init+0x194>)
 8001734:	f002 f8d8 	bl	80038e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_PB_Pin */
	GPIO_InitStruct.Pin = USER_PB_Pin;
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800173e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001742:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	480f      	ldr	r0, [pc, #60]	; (800178c <MX_GPIO_Init+0x198>)
 8001750:	f002 f8ca 	bl	80038e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Trigger_Pin */
	GPIO_InitStruct.Pin = Trigger_Pin;
 8001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001758:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <MX_GPIO_Init+0x198>)
 800176e:	f002 f8bb 	bl	80038e8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001772:	bf00      	nop
 8001774:	3730      	adds	r7, #48	; 0x30
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40021000 	.word	0x40021000
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400
 800178c:	40020c00 	.word	0x40020c00

08001790 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// communication
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	HAL_UART_Receive_IT(&huart3, aRxBuffer, 5);
 8001798:	2205      	movs	r2, #5
 800179a:	4904      	ldr	r1, [pc, #16]	; (80017ac <HAL_UART_RxCpltCallback+0x1c>)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <HAL_UART_RxCpltCallback+0x20>)
 800179e:	f005 fb12 	bl	8006dc6 <HAL_UART_Receive_IT>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200002a4 	.word	0x200002a4
 80017b0:	20000240 	.word	0x20000240
 80017b4:	00000000 	.word	0x00000000

080017b8 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim4, 0);
	while (__HAL_TIM_GET_COUNTER (&htim4) < time)
		;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7f1b      	ldrb	r3, [r3, #28]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	f040 808a 	bne.w	80018de <HAL_TIM_IC_CaptureCallback+0x126>
		if (Is_First_Captured == 0) {
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d11b      	bne.n	800180a <HAL_TIM_IC_CaptureCallback+0x52>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017d2:	2100      	movs	r1, #0
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f004 fc8f 	bl	80060f8 <HAL_TIM_ReadCapturedValue>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017e0:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 020a 	bic.w	r2, r2, #10
 80017f6:	621a      	str	r2, [r3, #32]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0202 	orr.w	r2, r2, #2
 8001806:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8001808:	e069      	b.n	80018de <HAL_TIM_IC_CaptureCallback+0x126>
		} else if (Is_First_Captured == 1) {
 800180a:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d165      	bne.n	80018de <HAL_TIM_IC_CaptureCallback+0x126>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001812:	2100      	movs	r1, #0
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f004 fc6f 	bl	80060f8 <HAL_TIM_ReadCapturedValue>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001820:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	dd0a      	ble.n	800184c <HAL_TIM_IC_CaptureCallback+0x94>
				Difference = IC_Val2 - IC_Val1;
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	e011      	b.n	8001870 <HAL_TIM_IC_CaptureCallback+0xb8>
			else if (IC_Val1 > IC_Val2) {
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	dd0b      	ble.n	8001870 <HAL_TIM_IC_CaptureCallback+0xb8>
				Difference = (65535 - IC_Val1) + IC_Val2;
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b29b      	uxth	r3, r3
 8001868:	3b01      	subs	r3, #1
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x144>)
 800186e:	801a      	strh	r2, [r3, #0]
			uDistance = Difference * .0343 / 2;
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x144>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe4d 	bl	8000514 <__aeabi_i2d>
 800187a:	a31b      	add	r3, pc, #108	; (adr r3, 80018e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe feb2 	bl	80005e8 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001894:	f7fe ffd2 	bl	800083c <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f964 	bl	8000b6c <__aeabi_d2uiz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_TIM_IC_CaptureCallback+0x148>)
 80018aa:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a1a      	ldr	r2, [r3, #32]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 020a 	bic.w	r2, r2, #10
 80018c0:	621a      	str	r2, [r3, #32]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a12      	ldr	r2, [r2, #32]
 80018cc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0202 	bic.w	r2, r2, #2
 80018dc:	60da      	str	r2, [r3, #12]
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	04816f00 	.word	0x04816f00
 80018ec:	3fa18fc5 	.word	0x3fa18fc5
 80018f0:	20000300 	.word	0x20000300
 80018f4:	20000304 	.word	0x20000304
 80018f8:	20000308 	.word	0x20000308
 80018fc:	2000030c 	.word	0x2000030c
 8001900:	2000030e 	.word	0x2000030e
 8001904:	200001b0 	.word	0x200001b0

08001908 <moveCarStraight>:
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
}

// movement
void moveCarStraight(double distance) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	ed87 0b00 	vstr	d0, [r7]
	distance = distance * 75;
 8001912:	a331      	add	r3, pc, #196	; (adr r3, 80019d8 <moveCarStraight+0xd0>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800191c:	f7fe fe64 	bl	80005e8 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	e9c7 2300 	strd	r2, r3, [r7]
	pwmVal_servo = SERVOCENTER;
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <moveCarStraight+0xb0>)
 800192a:	2294      	movs	r2, #148	; 0x94
 800192c:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 800192e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001932:	f006 faf1 	bl	8007f18 <osDelay>
	e_brake = 0;
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <moveCarStraight+0xb4>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 800193c:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <moveCarStraight+0xb8>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
	rightEncoderVal = 75000;
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <moveCarStraight+0xbc>)
 8001944:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <moveCarStraight+0xc0>)
 8001946:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 75000;
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <moveCarStraight+0xc4>)
 800194a:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <moveCarStraight+0xc0>)
 800194c:	601a      	str	r2, [r3, #0]
	rightTarget = 75000;
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <moveCarStraight+0xc8>)
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <moveCarStraight+0xc0>)
 8001952:	601a      	str	r2, [r3, #0]
	leftTarget = 75000;
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <moveCarStraight+0xcc>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <moveCarStraight+0xc0>)
 8001958:	601a      	str	r2, [r3, #0]
	rightTarget += distance;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <moveCarStraight+0xc8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fdd8 	bl	8000514 <__aeabi_i2d>
 8001964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001968:	f7fe fc88 	bl	800027c <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f8d2 	bl	8000b1c <__aeabi_d2iz>
 8001978:	4603      	mov	r3, r0
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <moveCarStraight+0xc8>)
 800197c:	6013      	str	r3, [r2, #0]
	leftTarget += distance;
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <moveCarStraight+0xcc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fdc6 	bl	8000514 <__aeabi_i2d>
 8001988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198c:	f7fe fc76 	bl	800027c <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f8c0 	bl	8000b1c <__aeabi_d2iz>
 800199c:	4603      	mov	r3, r0
 800199e:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <moveCarStraight+0xcc>)
 80019a0:	6013      	str	r3, [r2, #0]
	while (finishCheck())
 80019a2:	bf00      	nop
 80019a4:	f000 f984 	bl	8001cb0 <finishCheck>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1fa      	bne.n	80019a4 <moveCarStraight+0x9c>
		;
//	if (stopped == 1) {
//		vTaskResume(ultrasonicTaskHandle);
//		stopped = 0;
//	}
}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000000 	.word	0x20000000
 80019bc:	200002bc 	.word	0x200002bc
 80019c0:	200002b8 	.word	0x200002b8
 80019c4:	200002c0 	.word	0x200002c0
 80019c8:	000124f8 	.word	0x000124f8
 80019cc:	200002c4 	.word	0x200002c4
 80019d0:	200002c8 	.word	0x200002c8
 80019d4:	200002cc 	.word	0x200002cc
 80019d8:	00000000 	.word	0x00000000
 80019dc:	4052c000 	.word	0x4052c000

080019e0 <moveCarRight>:
	e_brake = 1;
	pwmVal_servo = SERVOCENTER;
	osDelay(300);
}

void moveCarRight(double angle) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <moveCarRight+0x54>)
 80019ec:	22d2      	movs	r2, #210	; 0xd2
 80019ee:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 80019f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019f4:	f006 fa90 	bl	8007f18 <osDelay>
	e_brake = 0;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <moveCarRight+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <moveCarRight+0x5c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <moveCarRight+0x60>)
 8001a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a0e:	f7fe fc33 	bl	8000278 <__aeabi_dsub>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	490a      	ldr	r1, [pc, #40]	; (8001a40 <moveCarRight+0x60>)
 8001a18:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck())
 8001a1c:	bf00      	nop
 8001a1e:	f000 f947 	bl	8001cb0 <finishCheck>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1fa      	bne.n	8001a1e <moveCarRight+0x3e>
		;
//	if (stopped == 1) {
//		vTaskResume(ultrasonicTaskHandle);
//		stopped = 0;
//	}
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000
 8001a38:	200002bc 	.word	0x200002bc
 8001a3c:	200002b8 	.word	0x200002b8
 8001a40:	200002d0 	.word	0x200002d0

08001a44 <moveCarLeft>:

void moveCarLeft(double angle) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <moveCarLeft+0x54>)
 8001a50:	2255      	movs	r2, #85	; 0x55
 8001a52:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 8001a54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a58:	f006 fa5e 	bl	8007f18 <osDelay>
	e_brake = 0;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <moveCarLeft+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <moveCarLeft+0x5c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <moveCarLeft+0x60>)
 8001a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a72:	f7fe fc03 	bl	800027c <__adddf3>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <moveCarLeft+0x60>)
 8001a7c:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck())
 8001a80:	bf00      	nop
 8001a82:	f000 f915 	bl	8001cb0 <finishCheck>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1fa      	bne.n	8001a82 <moveCarLeft+0x3e>
		;
//	if (stopped == 1) {
//		vTaskResume(ultrasonicTaskHandle);
//		stopped = 0;
//	}
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	200002bc 	.word	0x200002bc
 8001aa0:	200002b8 	.word	0x200002b8
 8001aa4:	200002d0 	.word	0x200002d0

08001aa8 <PID_Control>:

// error correction
int PID_Control(int error, int right) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	if (right) { //rightMotor
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d018      	beq.n	8001aea <PID_Control+0x42>
		if (error > 0) { //go forward
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	dd0a      	ble.n	8001ad4 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	4835      	ldr	r0, [pc, #212]	; (8001b98 <PID_Control+0xf0>)
 8001ac4:	f002 f8ac 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2120      	movs	r1, #32
 8001acc:	4832      	ldr	r0, [pc, #200]	; (8001b98 <PID_Control+0xf0>)
 8001ace:	f002 f8a7 	bl	8003c20 <HAL_GPIO_WritePin>
 8001ad2:	e022      	b.n	8001b1a <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	482f      	ldr	r0, [pc, #188]	; (8001b98 <PID_Control+0xf0>)
 8001ada:	f002 f8a1 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	482d      	ldr	r0, [pc, #180]	; (8001b98 <PID_Control+0xf0>)
 8001ae4:	f002 f89c 	bl	8003c20 <HAL_GPIO_WritePin>
 8001ae8:	e017      	b.n	8001b1a <PID_Control+0x72>
		}
	} else { //leftMotor
		if (error > 0) { //go forward
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	dd0a      	ble.n	8001b06 <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001af0:	2201      	movs	r2, #1
 8001af2:	2108      	movs	r1, #8
 8001af4:	4828      	ldr	r0, [pc, #160]	; (8001b98 <PID_Control+0xf0>)
 8001af6:	f002 f893 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2104      	movs	r1, #4
 8001afe:	4826      	ldr	r0, [pc, #152]	; (8001b98 <PID_Control+0xf0>)
 8001b00:	f002 f88e 	bl	8003c20 <HAL_GPIO_WritePin>
 8001b04:	e009      	b.n	8001b1a <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001b06:	2200      	movs	r2, #0
 8001b08:	2108      	movs	r1, #8
 8001b0a:	4823      	ldr	r0, [pc, #140]	; (8001b98 <PID_Control+0xf0>)
 8001b0c:	f002 f888 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2104      	movs	r1, #4
 8001b14:	4820      	ldr	r0, [pc, #128]	; (8001b98 <PID_Control+0xf0>)
 8001b16:	f002 f883 	bl	8003c20 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bfb8      	it	lt
 8001b20:	425b      	neglt	r3, r3
 8001b22:	607b      	str	r3, [r7, #4]
	if (error > 2000) {
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b2a:	dd02      	ble.n	8001b32 <PID_Control+0x8a>
		return 3000;
 8001b2c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b30:	e02d      	b.n	8001b8e <PID_Control+0xe6>
	} else if (error > 500) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b38:	dd02      	ble.n	8001b40 <PID_Control+0x98>
		return 2000;
 8001b3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b3e:	e026      	b.n	8001b8e <PID_Control+0xe6>
	} else if (error > 200) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2bc8      	cmp	r3, #200	; 0xc8
 8001b44:	dd02      	ble.n	8001b4c <PID_Control+0xa4>
		return 1400;
 8001b46:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001b4a:	e020      	b.n	8001b8e <PID_Control+0xe6>
	} else if (error > 100) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	dd02      	ble.n	8001b58 <PID_Control+0xb0>
		return 1000;
 8001b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b56:	e01a      	b.n	8001b8e <PID_Control+0xe6>
	} else if (error > 2) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	dd07      	ble.n	8001b6e <PID_Control+0xc6>
		times_acceptable++;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <PID_Control+0xf4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3301      	adds	r3, #1
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <PID_Control+0xf4>)
 8001b66:	6013      	str	r3, [r2, #0]
		return 500;
 8001b68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b6c:	e00f      	b.n	8001b8e <PID_Control+0xe6>
	} else if (error >= 1) {
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	dd06      	ble.n	8001b82 <PID_Control+0xda>
		times_acceptable++;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <PID_Control+0xf4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <PID_Control+0xf4>)
 8001b7c:	6013      	str	r3, [r2, #0]
		return 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e005      	b.n	8001b8e <PID_Control+0xe6>
	} else {
		times_acceptable++;
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <PID_Control+0xf4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <PID_Control+0xf4>)
 8001b8a:	6013      	str	r3, [r2, #0]
		return 0;
 8001b8c:	2300      	movs	r3, #0
	}
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	200002b8 	.word	0x200002b8

08001ba0 <PID_Angle>:

int PID_Angle(double errord, int right) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001baa:	6078      	str	r0, [r7, #4]
	int error = (int) (errord * 10);
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <PID_Angle+0x104>)
 8001bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb6:	f7fe fd17 	bl	80005e8 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7fe ffab 	bl	8000b1c <__aeabi_d2iz>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	617b      	str	r3, [r7, #20]
	if (right) { //rightMotor
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d018      	beq.n	8001c02 <PID_Angle+0x62>
		if (error > 0) { //go forward
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	dd0a      	ble.n	8001bec <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2110      	movs	r1, #16
 8001bda:	4833      	ldr	r0, [pc, #204]	; (8001ca8 <PID_Angle+0x108>)
 8001bdc:	f002 f820 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2120      	movs	r1, #32
 8001be4:	4830      	ldr	r0, [pc, #192]	; (8001ca8 <PID_Angle+0x108>)
 8001be6:	f002 f81b 	bl	8003c20 <HAL_GPIO_WritePin>
 8001bea:	e022      	b.n	8001c32 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001bec:	2200      	movs	r2, #0
 8001bee:	2110      	movs	r1, #16
 8001bf0:	482d      	ldr	r0, [pc, #180]	; (8001ca8 <PID_Angle+0x108>)
 8001bf2:	f002 f815 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2120      	movs	r1, #32
 8001bfa:	482b      	ldr	r0, [pc, #172]	; (8001ca8 <PID_Angle+0x108>)
 8001bfc:	f002 f810 	bl	8003c20 <HAL_GPIO_WritePin>
 8001c00:	e017      	b.n	8001c32 <PID_Angle+0x92>
		}
	} else { //leftMotor
		if (error < 0) { //go forward
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da0a      	bge.n	8001c1e <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	4826      	ldr	r0, [pc, #152]	; (8001ca8 <PID_Angle+0x108>)
 8001c0e:	f002 f807 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2104      	movs	r1, #4
 8001c16:	4824      	ldr	r0, [pc, #144]	; (8001ca8 <PID_Angle+0x108>)
 8001c18:	f002 f802 	bl	8003c20 <HAL_GPIO_WritePin>
 8001c1c:	e009      	b.n	8001c32 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2108      	movs	r1, #8
 8001c22:	4821      	ldr	r0, [pc, #132]	; (8001ca8 <PID_Angle+0x108>)
 8001c24:	f001 fffc 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <PID_Angle+0x108>)
 8001c2e:	f001 fff7 	bl	8003c20 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bfb8      	it	lt
 8001c38:	425b      	neglt	r3, r3
 8001c3a:	617b      	str	r3, [r7, #20]
	if (error > 300) {
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c42:	dd02      	ble.n	8001c4a <PID_Angle+0xaa>
		return 3000;
 8001c44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c48:	e028      	b.n	8001c9c <PID_Angle+0xfc>
	} else if (error > 200) {
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2bc8      	cmp	r3, #200	; 0xc8
 8001c4e:	dd02      	ble.n	8001c56 <PID_Angle+0xb6>
		return 2000;
 8001c50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c54:	e022      	b.n	8001c9c <PID_Angle+0xfc>
	} else if (error > 150) {
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b96      	cmp	r3, #150	; 0x96
 8001c5a:	dd02      	ble.n	8001c62 <PID_Angle+0xc2>
		return 1600;
 8001c5c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001c60:	e01c      	b.n	8001c9c <PID_Angle+0xfc>
	} else if (error > 100) {
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b64      	cmp	r3, #100	; 0x64
 8001c66:	dd02      	ble.n	8001c6e <PID_Angle+0xce>
		return 1400;
 8001c68:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001c6c:	e016      	b.n	8001c9c <PID_Angle+0xfc>
	} else if (error > 10) {
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b0a      	cmp	r3, #10
 8001c72:	dd02      	ble.n	8001c7a <PID_Angle+0xda>
		return 1000;
 8001c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c78:	e010      	b.n	8001c9c <PID_Angle+0xfc>
	} else if (error >= 2) {
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	dd07      	ble.n	8001c90 <PID_Angle+0xf0>
		times_acceptable++;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <PID_Angle+0x10c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <PID_Angle+0x10c>)
 8001c88:	6013      	str	r3, [r2, #0]
		return 600;
 8001c8a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001c8e:	e005      	b.n	8001c9c <PID_Angle+0xfc>
	} else {
		times_acceptable++;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <PID_Angle+0x10c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <PID_Angle+0x10c>)
 8001c98:	6013      	str	r3, [r2, #0]
		return 0;
 8001c9a:	2300      	movs	r3, #0
	}
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40240000 	.word	0x40240000
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	200002b8 	.word	0x200002b8

08001cb0 <finishCheck>:

int finishCheck() {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	if (times_acceptable > 20) {
 8001cb4:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <finishCheck+0x48>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b14      	cmp	r3, #20
 8001cba:	dd1a      	ble.n	8001cf2 <finishCheck+0x42>
		e_brake = 1;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <finishCheck+0x4c>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <finishCheck+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	801a      	strh	r2, [r3, #0]
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <finishCheck+0x50>)
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <finishCheck+0x54>)
 8001cce:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <finishCheck+0x58>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <finishCheck+0x5c>)
 8001cd6:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <finishCheck+0x60>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <finishCheck+0x64>)
 8001cde:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <finishCheck+0x48>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
		osDelay(300);
 8001ce6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001cea:	f006 f915 	bl	8007f18 <osDelay>

		return 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <finishCheck+0x44>
	}
	return 1;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200002b8 	.word	0x200002b8
 8001cfc:	200002bc 	.word	0x200002bc
 8001d00:	200002b4 	.word	0x200002b4
 8001d04:	200002b6 	.word	0x200002b6
 8001d08:	200002c4 	.word	0x200002c4
 8001d0c:	200002cc 	.word	0x200002cc
 8001d10:	200002c0 	.word	0x200002c0
 8001d14:	200002c8 	.word	0x200002c8

08001d18 <readByte>:

// gyro
void readByte(uint8_t addr, uint8_t *data) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <readByte+0x4c>)
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <readByte+0x50>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	b299      	uxth	r1, r3
 8001d34:	230a      	movs	r3, #10
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <readByte+0x4c>)
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <readByte+0x54>)
 8001d3e:	f002 f8e7 	bl	8003f10 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <readByte+0x50>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	2314      	movs	r3, #20
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	4805      	ldr	r0, [pc, #20]	; (8001d6c <readByte+0x54>)
 8001d56:	f002 f9d9 	bl	800410c <HAL_I2C_Master_Receive>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200002e0 	.word	0x200002e0
 8001d68:	20000002 	.word	0x20000002
 8001d6c:	20000084 	.word	0x20000084

08001d70 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	4603      	mov	r3, r0
 8001d78:	460a      	mov	r2, r1
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <writeByte+0x3c>)
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <writeByte+0x3c>)
 8001d88:	79bb      	ldrb	r3, [r7, #6]
 8001d8a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <writeByte+0x40>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	b299      	uxth	r1, r3
 8001d96:	2314      	movs	r3, #20
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <writeByte+0x3c>)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <writeByte+0x44>)
 8001da0:	f002 f8b6 	bl	8003f10 <HAL_I2C_Master_Transmit>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200002e0 	.word	0x200002e0
 8001db0:	20000002 	.word	0x20000002
 8001db4:	20000084 	.word	0x20000084

08001db8 <gyroInit>:

void gyroInit() {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2006      	movs	r0, #6
 8001dc0:	f7ff ffd6 	bl	8001d70 <writeByte>
	osDelay(10);
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f006 f8a7 	bl	8007f18 <osDelay>
	writeByte(0x03, 0x80);
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f7ff ffcf 	bl	8001d70 <writeByte>
	osDelay(10);
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f006 f8a0 	bl	8007f18 <osDelay>
	writeByte(0x07, 0x07);
 8001dd8:	2107      	movs	r1, #7
 8001dda:	2007      	movs	r0, #7
 8001ddc:	f7ff ffc8 	bl	8001d70 <writeByte>
	osDelay(10);
 8001de0:	200a      	movs	r0, #10
 8001de2:	f006 f899 	bl	8007f18 <osDelay>
	writeByte(0x06, 0x01);
 8001de6:	2101      	movs	r1, #1
 8001de8:	2006      	movs	r0, #6
 8001dea:	f7ff ffc1 	bl	8001d70 <writeByte>
	osDelay(10);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f006 f892 	bl	8007f18 <osDelay>
	writeByte(0x7F, 0x20);
 8001df4:	2120      	movs	r1, #32
 8001df6:	207f      	movs	r0, #127	; 0x7f
 8001df8:	f7ff ffba 	bl	8001d70 <writeByte>
	osDelay(10);
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f006 f88b 	bl	8007f18 <osDelay>
	writeByte(0x01, 0x2F);
 8001e02:	212f      	movs	r1, #47	; 0x2f
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7ff ffb3 	bl	8001d70 <writeByte>
	osDelay(10);
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f006 f884 	bl	8007f18 <osDelay>
	writeByte(0x0, 0x00);
 8001e10:	2100      	movs	r1, #0
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff ffac 	bl	8001d70 <writeByte>
	osDelay(10);
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f006 f87d 	bl	8007f18 <osDelay>
	writeByte(0x7F, 0x00);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	207f      	movs	r0, #127	; 0x7f
 8001e22:	f7ff ffa5 	bl	8001d70 <writeByte>
	osDelay(10);
 8001e26:	200a      	movs	r0, #10
 8001e28:	f006 f876 	bl	8007f18 <osDelay>
	writeByte(0x07, 0x00);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2007      	movs	r0, #7
 8001e30:	f7ff ff9e 	bl	8001d70 <writeByte>
	osDelay(10);
 8001e34:	200a      	movs	r0, #10
 8001e36:	f006 f86f 	bl	8007f18 <osDelay>
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <StartDefaultTask+0x1c>)
 8001e4e:	f001 ff00 	bl	8003c52 <HAL_GPIO_TogglePin>
		osDelay(2000);
 8001e52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e56:	f006 f85f 	bl	8007f18 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001e5a:	e7f5      	b.n	8001e48 <StartDefaultTask+0x8>
 8001e5c:	40021000 	.word	0x40021000

08001e60 <StartMotorTask>:
 * @brief Function implementing the motorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 8001e68:	4bab      	ldr	r3, [pc, #684]	; (8002118 <StartMotorTask+0x2b8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 8001e6e:	4bab      	ldr	r3, [pc, #684]	; (800211c <StartMotorTask+0x2bc>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	801a      	strh	r2, [r3, #0]
	int straightCorrection = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	48a9      	ldr	r0, [pc, #676]	; (8002120 <StartMotorTask+0x2c0>)
 8001e7c:	f003 fbc2 	bl	8005604 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001e80:	2104      	movs	r1, #4
 8001e82:	48a7      	ldr	r0, [pc, #668]	; (8002120 <StartMotorTask+0x2c0>)
 8001e84:	f003 fbbe 	bl	8005604 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e88:	210c      	movs	r1, #12
 8001e8a:	48a6      	ldr	r0, [pc, #664]	; (8002124 <StartMotorTask+0x2c4>)
 8001e8c:	f003 fbba 	bl	8005604 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = SERVOCENTER; //Centre
 8001e90:	4ba4      	ldr	r3, [pc, #656]	; (8002124 <StartMotorTask+0x2c4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2294      	movs	r2, #148	; 0x94
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2110      	movs	r1, #16
 8001e9c:	48a2      	ldr	r0, [pc, #648]	; (8002128 <StartMotorTask+0x2c8>)
 8001e9e:	f001 febf 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	48a0      	ldr	r0, [pc, #640]	; (8002128 <StartMotorTask+0x2c8>)
 8001ea8:	f001 feba 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001eac:	2201      	movs	r2, #1
 8001eae:	2108      	movs	r1, #8
 8001eb0:	489d      	ldr	r0, [pc, #628]	; (8002128 <StartMotorTask+0x2c8>)
 8001eb2:	f001 feb5 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2104      	movs	r1, #4
 8001eba:	489b      	ldr	r0, [pc, #620]	; (8002128 <StartMotorTask+0x2c8>)
 8001ebc:	f001 feb0 	bl	8003c20 <HAL_GPIO_WritePin>
	osDelay(1000);
 8001ec0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec4:	f006 f828 	bl	8007f18 <osDelay>

	/* Infinite loop */
	for (;;) {
		htim1.Instance->CCR4 = pwmVal_servo;
 8001ec8:	4b98      	ldr	r3, [pc, #608]	; (800212c <StartMotorTask+0x2cc>)
 8001eca:	881a      	ldrh	r2, [r3, #0]
 8001ecc:	4b95      	ldr	r3, [pc, #596]	; (8002124 <StartMotorTask+0x2c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
		error_angle = target_angle - total_angle;
 8001ed2:	4b97      	ldr	r3, [pc, #604]	; (8002130 <StartMotorTask+0x2d0>)
 8001ed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed8:	4b96      	ldr	r3, [pc, #600]	; (8002134 <StartMotorTask+0x2d4>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe f9cb 	bl	8000278 <__aeabi_dsub>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4994      	ldr	r1, [pc, #592]	; (8002138 <StartMotorTask+0x2d8>)
 8001ee8:	e9c1 2300 	strd	r2, r3, [r1]

		if (pwmVal_servo < 127) { //106 //TURN LEFT
 8001eec:	4b8f      	ldr	r3, [pc, #572]	; (800212c <StartMotorTask+0x2cc>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	2b7e      	cmp	r3, #126	; 0x7e
 8001ef2:	d852      	bhi.n	8001f9a <StartMotorTask+0x13a>
			pwmVal_R = PID_Angle(error_angle, 1) * 1.072;  //right is master
 8001ef4:	4b90      	ldr	r3, [pc, #576]	; (8002138 <StartMotorTask+0x2d8>)
 8001ef6:	ed93 7b00 	vldr	d7, [r3]
 8001efa:	2001      	movs	r0, #1
 8001efc:	eeb0 0a47 	vmov.f32	s0, s14
 8001f00:	eef0 0a67 	vmov.f32	s1, s15
 8001f04:	f7ff fe4c 	bl	8001ba0 <PID_Angle>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fb02 	bl	8000514 <__aeabi_i2d>
 8001f10:	a37d      	add	r3, pc, #500	; (adr r3, 8002108 <StartMotorTask+0x2a8>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	f7fe fb67 	bl	80005e8 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fe23 	bl	8000b6c <__aeabi_d2uiz>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b7b      	ldr	r3, [pc, #492]	; (8002118 <StartMotorTask+0x2b8>)
 8001f2c:	801a      	strh	r2, [r3, #0]
			pwmVal_L = pwmVal_R * (0.59); //left is slave
 8001f2e:	4b7a      	ldr	r3, [pc, #488]	; (8002118 <StartMotorTask+0x2b8>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe faee 	bl	8000514 <__aeabi_i2d>
 8001f38:	a375      	add	r3, pc, #468	; (adr r3, 8002110 <StartMotorTask+0x2b0>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fb53 	bl	80005e8 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7fe fe0f 	bl	8000b6c <__aeabi_d2uiz>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b72      	ldr	r3, [pc, #456]	; (800211c <StartMotorTask+0x2bc>)
 8001f54:	801a      	strh	r2, [r3, #0]

			if (error_angle > 0) {
 8001f56:	4b78      	ldr	r3, [pc, #480]	; (8002138 <StartMotorTask+0x2d8>)
 8001f58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	f7fe fdd0 	bl	8000b08 <__aeabi_dcmpgt>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <StartMotorTask+0x124>
				//go forward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2108      	movs	r1, #8
 8001f72:	486d      	ldr	r0, [pc, #436]	; (8002128 <StartMotorTask+0x2c8>)
 8001f74:	f001 fe54 	bl	8003c20 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	486a      	ldr	r0, [pc, #424]	; (8002128 <StartMotorTask+0x2c8>)
 8001f7e:	f001 fe4f 	bl	8003c20 <HAL_GPIO_WritePin>
 8001f82:	e15b      	b.n	800223c <StartMotorTask+0x3dc>
			} else {
				//go backward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001f84:	2200      	movs	r2, #0
 8001f86:	2108      	movs	r1, #8
 8001f88:	4867      	ldr	r0, [pc, #412]	; (8002128 <StartMotorTask+0x2c8>)
 8001f8a:	f001 fe49 	bl	8003c20 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2104      	movs	r1, #4
 8001f92:	4865      	ldr	r0, [pc, #404]	; (8002128 <StartMotorTask+0x2c8>)
 8001f94:	f001 fe44 	bl	8003c20 <HAL_GPIO_WritePin>
 8001f98:	e150      	b.n	800223c <StartMotorTask+0x3dc>
			}
		}

		else if (pwmVal_servo > 189) { //230 //TURN RIGHT
 8001f9a:	4b64      	ldr	r3, [pc, #400]	; (800212c <StartMotorTask+0x2cc>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	2bbd      	cmp	r3, #189	; 0xbd
 8001fa0:	d943      	bls.n	800202a <StartMotorTask+0x1ca>
			pwmVal_L = PID_Angle(error_angle, 0);
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <StartMotorTask+0x2d8>)
 8001fa4:	ed93 7b00 	vldr	d7, [r3]
 8001fa8:	2000      	movs	r0, #0
 8001faa:	eeb0 0a47 	vmov.f32	s0, s14
 8001fae:	eef0 0a67 	vmov.f32	s1, s15
 8001fb2:	f7ff fdf5 	bl	8001ba0 <PID_Angle>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	4b58      	ldr	r3, [pc, #352]	; (800211c <StartMotorTask+0x2bc>)
 8001fbc:	801a      	strh	r2, [r3, #0]
			pwmVal_R = pwmVal_L * (0.59); //right is slave
 8001fbe:	4b57      	ldr	r3, [pc, #348]	; (800211c <StartMotorTask+0x2bc>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe faa6 	bl	8000514 <__aeabi_i2d>
 8001fc8:	a351      	add	r3, pc, #324	; (adr r3, 8002110 <StartMotorTask+0x2b0>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fb0b 	bl	80005e8 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7fe fdc7 	bl	8000b6c <__aeabi_d2uiz>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b4d      	ldr	r3, [pc, #308]	; (8002118 <StartMotorTask+0x2b8>)
 8001fe4:	801a      	strh	r2, [r3, #0]

			if (error_angle < 0) {
 8001fe6:	4b54      	ldr	r3, [pc, #336]	; (8002138 <StartMotorTask+0x2d8>)
 8001fe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	f7fe fd6a 	bl	8000acc <__aeabi_dcmplt>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <StartMotorTask+0x1b4>
				//go forward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001ffe:	2201      	movs	r2, #1
 8002000:	2110      	movs	r1, #16
 8002002:	4849      	ldr	r0, [pc, #292]	; (8002128 <StartMotorTask+0x2c8>)
 8002004:	f001 fe0c 	bl	8003c20 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	2120      	movs	r1, #32
 800200c:	4846      	ldr	r0, [pc, #280]	; (8002128 <StartMotorTask+0x2c8>)
 800200e:	f001 fe07 	bl	8003c20 <HAL_GPIO_WritePin>
 8002012:	e113      	b.n	800223c <StartMotorTask+0x3dc>
			} else {
				//go backward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8002014:	2200      	movs	r2, #0
 8002016:	2110      	movs	r1, #16
 8002018:	4843      	ldr	r0, [pc, #268]	; (8002128 <StartMotorTask+0x2c8>)
 800201a:	f001 fe01 	bl	8003c20 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	2120      	movs	r1, #32
 8002022:	4841      	ldr	r0, [pc, #260]	; (8002128 <StartMotorTask+0x2c8>)
 8002024:	f001 fdfc 	bl	8003c20 <HAL_GPIO_WritePin>
 8002028:	e108      	b.n	800223c <StartMotorTask+0x3dc>
			}
		}

		else {

			pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0) * 1.072;
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <StartMotorTask+0x2dc>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b44      	ldr	r3, [pc, #272]	; (8002140 <StartMotorTask+0x2e0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fd36 	bl	8001aa8 <PID_Control>
 800203c:	4603      	mov	r3, r0
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa68 	bl	8000514 <__aeabi_i2d>
 8002044:	a330      	add	r3, pc, #192	; (adr r3, 8002108 <StartMotorTask+0x2a8>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe facd 	bl	80005e8 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fd89 	bl	8000b6c <__aeabi_d2uiz>
 800205a:	4603      	mov	r3, r0
 800205c:	b29a      	uxth	r2, r3
 800205e:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <StartMotorTask+0x2b8>)
 8002060:	801a      	strh	r2, [r3, #0]
			if (abs(leftTarget - leftEncoderVal)
 8002062:	4b36      	ldr	r3, [pc, #216]	; (800213c <StartMotorTask+0x2dc>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b36      	ldr	r3, [pc, #216]	; (8002140 <StartMotorTask+0x2e0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002070:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
					> abs(rightTarget - rightEncoderVal)) {
 8002074:	4b33      	ldr	r3, [pc, #204]	; (8002144 <StartMotorTask+0x2e4>)
 8002076:	6819      	ldr	r1, [r3, #0]
 8002078:	4b33      	ldr	r3, [pc, #204]	; (8002148 <StartMotorTask+0x2e8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	1acb      	subs	r3, r1, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	bfb8      	it	lt
 8002082:	425b      	neglt	r3, r3
			if (abs(leftTarget - leftEncoderVal)
 8002084:	429a      	cmp	r2, r3
 8002086:	dd03      	ble.n	8002090 <StartMotorTask+0x230>
				straightCorrection++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3301      	adds	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	e002      	b.n	8002096 <StartMotorTask+0x236>
			} else {
				straightCorrection--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3b01      	subs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
			}
			if (abs(leftTarget - leftEncoderVal) < 100) {
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <StartMotorTask+0x2dc>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b29      	ldr	r3, [pc, #164]	; (8002140 <StartMotorTask+0x2e0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80020a4:	db08      	blt.n	80020b8 <StartMotorTask+0x258>
 80020a6:	4b25      	ldr	r3, [pc, #148]	; (800213c <StartMotorTask+0x2dc>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <StartMotorTask+0x2e0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b63      	cmp	r3, #99	; 0x63
 80020b2:	dc01      	bgt.n	80020b8 <StartMotorTask+0x258>
				straightCorrection = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
			}
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <StartMotorTask+0x2e4>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b22      	ldr	r3, [pc, #136]	; (8002148 <StartMotorTask+0x2e8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2101      	movs	r1, #1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fcef 	bl	8001aa8 <PID_Control>
 80020ca:	4603      	mov	r3, r0
					+ straightCorrection;
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	b29a      	uxth	r2, r3
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <StartMotorTask+0x2bc>)
 80020d8:	801a      	strh	r2, [r3, #0]

			if ((leftTarget - leftEncoderVal) < 0) {
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <StartMotorTask+0x2dc>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <StartMotorTask+0x2e0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da67      	bge.n	80021b8 <StartMotorTask+0x358>
				if (error_angle > 5) { // if turn left, 106. right 230. left +. right -.
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <StartMotorTask+0x2d8>)
 80020ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <StartMotorTask+0x2ec>)
 80020f4:	f7fe fd08 	bl	8000b08 <__aeabi_dcmpgt>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d028      	beq.n	8002150 <StartMotorTask+0x2f0>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <StartMotorTask+0x2cc>)
 8002100:	22a7      	movs	r2, #167	; 0xa7
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	e09a      	b.n	800223c <StartMotorTask+0x3dc>
 8002106:	bf00      	nop
 8002108:	78d4fdf4 	.word	0x78d4fdf4
 800210c:	3ff126e9 	.word	0x3ff126e9
 8002110:	ae147ae1 	.word	0xae147ae1
 8002114:	3fe2e147 	.word	0x3fe2e147
 8002118:	200002b4 	.word	0x200002b4
 800211c:	200002b6 	.word	0x200002b6
 8002120:	200001f8 	.word	0x200001f8
 8002124:	200000d8 	.word	0x200000d8
 8002128:	40020000 	.word	0x40020000
 800212c:	20000000 	.word	0x20000000
 8002130:	200002d0 	.word	0x200002d0
 8002134:	200002d8 	.word	0x200002d8
 8002138:	200002f8 	.word	0x200002f8
 800213c:	200002cc 	.word	0x200002cc
 8002140:	200002c4 	.word	0x200002c4
 8002144:	200002c8 	.word	0x200002c8
 8002148:	200002c0 	.word	0x200002c0
 800214c:	40140000 	.word	0x40140000
				} else if (error_angle < -5) {
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <StartMotorTask+0x434>)
 8002152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	4b4f      	ldr	r3, [pc, #316]	; (8002298 <StartMotorTask+0x438>)
 800215c:	f7fe fcb6 	bl	8000acc <__aeabi_dcmplt>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <StartMotorTask+0x30e>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 8002166:	4b4d      	ldr	r3, [pc, #308]	; (800229c <StartMotorTask+0x43c>)
 8002168:	2281      	movs	r2, #129	; 0x81
 800216a:	801a      	strh	r2, [r3, #0]
 800216c:	e066      	b.n	800223c <StartMotorTask+0x3dc>
				} else {
					pwmVal_servo = ((19 * error_angle) / 5 + SERVOCENTER);
 800216e:	4b49      	ldr	r3, [pc, #292]	; (8002294 <StartMotorTask+0x434>)
 8002170:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b49      	ldr	r3, [pc, #292]	; (80022a0 <StartMotorTask+0x440>)
 800217a:	f7fe fa35 	bl	80005e8 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <StartMotorTask+0x444>)
 800218c:	f7fe fb56 	bl	800083c <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b42      	ldr	r3, [pc, #264]	; (80022a8 <StartMotorTask+0x448>)
 800219e:	f7fe f86d 	bl	800027c <__adddf3>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fcdf 	bl	8000b6c <__aeabi_d2uiz>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	4b3a      	ldr	r3, [pc, #232]	; (800229c <StartMotorTask+0x43c>)
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	e041      	b.n	800223c <StartMotorTask+0x3dc>
				}

			} else {
				if (error_angle > 5) { // if turn left, 106. right 230. left +. right -.
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <StartMotorTask+0x434>)
 80021ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <StartMotorTask+0x444>)
 80021c4:	f7fe fca0 	bl	8000b08 <__aeabi_dcmpgt>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <StartMotorTask+0x376>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 80021ce:	4b33      	ldr	r3, [pc, #204]	; (800229c <StartMotorTask+0x43c>)
 80021d0:	2281      	movs	r2, #129	; 0x81
 80021d2:	801a      	strh	r2, [r3, #0]
 80021d4:	e032      	b.n	800223c <StartMotorTask+0x3dc>
				} else if (error_angle < -5) {
 80021d6:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <StartMotorTask+0x434>)
 80021d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <StartMotorTask+0x438>)
 80021e2:	f7fe fc73 	bl	8000acc <__aeabi_dcmplt>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <StartMotorTask+0x394>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <StartMotorTask+0x43c>)
 80021ee:	22a7      	movs	r2, #167	; 0xa7
 80021f0:	801a      	strh	r2, [r3, #0]
 80021f2:	e023      	b.n	800223c <StartMotorTask+0x3dc>
				} else {
					pwmVal_servo = ((-19 * error_angle) / 5 + SERVOCENTER);
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <StartMotorTask+0x434>)
 80021f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <StartMotorTask+0x44c>)
 8002200:	f7fe f9f2 	bl	80005e8 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <StartMotorTask+0x444>)
 8002212:	f7fe fb13 	bl	800083c <__aeabi_ddiv>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <StartMotorTask+0x448>)
 8002224:	f7fe f82a 	bl	800027c <__adddf3>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f7fe fc9c 	bl	8000b6c <__aeabi_d2uiz>
 8002234:	4603      	mov	r3, r0
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <StartMotorTask+0x43c>)
 800223a:	801a      	strh	r2, [r3, #0]
			}

			//line correction equation is pwmVal = (19*error)/5 + SERVOCENTER
		}

		if (e_brake) {
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <StartMotorTask+0x450>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <StartMotorTask+0x402>
			pwmVal_L = pwmVal_R = 0;
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <StartMotorTask+0x454>)
 8002246:	2200      	movs	r2, #0
 8002248:	801a      	strh	r2, [r3, #0]
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <StartMotorTask+0x454>)
 800224c:	881a      	ldrh	r2, [r3, #0]
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <StartMotorTask+0x458>)
 8002250:	801a      	strh	r2, [r3, #0]
			leftTarget = leftEncoderVal;
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <StartMotorTask+0x45c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <StartMotorTask+0x460>)
 8002258:	6013      	str	r3, [r2, #0]
			rightTarget = rightEncoderVal;
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <StartMotorTask+0x464>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <StartMotorTask+0x468>)
 8002260:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <StartMotorTask+0x458>)
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <StartMotorTask+0x46c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R);
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <StartMotorTask+0x454>)
 800226e:	881a      	ldrh	r2, [r3, #0]
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <StartMotorTask+0x46c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(1);
 8002276:	2001      	movs	r0, #1
 8002278:	f005 fe4e 	bl	8007f18 <osDelay>

		if (times_acceptable > 1000) {
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <StartMotorTask+0x470>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002284:	f77f ae20 	ble.w	8001ec8 <StartMotorTask+0x68>
			times_acceptable = 1001;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <StartMotorTask+0x470>)
 800228a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800228e:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR4 = pwmVal_servo;
 8002290:	e61a      	b.n	8001ec8 <StartMotorTask+0x68>
 8002292:	bf00      	nop
 8002294:	200002f8 	.word	0x200002f8
 8002298:	c0140000 	.word	0xc0140000
 800229c:	20000000 	.word	0x20000000
 80022a0:	40330000 	.word	0x40330000
 80022a4:	40140000 	.word	0x40140000
 80022a8:	40628000 	.word	0x40628000
 80022ac:	c0330000 	.word	0xc0330000
 80022b0:	200002bc 	.word	0x200002bc
 80022b4:	200002b4 	.word	0x200002b4
 80022b8:	200002b6 	.word	0x200002b6
 80022bc:	200002c4 	.word	0x200002c4
 80022c0:	200002cc 	.word	0x200002cc
 80022c4:	200002c0 	.word	0x200002c0
 80022c8:	200002c8 	.word	0x200002c8
 80022cc:	200001f8 	.word	0x200001f8
 80022d0:	200002b8 	.word	0x200002b8

080022d4 <StartOLEDTask>:
 * @brief Function implementing the OLEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument) {
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b096      	sub	sp, #88	; 0x58
 80022d8:	af04      	add	r7, sp, #16
 80022da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartOLEDTask */
	uint8_t usVal[20] = { 0 };
 80022dc:	2300      	movs	r3, #0
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
 80022e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
	uint8_t gyroVal[20] = { 0 };
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	f107 0320 	add.w	r3, r7, #32
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
	for (;;) {
		sprintf(usVal, "Distance: %d \0", (int) uDistance);
 8002312:	4b57      	ldr	r3, [pc, #348]	; (8002470 <StartOLEDTask+0x19c>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800231c:	4955      	ldr	r1, [pc, #340]	; (8002474 <StartOLEDTask+0x1a0>)
 800231e:	4618      	mov	r0, r3
 8002320:	f008 fa9c 	bl	800a85c <siprintf>
		OLED_ShowString(0, 10, usVal);
 8002324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002328:	461a      	mov	r2, r3
 800232a:	210a      	movs	r1, #10
 800232c:	2000      	movs	r0, #0
 800232e:	f000 ffe3 	bl	80032f8 <OLED_ShowString>

		int decimals = abs((int) ((error_angle - (int) (error_angle)) * 1000));
 8002332:	4b51      	ldr	r3, [pc, #324]	; (8002478 <StartOLEDTask+0x1a4>)
 8002334:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002338:	4b4f      	ldr	r3, [pc, #316]	; (8002478 <StartOLEDTask+0x1a4>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f7fe fbeb 	bl	8000b1c <__aeabi_d2iz>
 8002346:	4603      	mov	r3, r0
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f8e3 	bl	8000514 <__aeabi_i2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4620      	mov	r0, r4
 8002354:	4629      	mov	r1, r5
 8002356:	f7fd ff8f 	bl	8000278 <__aeabi_dsub>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	4b45      	ldr	r3, [pc, #276]	; (800247c <StartOLEDTask+0x1a8>)
 8002368:	f7fe f93e 	bl	80005e8 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f7fe fbd2 	bl	8000b1c <__aeabi_d2iz>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	bfb8      	it	lt
 800237e:	425b      	neglt	r3, r3
 8002380:	647b      	str	r3, [r7, #68]	; 0x44
		sprintf(gyroVal, "EGyro: %d.%d \0", (int) error_angle, decimals);
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <StartOLEDTask+0x1a4>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe fbc6 	bl	8000b1c <__aeabi_d2iz>
 8002390:	4602      	mov	r2, r0
 8002392:	f107 001c 	add.w	r0, r7, #28
 8002396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002398:	4939      	ldr	r1, [pc, #228]	; (8002480 <StartOLEDTask+0x1ac>)
 800239a:	f008 fa5f 	bl	800a85c <siprintf>
		OLED_ShowString(0, 20, gyroVal);
 800239e:	f107 031c 	add.w	r3, r7, #28
 80023a2:	461a      	mov	r2, r3
 80023a4:	2114      	movs	r1, #20
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 ffa6 	bl	80032f8 <OLED_ShowString>

		decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 80023ac:	4b35      	ldr	r3, [pc, #212]	; (8002484 <StartOLEDTask+0x1b0>)
 80023ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <StartOLEDTask+0x1b0>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fbae 	bl	8000b1c <__aeabi_d2iz>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f8a6 	bl	8000514 <__aeabi_i2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4620      	mov	r0, r4
 80023ce:	4629      	mov	r1, r5
 80023d0:	f7fd ff52 	bl	8000278 <__aeabi_dsub>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b26      	ldr	r3, [pc, #152]	; (800247c <StartOLEDTask+0x1a8>)
 80023e2:	f7fe f901 	bl	80005e8 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fb95 	bl	8000b1c <__aeabi_d2iz>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bfb8      	it	lt
 80023f8:	425b      	neglt	r3, r3
 80023fa:	647b      	str	r3, [r7, #68]	; 0x44
				sprintf(gyroVal, "TGyro: %d.%d \0", (int) total_angle, decimals);
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <StartOLEDTask+0x1b0>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7fe fb89 	bl	8000b1c <__aeabi_d2iz>
 800240a:	4602      	mov	r2, r0
 800240c:	f107 001c 	add.w	r0, r7, #28
 8002410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002412:	491d      	ldr	r1, [pc, #116]	; (8002488 <StartOLEDTask+0x1b4>)
 8002414:	f008 fa22 	bl	800a85c <siprintf>
				OLED_ShowString(0, 30, gyroVal);
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	461a      	mov	r2, r3
 800241e:	211e      	movs	r1, #30
 8002420:	2000      	movs	r0, #0
 8002422:	f000 ff69 	bl	80032f8 <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <StartOLEDTask+0x1b8>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461c      	mov	r4, r3
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <StartOLEDTask+0x1b8>)
 800242e:	785b      	ldrb	r3, [r3, #1]
 8002430:	461d      	mov	r5, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <StartOLEDTask+0x1b8>)
 8002434:	789b      	ldrb	r3, [r3, #2]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002436:	461a      	mov	r2, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <StartOLEDTask+0x1b8>)
 800243a:	78db      	ldrb	r3, [r3, #3]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 800243c:	4619      	mov	r1, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <StartOLEDTask+0x1b8>)
 8002440:	791b      	ldrb	r3, [r3, #4]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002442:	f107 0008 	add.w	r0, r7, #8
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	9101      	str	r1, [sp, #4]
 800244a:	9200      	str	r2, [sp, #0]
 800244c:	462b      	mov	r3, r5
 800244e:	4622      	mov	r2, r4
 8002450:	490f      	ldr	r1, [pc, #60]	; (8002490 <StartOLEDTask+0x1bc>)
 8002452:	f008 fa03 	bl	800a85c <siprintf>
		OLED_ShowString(0, 40, command);
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	461a      	mov	r2, r3
 800245c:	2128      	movs	r1, #40	; 0x28
 800245e:	2000      	movs	r0, #0
 8002460:	f000 ff4a 	bl	80032f8 <OLED_ShowString>

		OLED_Refresh_Gram();
 8002464:	f000 fdd4 	bl	8003010 <OLED_Refresh_Gram>
		osDelay(100);
 8002468:	2064      	movs	r0, #100	; 0x64
 800246a:	f005 fd55 	bl	8007f18 <osDelay>
	for (;;) {
 800246e:	e750      	b.n	8002312 <StartOLEDTask+0x3e>
 8002470:	2000030e 	.word	0x2000030e
 8002474:	0800b2d8 	.word	0x0800b2d8
 8002478:	200002f8 	.word	0x200002f8
 800247c:	408f4000 	.word	0x408f4000
 8002480:	0800b2e8 	.word	0x0800b2e8
 8002484:	200002d8 	.word	0x200002d8
 8002488:	0800b2f8 	.word	0x0800b2f8
 800248c:	200002a4 	.word	0x200002a4
 8002490:	0800b308 	.word	0x0800b308
 8002494:	00000000 	.word	0x00000000

08002498 <StartGyroTask>:
 * @brief Function implementing the gyroTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument) {
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGyroTask */
	gyroInit();
 80024a0:	f7ff fc8a 	bl	8001db8 <gyroInit>
	uint8_t val[2] = { 0, 0 };
 80024a4:	2300      	movs	r3, #0
 80024a6:	813b      	strh	r3, [r7, #8]

	int16_t angular_speed = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	817b      	strh	r3, [r7, #10]

	uint32_t tick = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
	double offset = 0;
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double trash = 0;
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int i = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
	while (i < 600) {
 80024cc:	e048      	b.n	8002560 <StartGyroTask+0xc8>
		osDelay(50);
 80024ce:	2032      	movs	r0, #50	; 0x32
 80024d0:	f005 fd22 	bl	8007f18 <osDelay>
		readByte(0x37, val);
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	4619      	mov	r1, r3
 80024da:	2037      	movs	r0, #55	; 0x37
 80024dc:	f7ff fc1c 	bl	8001d18 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 80024e0:	7a3b      	ldrb	r3, [r7, #8]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	7a7b      	ldrb	r3, [r7, #9]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	817b      	strh	r3, [r7, #10]
		trash += (double) ((double) angular_speed)
 80024ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f80e 	bl	8000514 <__aeabi_i2d>
 80024f8:	4604      	mov	r4, r0
 80024fa:	460d      	mov	r5, r1
				* ((HAL_GetTick() - tick) / 16400.0);
 80024fc:	f001 f820 	bl	8003540 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd fff4 	bl	80004f4 <__aeabi_ui2d>
 800250c:	a346      	add	r3, pc, #280	; (adr r3, 8002628 <StartGyroTask+0x190>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	f7fe f993 	bl	800083c <__aeabi_ddiv>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4620      	mov	r0, r4
 800251c:	4629      	mov	r1, r5
 800251e:	f7fe f863 	bl	80005e8 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
		trash += (double) ((double) angular_speed)
 8002526:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800252a:	f7fd fea7 	bl	800027c <__adddf3>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	e9c7 2304 	strd	r2, r3, [r7, #16]
		offset += angular_speed;
 8002536:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd ffea 	bl	8000514 <__aeabi_i2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002548:	f7fd fe98 	bl	800027c <__adddf3>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tick = HAL_GetTick();
 8002554:	f000 fff4 	bl	8003540 <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3301      	adds	r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
	while (i < 600) {
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002566:	dbb2      	blt.n	80024ce <StartGyroTask+0x36>
	}
	k = 1;
 8002568:	4b31      	ldr	r3, [pc, #196]	; (8002630 <StartGyroTask+0x198>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]
	offset = offset / i;
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f7fd ffd0 	bl	8000514 <__aeabi_i2d>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800257c:	f7fe f95e 	bl	800083c <__aeabi_ddiv>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	e9c7 2306 	strd	r2, r3, [r7, #24]

	tick = HAL_GetTick();
 8002588:	f000 ffda 	bl	8003540 <HAL_GetTick>
 800258c:	6278      	str	r0, [r7, #36]	; 0x24
	/* Infinite loop */
	for (;;) {

		osDelay(100);
 800258e:	2064      	movs	r0, #100	; 0x64
 8002590:	f005 fcc2 	bl	8007f18 <osDelay>
		readByte(0x37, val);
 8002594:	f107 0308 	add.w	r3, r7, #8
 8002598:	4619      	mov	r1, r3
 800259a:	2037      	movs	r0, #55	; 0x37
 800259c:	f7ff fbbc 	bl	8001d18 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 80025a0:	7a3b      	ldrb	r3, [r7, #8]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	b21a      	sxth	r2, r3
 80025a6:	7a7b      	ldrb	r3, [r7, #9]
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	817b      	strh	r3, [r7, #10]
		total_angle += (double) ((double) angular_speed - offset)
 80025ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ffae 	bl	8000514 <__aeabi_i2d>
 80025b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025bc:	f7fd fe5c 	bl	8000278 <__aeabi_dsub>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4614      	mov	r4, r2
 80025c6:	461d      	mov	r5, r3
				* ((HAL_GetTick() - tick) / 16400.0);
 80025c8:	f000 ffba 	bl	8003540 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ff8e 	bl	80004f4 <__aeabi_ui2d>
 80025d8:	a313      	add	r3, pc, #76	; (adr r3, 8002628 <StartGyroTask+0x190>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fe f92d 	bl	800083c <__aeabi_ddiv>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4620      	mov	r0, r4
 80025e8:	4629      	mov	r1, r5
 80025ea:	f7fd fffd 	bl	80005e8 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
		total_angle += (double) ((double) angular_speed - offset)
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <StartGyroTask+0x19c>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fd fe3e 	bl	800027c <__adddf3>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	490b      	ldr	r1, [pc, #44]	; (8002634 <StartGyroTask+0x19c>)
 8002606:	e9c1 2300 	strd	r2, r3, [r1]
		i -= angular_speed;
 800260a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	60fb      	str	r3, [r7, #12]
		tick = HAL_GetTick();
 8002614:	f000 ff94 	bl	8003540 <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3301      	adds	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
		osDelay(100);
 8002620:	e7b5      	b.n	800258e <StartGyroTask+0xf6>
 8002622:	bf00      	nop
 8002624:	f3af 8000 	nop.w
 8002628:	00000000 	.word	0x00000000
 800262c:	40d00400 	.word	0x40d00400
 8002630:	20000310 	.word	0x20000310
 8002634:	200002d8 	.word	0x200002d8

08002638 <StartUltrasonicTask>:
 * @brief Function implementing the ultrasonicTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUltrasonicTask */
void StartUltrasonicTask(void *argument) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]


	/* Infinite loop */
	for (;;) {
//		HCSR04_Read();
		if(k==1){
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <StartUltrasonicTask+0x38>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d108      	bne.n	800265a <StartUltrasonicTask+0x22>
			moveCarStraight(1000);
 8002648:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8002668 <StartUltrasonicTask+0x30>
 800264c:	f7ff f95c 	bl	8001908 <moveCarStraight>
			k++;
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <StartUltrasonicTask+0x38>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	4a06      	ldr	r2, [pc, #24]	; (8002670 <StartUltrasonicTask+0x38>)
 8002658:	6013      	str	r3, [r2, #0]
//			stopped = 1;
//			moveCarStop();
//			vTaskSuspend(ultrasonicTaskHandle);
//		}

		osDelay(100);
 800265a:	2064      	movs	r0, #100	; 0x64
 800265c:	f005 fc5c 	bl	8007f18 <osDelay>
		if(k==1){
 8002660:	e7ee      	b.n	8002640 <StartUltrasonicTask+0x8>
 8002662:	bf00      	nop
 8002664:	f3af 8000 	nop.w
 8002668:	00000000 	.word	0x00000000
 800266c:	408f4000 	.word	0x408f4000
 8002670:	20000310 	.word	0x20000310

08002674 <StartCommunicateTask>:
 * @brief Function implementing the communicateTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommunicateTask */
void StartCommunicateTask(void *argument) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCommunicateTask */
	char ack = 'A';
 800267c:	2341      	movs	r3, #65	; 0x41
 800267e:	73fb      	strb	r3, [r7, #15]

	aRxBuffer[0] = 'E';
 8002680:	4b7e      	ldr	r3, [pc, #504]	; (800287c <StartCommunicateTask+0x208>)
 8002682:	2245      	movs	r2, #69	; 0x45
 8002684:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1] = 'M';
 8002686:	4b7d      	ldr	r3, [pc, #500]	; (800287c <StartCommunicateTask+0x208>)
 8002688:	224d      	movs	r2, #77	; 0x4d
 800268a:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2] = 'P';
 800268c:	4b7b      	ldr	r3, [pc, #492]	; (800287c <StartCommunicateTask+0x208>)
 800268e:	2250      	movs	r2, #80	; 0x50
 8002690:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3] = 'T';
 8002692:	4b7a      	ldr	r3, [pc, #488]	; (800287c <StartCommunicateTask+0x208>)
 8002694:	2254      	movs	r2, #84	; 0x54
 8002696:	70da      	strb	r2, [r3, #3]
	aRxBuffer[4] = 'Y';
 8002698:	4b78      	ldr	r3, [pc, #480]	; (800287c <StartCommunicateTask+0x208>)
 800269a:	2259      	movs	r2, #89	; 0x59
 800269c:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for (;;) {
		magnitude = 0;
 800269e:	4b78      	ldr	r3, [pc, #480]	; (8002880 <StartCommunicateTask+0x20c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
		if ((aRxBuffer[0] == 'G' && aRxBuffer[1] == 'Y' && aRxBuffer[2] == 'R'
 80026a4:	4b75      	ldr	r3, [pc, #468]	; (800287c <StartCommunicateTask+0x208>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b47      	cmp	r3, #71	; 0x47
 80026aa:	d10f      	bne.n	80026cc <StartCommunicateTask+0x58>
 80026ac:	4b73      	ldr	r3, [pc, #460]	; (800287c <StartCommunicateTask+0x208>)
 80026ae:	785b      	ldrb	r3, [r3, #1]
 80026b0:	2b59      	cmp	r3, #89	; 0x59
 80026b2:	d10b      	bne.n	80026cc <StartCommunicateTask+0x58>
 80026b4:	4b71      	ldr	r3, [pc, #452]	; (800287c <StartCommunicateTask+0x208>)
 80026b6:	789b      	ldrb	r3, [r3, #2]
 80026b8:	2b52      	cmp	r3, #82	; 0x52
 80026ba:	d107      	bne.n	80026cc <StartCommunicateTask+0x58>
				&& aRxBuffer[3] == 'O' && aRxBuffer[4] == 'R')
 80026bc:	4b6f      	ldr	r3, [pc, #444]	; (800287c <StartCommunicateTask+0x208>)
 80026be:	78db      	ldrb	r3, [r3, #3]
 80026c0:	2b4f      	cmp	r3, #79	; 0x4f
 80026c2:	d103      	bne.n	80026cc <StartCommunicateTask+0x58>
 80026c4:	4b6d      	ldr	r3, [pc, #436]	; (800287c <StartCommunicateTask+0x208>)
 80026c6:	791b      	ldrb	r3, [r3, #4]
 80026c8:	2b52      	cmp	r3, #82	; 0x52
 80026ca:	d015      	beq.n	80026f8 <StartCommunicateTask+0x84>
				|| (aRxBuffer[0] == 'S' || aRxBuffer[0] == 'R'
 80026cc:	4b6b      	ldr	r3, [pc, #428]	; (800287c <StartCommunicateTask+0x208>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b53      	cmp	r3, #83	; 0x53
 80026d2:	d008      	beq.n	80026e6 <StartCommunicateTask+0x72>
 80026d4:	4b69      	ldr	r3, [pc, #420]	; (800287c <StartCommunicateTask+0x208>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b52      	cmp	r3, #82	; 0x52
 80026da:	d004      	beq.n	80026e6 <StartCommunicateTask+0x72>
						|| aRxBuffer[0] == 'L')
 80026dc:	4b67      	ldr	r3, [pc, #412]	; (800287c <StartCommunicateTask+0x208>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b4c      	cmp	r3, #76	; 0x4c
 80026e2:	f040 80b4 	bne.w	800284e <StartCommunicateTask+0x1da>
						&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 80026e6:	4b65      	ldr	r3, [pc, #404]	; (800287c <StartCommunicateTask+0x208>)
 80026e8:	785b      	ldrb	r3, [r3, #1]
						&& (0 <= aRxBuffer[2] - '0' <= 9)
						&& (0 <= aRxBuffer[3] - '0' <= 9)
						&& (0 <= aRxBuffer[4] - '0' <= 9)) {
 80026ea:	2b46      	cmp	r3, #70	; 0x46
 80026ec:	d004      	beq.n	80026f8 <StartCommunicateTask+0x84>
						&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <StartCommunicateTask+0x208>)
 80026f0:	785b      	ldrb	r3, [r3, #1]
 80026f2:	2b42      	cmp	r3, #66	; 0x42
 80026f4:	f040 80ab 	bne.w	800284e <StartCommunicateTask+0x1da>

			magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 80026f8:	4b60      	ldr	r3, [pc, #384]	; (800287c <StartCommunicateTask+0x208>)
 80026fa:	789b      	ldrb	r3, [r3, #2]
 80026fc:	3b30      	subs	r3, #48	; 0x30
 80026fe:	2264      	movs	r2, #100	; 0x64
 8002700:	fb02 f103 	mul.w	r1, r2, r3
					+ ((int) (aRxBuffer[3]) - 48) * 10
 8002704:	4b5d      	ldr	r3, [pc, #372]	; (800287c <StartCommunicateTask+0x208>)
 8002706:	78db      	ldrb	r3, [r3, #3]
 8002708:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	18ca      	adds	r2, r1, r3
					+ ((int) (aRxBuffer[4]) - 48);
 8002716:	4b59      	ldr	r3, [pc, #356]	; (800287c <StartCommunicateTask+0x208>)
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	3b30      	subs	r3, #48	; 0x30
 800271c:	4413      	add	r3, r2
			magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 800271e:	4a58      	ldr	r2, [pc, #352]	; (8002880 <StartCommunicateTask+0x20c>)
 8002720:	6013      	str	r3, [r2, #0]

			if (aRxBuffer[1] == 'B') {
 8002722:	4b56      	ldr	r3, [pc, #344]	; (800287c <StartCommunicateTask+0x208>)
 8002724:	785b      	ldrb	r3, [r3, #1]
 8002726:	2b42      	cmp	r3, #66	; 0x42
 8002728:	d104      	bne.n	8002734 <StartCommunicateTask+0xc0>
				magnitude *= -1;
 800272a:	4b55      	ldr	r3, [pc, #340]	; (8002880 <StartCommunicateTask+0x20c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	425b      	negs	r3, r3
 8002730:	4a53      	ldr	r2, [pc, #332]	; (8002880 <StartCommunicateTask+0x20c>)
 8002732:	6013      	str	r3, [r2, #0]
			}

			osDelay(300);
 8002734:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002738:	f005 fbee 	bl	8007f18 <osDelay>
			switch (aRxBuffer[0]) {
 800273c:	4b4f      	ldr	r3, [pc, #316]	; (800287c <StartCommunicateTask+0x208>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	3b47      	subs	r3, #71	; 0x47
 8002742:	2b0c      	cmp	r3, #12
 8002744:	f200 8083 	bhi.w	800284e <StartCommunicateTask+0x1da>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <StartCommunicateTask+0xdc>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	0800284b 	.word	0x0800284b
 8002754:	0800284f 	.word	0x0800284f
 8002758:	0800284f 	.word	0x0800284f
 800275c:	0800284f 	.word	0x0800284f
 8002760:	0800284f 	.word	0x0800284f
 8002764:	08002809 	.word	0x08002809
 8002768:	0800284f 	.word	0x0800284f
 800276c:	0800284f 	.word	0x0800284f
 8002770:	0800284f 	.word	0x0800284f
 8002774:	0800284f 	.word	0x0800284f
 8002778:	0800284f 	.word	0x0800284f
 800277c:	080027c7 	.word	0x080027c7
 8002780:	08002785 	.word	0x08002785
			case 'S':
				moveCarStraight(magnitude);
 8002784:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <StartCommunicateTask+0x20c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fec3 	bl	8000514 <__aeabi_i2d>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	ec43 2b10 	vmov	d0, r2, r3
 8002796:	f7ff f8b7 	bl	8001908 <moveCarStraight>
				flagDone = 1;
 800279a:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <StartCommunicateTask+0x210>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <StartCommunicateTask+0x208>)
 80027a2:	2244      	movs	r2, #68	; 0x44
 80027a4:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 80027a6:	4b35      	ldr	r3, [pc, #212]	; (800287c <StartCommunicateTask+0x208>)
 80027a8:	224f      	movs	r2, #79	; 0x4f
 80027aa:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 80027ac:	4b33      	ldr	r3, [pc, #204]	; (800287c <StartCommunicateTask+0x208>)
 80027ae:	224e      	movs	r2, #78	; 0x4e
 80027b0:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 80027b2:	4b32      	ldr	r3, [pc, #200]	; (800287c <StartCommunicateTask+0x208>)
 80027b4:	2245      	movs	r2, #69	; 0x45
 80027b6:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 80027b8:	4b30      	ldr	r3, [pc, #192]	; (800287c <StartCommunicateTask+0x208>)
 80027ba:	2221      	movs	r2, #33	; 0x21
 80027bc:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 80027be:	2064      	movs	r0, #100	; 0x64
 80027c0:	f005 fbaa 	bl	8007f18 <osDelay>
				break;
 80027c4:	e043      	b.n	800284e <StartCommunicateTask+0x1da>
			case 'R':
				moveCarRight(magnitude);
 80027c6:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <StartCommunicateTask+0x20c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fea2 	bl	8000514 <__aeabi_i2d>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	ec43 2b10 	vmov	d0, r2, r3
 80027d8:	f7ff f902 	bl	80019e0 <moveCarRight>
				flagDone = 1;
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <StartCommunicateTask+0x210>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <StartCommunicateTask+0x208>)
 80027e4:	2244      	movs	r2, #68	; 0x44
 80027e6:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 80027e8:	4b24      	ldr	r3, [pc, #144]	; (800287c <StartCommunicateTask+0x208>)
 80027ea:	224f      	movs	r2, #79	; 0x4f
 80027ec:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 80027ee:	4b23      	ldr	r3, [pc, #140]	; (800287c <StartCommunicateTask+0x208>)
 80027f0:	224e      	movs	r2, #78	; 0x4e
 80027f2:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <StartCommunicateTask+0x208>)
 80027f6:	2245      	movs	r2, #69	; 0x45
 80027f8:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <StartCommunicateTask+0x208>)
 80027fc:	2221      	movs	r2, #33	; 0x21
 80027fe:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002800:	2064      	movs	r0, #100	; 0x64
 8002802:	f005 fb89 	bl	8007f18 <osDelay>
				break;
 8002806:	e022      	b.n	800284e <StartCommunicateTask+0x1da>
			case 'L':
				moveCarLeft(magnitude);
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <StartCommunicateTask+0x20c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fe81 	bl	8000514 <__aeabi_i2d>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	ec43 2b10 	vmov	d0, r2, r3
 800281a:	f7ff f913 	bl	8001a44 <moveCarLeft>
				flagDone = 1;
 800281e:	4b19      	ldr	r3, [pc, #100]	; (8002884 <StartCommunicateTask+0x210>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <StartCommunicateTask+0x208>)
 8002826:	2244      	movs	r2, #68	; 0x44
 8002828:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <StartCommunicateTask+0x208>)
 800282c:	224f      	movs	r2, #79	; 0x4f
 800282e:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <StartCommunicateTask+0x208>)
 8002832:	224e      	movs	r2, #78	; 0x4e
 8002834:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <StartCommunicateTask+0x208>)
 8002838:	2245      	movs	r2, #69	; 0x45
 800283a:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <StartCommunicateTask+0x208>)
 800283e:	2221      	movs	r2, #33	; 0x21
 8002840:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002842:	2064      	movs	r0, #100	; 0x64
 8002844:	f005 fb68 	bl	8007f18 <osDelay>
				break;
 8002848:	e001      	b.n	800284e <StartCommunicateTask+0x1da>
			case 'G':
				NVIC_SystemReset();
 800284a:	f7fe fb2d 	bl	8000ea8 <__NVIC_SystemReset>
				break;
			}
		}


		if (flagDone == 1) {
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <StartCommunicateTask+0x210>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10e      	bne.n	8002874 <StartCommunicateTask+0x200>
			osDelay(300);
 8002856:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800285a:	f005 fb5d 	bl	8007f18 <osDelay>
			HAL_UART_Transmit(&huart3, (uint8_t*) &ack, 1, 0xFFFF);
 800285e:	f107 010f 	add.w	r1, r7, #15
 8002862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002866:	2201      	movs	r2, #1
 8002868:	4807      	ldr	r0, [pc, #28]	; (8002888 <StartCommunicateTask+0x214>)
 800286a:	f004 fa1a 	bl	8006ca2 <HAL_UART_Transmit>
			flagDone = 0;
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <StartCommunicateTask+0x210>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
		}

		osDelay(100);
 8002874:	2064      	movs	r0, #100	; 0x64
 8002876:	f005 fb4f 	bl	8007f18 <osDelay>
		magnitude = 0;
 800287a:	e710      	b.n	800269e <StartCommunicateTask+0x2a>
 800287c:	200002a4 	.word	0x200002a4
 8002880:	200002b0 	.word	0x200002b0
 8002884:	200002ac 	.word	0x200002ac
 8002888:	20000240 	.word	0x20000240

0800288c <StartEncoderRTask>:
 * @brief Function implementing the encoderRTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderRTask */
void StartEncoderRTask(void *argument) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderRTask */
	/* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002894:	213c      	movs	r1, #60	; 0x3c
 8002896:	481d      	ldr	r0, [pc, #116]	; (800290c <StartEncoderRTask+0x80>)
 8002898:	f003 f871 	bl	800597e <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 800289c:	2301      	movs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 80028a0:	f000 fe4e 	bl	8003540 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 80028a6:	f000 fe4b 	bl	8003540 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b0a      	cmp	r3, #10
 80028b2:	d9f8      	bls.n	80028a6 <StartEncoderRTask+0x1a>
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <StartEncoderRTask+0x80>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	60bb      	str	r3, [r7, #8]
			if (cnt1 > 32000) {
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80028c2:	dd06      	ble.n	80028d2 <StartEncoderRTask+0x46>
				dirR = 1;
 80028c4:	2301      	movs	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	e004      	b.n	80028dc <StartEncoderRTask+0x50>
			} else {
				dirR = -1;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	613b      	str	r3, [r7, #16]
			}

			if (dirR == 1) {
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d106      	bne.n	80028f0 <StartEncoderRTask+0x64>
				rightEncoderVal -= diff;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <StartEncoderRTask+0x84>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <StartEncoderRTask+0x84>)
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e005      	b.n	80028fc <StartEncoderRTask+0x70>
			} else {
				rightEncoderVal += diff;
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <StartEncoderRTask+0x84>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	4a05      	ldr	r2, [pc, #20]	; (8002910 <StartEncoderRTask+0x84>)
 80028fa:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <StartEncoderRTask+0x80>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2200      	movs	r2, #0
 8002902:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8002904:	f000 fe1c 	bl	8003540 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 800290a:	e7cc      	b.n	80028a6 <StartEncoderRTask+0x1a>
 800290c:	20000168 	.word	0x20000168
 8002910:	200002c0 	.word	0x200002c0

08002914 <StartEncoderLTask>:
 * @brief Function implementing the encoderLTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderLTask */
void StartEncoderLTask(void *argument) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderLTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800291c:	213c      	movs	r1, #60	; 0x3c
 800291e:	481d      	ldr	r0, [pc, #116]	; (8002994 <StartEncoderLTask+0x80>)
 8002920:	f003 f82d 	bl	800597e <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8002924:	2301      	movs	r3, #1
 8002926:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002928:	f000 fe0a 	bl	8003540 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 800292e:	f000 fe07 	bl	8003540 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b0a      	cmp	r3, #10
 800293a:	d9f8      	bls.n	800292e <StartEncoderLTask+0x1a>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 800293c:	4b15      	ldr	r3, [pc, #84]	; (8002994 <StartEncoderLTask+0x80>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	60bb      	str	r3, [r7, #8]

			if (cnt2 > 32000) {
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800294a:	dd06      	ble.n	800295a <StartEncoderLTask+0x46>
				dirL = 1;
 800294c:	2301      	movs	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	e004      	b.n	8002964 <StartEncoderLTask+0x50>
			} else {
				dirL = -1;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d106      	bne.n	8002978 <StartEncoderLTask+0x64>
				leftEncoderVal += diff;
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <StartEncoderLTask+0x84>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <StartEncoderLTask+0x84>)
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e005      	b.n	8002984 <StartEncoderLTask+0x70>
			} else {
				leftEncoderVal -= diff;
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <StartEncoderLTask+0x84>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	4a05      	ldr	r2, [pc, #20]	; (8002998 <StartEncoderLTask+0x84>)
 8002982:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <StartEncoderLTask+0x80>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 800298c:	f000 fdd8 	bl	8003540 <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 8002992:	e7cc      	b.n	800292e <StartEncoderLTask+0x1a>
 8002994:	20000120 	.word	0x20000120
 8002998:	200002c4 	.word	0x200002c4

0800299c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029a0:	b672      	cpsid	i
}
 80029a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029a4:	e7fe      	b.n	80029a4 <Error_Handler+0x8>
	...

080029a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <HAL_MspInit+0x64>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <HAL_MspInit+0x64>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_MspInit+0x64>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_MspInit+0x64>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_MspInit+0x64>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_MspInit+0x64>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	210f      	movs	r1, #15
 80029ea:	f06f 0001 	mvn.w	r0, #1
 80029ee:	f000 feb2 	bl	8003756 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2105      	movs	r1, #5
 80029f6:	2005      	movs	r0, #5
 80029f8:	f000 fead 	bl	8003756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80029fc:	2005      	movs	r0, #5
 80029fe:	f000 fec6 	bl	800378e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_I2C_MspInit+0x84>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d12c      	bne.n	8002a8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a54:	2312      	movs	r3, #18
 8002a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a60:	2304      	movs	r3, #4
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	480c      	ldr	r0, [pc, #48]	; (8002a9c <HAL_I2C_MspInit+0x8c>)
 8002a6c:	f000 ff3c 	bl	80038e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_I2C_MspInit+0x88>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a8c:	bf00      	nop
 8002a8e:	3728      	adds	r7, #40	; 0x28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40005400 	.word	0x40005400
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020400 	.word	0x40020400

08002aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2f      	ldr	r2, [pc, #188]	; (8002b7c <HAL_TIM_Base_MspInit+0xdc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d11e      	bne.n	8002b00 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	4b2e      	ldr	r3, [pc, #184]	; (8002b80 <HAL_TIM_Base_MspInit+0xe0>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a2d      	ldr	r2, [pc, #180]	; (8002b80 <HAL_TIM_Base_MspInit+0xe0>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_TIM_Base_MspInit+0xe0>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2105      	movs	r1, #5
 8002ae2:	2018      	movs	r0, #24
 8002ae4:	f000 fe37 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002ae8:	2018      	movs	r0, #24
 8002aea:	f000 fe50 	bl	800378e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2105      	movs	r1, #5
 8002af2:	2019      	movs	r0, #25
 8002af4:	f000 fe2f 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002af8:	2019      	movs	r0, #25
 8002afa:	f000 fe48 	bl	800378e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002afe:	e038      	b.n	8002b72 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_TIM_Base_MspInit+0xe4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d133      	bne.n	8002b72 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_TIM_Base_MspInit+0xe0>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_TIM_Base_MspInit+0xe0>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_TIM_Base_MspInit+0xe0>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_TIM_Base_MspInit+0xe0>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <HAL_TIM_Base_MspInit+0xe0>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_TIM_Base_MspInit+0xe0>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002b42:	23c0      	movs	r3, #192	; 0xc0
 8002b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b52:	2303      	movs	r3, #3
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	480a      	ldr	r0, [pc, #40]	; (8002b88 <HAL_TIM_Base_MspInit+0xe8>)
 8002b5e:	f000 fec3 	bl	80038e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2105      	movs	r1, #5
 8002b66:	202d      	movs	r0, #45	; 0x2d
 8002b68:	f000 fdf5 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002b6c:	202d      	movs	r0, #45	; 0x2d
 8002b6e:	f000 fe0e 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 8002b72:	bf00      	nop
 8002b74:	3728      	adds	r7, #40	; 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40010400 	.word	0x40010400
 8002b88:	40020800 	.word	0x40020800

08002b8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08c      	sub	sp, #48	; 0x30
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d14b      	bne.n	8002c46 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a3e      	ldr	r2, [pc, #248]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a37      	ldr	r2, [pc, #220]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a30      	ldr	r2, [pc, #192]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8002c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c14:	2301      	movs	r3, #1
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8002c18:	f107 031c 	add.w	r3, r7, #28
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4825      	ldr	r0, [pc, #148]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002c20:	f000 fe62 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8002c24:	2308      	movs	r3, #8
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c34:	2301      	movs	r3, #1
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8002c38:	f107 031c 	add.w	r3, r7, #28
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	481e      	ldr	r0, [pc, #120]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c40:	f000 fe52 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c44:	e030      	b.n	8002ca8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <HAL_TIM_Encoder_MspInit+0x130>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d12b      	bne.n	8002ca8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	4a15      	ldr	r2, [pc, #84]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8002c88:	23c0      	movs	r3, #192	; 0xc0
 8002c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9c:	f107 031c 	add.w	r3, r7, #28
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4804      	ldr	r0, [pc, #16]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002ca4:	f000 fe20 	bl	80038e8 <HAL_GPIO_Init>
}
 8002ca8:	bf00      	nop
 8002caa:	3730      	adds	r7, #48	; 0x30
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40000400 	.word	0x40000400

08002cc0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_TIM_IC_MspInit+0x94>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d134      	bne.n	8002d4c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <HAL_TIM_IC_MspInit+0x98>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_TIM_IC_MspInit+0x98>)
 8002cec:	f043 0304 	orr.w	r3, r3, #4
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_TIM_IC_MspInit+0x98>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_TIM_IC_MspInit+0x98>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_TIM_IC_MspInit+0x98>)
 8002d08:	f043 0308 	orr.w	r3, r3, #8
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_TIM_IC_MspInit+0x98>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8002d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	4809      	ldr	r0, [pc, #36]	; (8002d5c <HAL_TIM_IC_MspInit+0x9c>)
 8002d38:	f000 fdd6 	bl	80038e8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2105      	movs	r1, #5
 8002d40:	201e      	movs	r0, #30
 8002d42:	f000 fd08 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d46:	201e      	movs	r0, #30
 8002d48:	f000 fd21 	bl	800378e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020c00 	.word	0x40020c00

08002d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <HAL_TIM_MspPostInit+0x68>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d11e      	bne.n	8002dc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_TIM_MspPostInit+0x6c>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <HAL_TIM_MspPostInit+0x6c>)
 8002d8c:	f043 0310 	orr.w	r3, r3, #16
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_TIM_MspPostInit+0x6c>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002da2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002db0:	2301      	movs	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	4619      	mov	r1, r3
 8002dba:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <HAL_TIM_MspPostInit+0x70>)
 8002dbc:	f000 fd94 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002dc0:	bf00      	nop
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_UART_MspInit+0x94>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d134      	bne.n	8002e60 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <HAL_UART_MspInit+0x98>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_UART_MspInit+0x98>)
 8002e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_UART_MspInit+0x98>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_UART_MspInit+0x98>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a14      	ldr	r2, [pc, #80]	; (8002e6c <HAL_UART_MspInit+0x98>)
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_UART_MspInit+0x98>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e40:	2307      	movs	r3, #7
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4809      	ldr	r0, [pc, #36]	; (8002e70 <HAL_UART_MspInit+0x9c>)
 8002e4c:	f000 fd4c 	bl	80038e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	2105      	movs	r1, #5
 8002e54:	2027      	movs	r0, #39	; 0x27
 8002e56:	f000 fc7e 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e5a:	2027      	movs	r0, #39	; 0x27
 8002e5c:	f000 fc97 	bl	800378e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e60:	bf00      	nop
 8002e62:	3728      	adds	r7, #40	; 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40004800 	.word	0x40004800
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020800 	.word	0x40020800

08002e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e78:	e7fe      	b.n	8002e78 <NMI_Handler+0x4>

08002e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7e:	e7fe      	b.n	8002e7e <HardFault_Handler+0x4>

08002e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <MemManage_Handler+0x4>

08002e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <BusFault_Handler+0x4>

08002e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <UsageFault_Handler+0x4>

08002e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea4:	f000 fb38 	bl	8003518 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002ea8:	f006 fc6e 	bl	8009788 <xTaskGetSchedulerState>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d001      	beq.n	8002eb6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002eb2:	f007 fa59 	bl	800a368 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002ece:	f002 fde4 	bl	8005a9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200000d8 	.word	0x200000d8

08002edc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ee2:	f002 fdda 	bl	8005a9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200000d8 	.word	0x200000d8

08002ef0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <TIM4_IRQHandler+0x10>)
 8002ef6:	f002 fdd0 	bl	8005a9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200001b0 	.word	0x200001b0

08002f04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f08:	4802      	ldr	r0, [pc, #8]	; (8002f14 <USART3_IRQHandler+0x10>)
 8002f0a:	f003 ff8d 	bl	8006e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000240 	.word	0x20000240

08002f18 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002f1c:	4802      	ldr	r0, [pc, #8]	; (8002f28 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002f1e:	f002 fdbc 	bl	8005a9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200001f8 	.word	0x200001f8

08002f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f34:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <_sbrk+0x5c>)
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <_sbrk+0x60>)
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <_sbrk+0x64>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <_sbrk+0x64>)
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <_sbrk+0x68>)
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <_sbrk+0x64>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d207      	bcs.n	8002f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f5c:	f007 fcfc 	bl	800a958 <__errno>
 8002f60:	4603      	mov	r3, r0
 8002f62:	220c      	movs	r2, #12
 8002f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	e009      	b.n	8002f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <_sbrk+0x64>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <_sbrk+0x64>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <_sbrk+0x64>)
 8002f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20020000 	.word	0x20020000
 8002f8c:	00000400 	.word	0x00000400
 8002f90:	20000314 	.word	0x20000314
 8002f94:	20005250 	.word	0x20005250

08002f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <SystemInit+0x20>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <SystemInit+0x20>)
 8002fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fc0:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fc2:	490e      	ldr	r1, [pc, #56]	; (8002ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fc4:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc8:	e002      	b.n	8002fd0 <LoopCopyDataInit>

08002fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fce:	3304      	adds	r3, #4

08002fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd4:	d3f9      	bcc.n	8002fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fd6:	4a0b      	ldr	r2, [pc, #44]	; (8003004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fd8:	4c0b      	ldr	r4, [pc, #44]	; (8003008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fdc:	e001      	b.n	8002fe2 <LoopFillZerobss>

08002fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe0:	3204      	adds	r2, #4

08002fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe4:	d3fb      	bcc.n	8002fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fe6:	f7ff ffd7 	bl	8002f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fea:	f007 fcbb 	bl	800a964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fee:	f7fd ff71 	bl	8000ed4 <main>
  bx  lr    
 8002ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ffc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8003000:	0800bf10 	.word	0x0800bf10
  ldr r2, =_sbss
 8003004:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003008:	2000524c 	.word	0x2000524c

0800300c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800300c:	e7fe      	b.n	800300c <ADC_IRQHandler>
	...

08003010 <OLED_Refresh_Gram>:

#include "../../PeripheralDrivers/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8003016:	2300      	movs	r3, #0
 8003018:	71fb      	strb	r3, [r7, #7]
 800301a:	e026      	b.n	800306a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	3b50      	subs	r3, #80	; 0x50
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f82b 	bl	8003080 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800302a:	2100      	movs	r1, #0
 800302c:	2000      	movs	r0, #0
 800302e:	f000 f827 	bl	8003080 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8003032:	2100      	movs	r1, #0
 8003034:	2010      	movs	r0, #16
 8003036:	f000 f823 	bl	8003080 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800303a:	2300      	movs	r3, #0
 800303c:	71bb      	strb	r3, [r7, #6]
 800303e:	e00d      	b.n	800305c <OLED_Refresh_Gram+0x4c>
 8003040:	79ba      	ldrb	r2, [r7, #6]
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	490d      	ldr	r1, [pc, #52]	; (800307c <OLED_Refresh_Gram+0x6c>)
 8003046:	00d2      	lsls	r2, r2, #3
 8003048:	440a      	add	r2, r1
 800304a:	4413      	add	r3, r2
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f815 	bl	8003080 <OLED_WR_Byte>
 8003056:	79bb      	ldrb	r3, [r7, #6]
 8003058:	3301      	adds	r3, #1
 800305a:	71bb      	strb	r3, [r7, #6]
 800305c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003060:	2b00      	cmp	r3, #0
 8003062:	daed      	bge.n	8003040 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	3301      	adds	r3, #1
 8003068:	71fb      	strb	r3, [r7, #7]
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b07      	cmp	r3, #7
 800306e:	d9d5      	bls.n	800301c <OLED_Refresh_Gram+0xc>
	}   
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000318 	.word	0x20000318

08003080 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	460a      	mov	r2, r1
 800308a:	71fb      	strb	r3, [r7, #7]
 800308c:	4613      	mov	r3, r2
 800308e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003090:	79bb      	ldrb	r3, [r7, #6]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8003096:	2201      	movs	r2, #1
 8003098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800309c:	481c      	ldr	r0, [pc, #112]	; (8003110 <OLED_WR_Byte+0x90>)
 800309e:	f000 fdbf 	bl	8003c20 <HAL_GPIO_WritePin>
 80030a2:	e005      	b.n	80030b0 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80030a4:	2200      	movs	r2, #0
 80030a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030aa:	4819      	ldr	r0, [pc, #100]	; (8003110 <OLED_WR_Byte+0x90>)
 80030ac:	f000 fdb8 	bl	8003c20 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e01e      	b.n	80030f4 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80030b6:	2200      	movs	r2, #0
 80030b8:	2120      	movs	r1, #32
 80030ba:	4815      	ldr	r0, [pc, #84]	; (8003110 <OLED_WR_Byte+0x90>)
 80030bc:	f000 fdb0 	bl	8003c20 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	da05      	bge.n	80030d4 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80030c8:	2201      	movs	r2, #1
 80030ca:	2140      	movs	r1, #64	; 0x40
 80030cc:	4810      	ldr	r0, [pc, #64]	; (8003110 <OLED_WR_Byte+0x90>)
 80030ce:	f000 fda7 	bl	8003c20 <HAL_GPIO_WritePin>
 80030d2:	e004      	b.n	80030de <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80030d4:	2200      	movs	r2, #0
 80030d6:	2140      	movs	r1, #64	; 0x40
 80030d8:	480d      	ldr	r0, [pc, #52]	; (8003110 <OLED_WR_Byte+0x90>)
 80030da:	f000 fda1 	bl	8003c20 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80030de:	2201      	movs	r2, #1
 80030e0:	2120      	movs	r1, #32
 80030e2:	480b      	ldr	r0, [pc, #44]	; (8003110 <OLED_WR_Byte+0x90>)
 80030e4:	f000 fd9c 	bl	8003c20 <HAL_GPIO_WritePin>
		dat<<=1;   
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	3301      	adds	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	2b07      	cmp	r3, #7
 80030f8:	d9dd      	bls.n	80030b6 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80030fa:	2201      	movs	r2, #1
 80030fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <OLED_WR_Byte+0x90>)
 8003102:	f000 fd8d 	bl	8003c20 <HAL_GPIO_WritePin>
} 
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000

08003114 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800311a:	2300      	movs	r3, #0
 800311c:	71fb      	strb	r3, [r7, #7]
 800311e:	e014      	b.n	800314a <OLED_Clear+0x36>
 8003120:	2300      	movs	r3, #0
 8003122:	71bb      	strb	r3, [r7, #6]
 8003124:	e00a      	b.n	800313c <OLED_Clear+0x28>
 8003126:	79ba      	ldrb	r2, [r7, #6]
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	490c      	ldr	r1, [pc, #48]	; (800315c <OLED_Clear+0x48>)
 800312c:	00d2      	lsls	r2, r2, #3
 800312e:	440a      	add	r2, r1
 8003130:	4413      	add	r3, r2
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	79bb      	ldrb	r3, [r7, #6]
 8003138:	3301      	adds	r3, #1
 800313a:	71bb      	strb	r3, [r7, #6]
 800313c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003140:	2b00      	cmp	r3, #0
 8003142:	daf0      	bge.n	8003126 <OLED_Clear+0x12>
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	3301      	adds	r3, #1
 8003148:	71fb      	strb	r3, [r7, #7]
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	2b07      	cmp	r3, #7
 800314e:	d9e7      	bls.n	8003120 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003150:	f7ff ff5e 	bl	8003010 <OLED_Refresh_Gram>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000318 	.word	0x20000318

08003160 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
 800316a:	460b      	mov	r3, r1
 800316c:	71bb      	strb	r3, [r7, #6]
 800316e:	4613      	mov	r3, r2
 8003170:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db41      	blt.n	8003202 <OLED_DrawPoint+0xa2>
 800317e:	79bb      	ldrb	r3, [r7, #6]
 8003180:	2b3f      	cmp	r3, #63	; 0x3f
 8003182:	d83e      	bhi.n	8003202 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003184:	79bb      	ldrb	r3, [r7, #6]
 8003186:	08db      	lsrs	r3, r3, #3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f1c3 0307 	rsb	r3, r3, #7
 800318e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003190:	79bb      	ldrb	r3, [r7, #6]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003198:	7b7b      	ldrb	r3, [r7, #13]
 800319a:	f1c3 0307 	rsb	r3, r3, #7
 800319e:	2201      	movs	r2, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80031a6:	797b      	ldrb	r3, [r7, #5]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <OLED_DrawPoint+0x72>
 80031ac:	79fa      	ldrb	r2, [r7, #7]
 80031ae:	7bbb      	ldrb	r3, [r7, #14]
 80031b0:	4917      	ldr	r1, [pc, #92]	; (8003210 <OLED_DrawPoint+0xb0>)
 80031b2:	00d2      	lsls	r2, r2, #3
 80031b4:	440a      	add	r2, r1
 80031b6:	4413      	add	r3, r2
 80031b8:	7818      	ldrb	r0, [r3, #0]
 80031ba:	79fa      	ldrb	r2, [r7, #7]
 80031bc:	7bbb      	ldrb	r3, [r7, #14]
 80031be:	7bf9      	ldrb	r1, [r7, #15]
 80031c0:	4301      	orrs	r1, r0
 80031c2:	b2c8      	uxtb	r0, r1
 80031c4:	4912      	ldr	r1, [pc, #72]	; (8003210 <OLED_DrawPoint+0xb0>)
 80031c6:	00d2      	lsls	r2, r2, #3
 80031c8:	440a      	add	r2, r1
 80031ca:	4413      	add	r3, r2
 80031cc:	4602      	mov	r2, r0
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e018      	b.n	8003204 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80031d2:	79fa      	ldrb	r2, [r7, #7]
 80031d4:	7bbb      	ldrb	r3, [r7, #14]
 80031d6:	490e      	ldr	r1, [pc, #56]	; (8003210 <OLED_DrawPoint+0xb0>)
 80031d8:	00d2      	lsls	r2, r2, #3
 80031da:	440a      	add	r2, r1
 80031dc:	4413      	add	r3, r2
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b25a      	sxtb	r2, r3
 80031e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	b25b      	sxtb	r3, r3
 80031ea:	4013      	ands	r3, r2
 80031ec:	b259      	sxtb	r1, r3
 80031ee:	79fa      	ldrb	r2, [r7, #7]
 80031f0:	7bbb      	ldrb	r3, [r7, #14]
 80031f2:	b2c8      	uxtb	r0, r1
 80031f4:	4906      	ldr	r1, [pc, #24]	; (8003210 <OLED_DrawPoint+0xb0>)
 80031f6:	00d2      	lsls	r2, r2, #3
 80031f8:	440a      	add	r2, r1
 80031fa:	4413      	add	r3, r2
 80031fc:	4602      	mov	r2, r0
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e000      	b.n	8003204 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003202:	bf00      	nop
}
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000318 	.word	0x20000318

08003214 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	4604      	mov	r4, r0
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4623      	mov	r3, r4
 8003224:	71fb      	strb	r3, [r7, #7]
 8003226:	4603      	mov	r3, r0
 8003228:	71bb      	strb	r3, [r7, #6]
 800322a:	460b      	mov	r3, r1
 800322c:	717b      	strb	r3, [r7, #5]
 800322e:	4613      	mov	r3, r2
 8003230:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003232:	79bb      	ldrb	r3, [r7, #6]
 8003234:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8003236:	797b      	ldrb	r3, [r7, #5]
 8003238:	3b20      	subs	r3, #32
 800323a:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800323c:	2300      	movs	r3, #0
 800323e:	73bb      	strb	r3, [r7, #14]
 8003240:	e04d      	b.n	80032de <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8003242:	793b      	ldrb	r3, [r7, #4]
 8003244:	2b0c      	cmp	r3, #12
 8003246:	d10b      	bne.n	8003260 <OLED_ShowChar+0x4c>
 8003248:	797a      	ldrb	r2, [r7, #5]
 800324a:	7bb9      	ldrb	r1, [r7, #14]
 800324c:	4828      	ldr	r0, [pc, #160]	; (80032f0 <OLED_ShowChar+0xdc>)
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4403      	add	r3, r0
 8003258:	440b      	add	r3, r1
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	e007      	b.n	8003270 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003260:	797a      	ldrb	r2, [r7, #5]
 8003262:	7bbb      	ldrb	r3, [r7, #14]
 8003264:	4923      	ldr	r1, [pc, #140]	; (80032f4 <OLED_ShowChar+0xe0>)
 8003266:	0112      	lsls	r2, r2, #4
 8003268:	440a      	add	r2, r1
 800326a:	4413      	add	r3, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003270:	2300      	movs	r3, #0
 8003272:	737b      	strb	r3, [r7, #13]
 8003274:	e02d      	b.n	80032d2 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	da07      	bge.n	800328e <OLED_ShowChar+0x7a>
 800327e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003282:	79b9      	ldrb	r1, [r7, #6]
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff6a 	bl	8003160 <OLED_DrawPoint>
 800328c:	e00c      	b.n	80032a8 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800328e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	79b9      	ldrb	r1, [r7, #6]
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ff5c 	bl	8003160 <OLED_DrawPoint>
			temp<<=1;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
			y++;
 80032ae:	79bb      	ldrb	r3, [r7, #6]
 80032b0:	3301      	adds	r3, #1
 80032b2:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80032b4:	79ba      	ldrb	r2, [r7, #6]
 80032b6:	7b3b      	ldrb	r3, [r7, #12]
 80032b8:	1ad2      	subs	r2, r2, r3
 80032ba:	793b      	ldrb	r3, [r7, #4]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d105      	bne.n	80032cc <OLED_ShowChar+0xb8>
			{
				y=y0;
 80032c0:	7b3b      	ldrb	r3, [r7, #12]
 80032c2:	71bb      	strb	r3, [r7, #6]
				x++;
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	3301      	adds	r3, #1
 80032c8:	71fb      	strb	r3, [r7, #7]
				break;
 80032ca:	e005      	b.n	80032d8 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80032cc:	7b7b      	ldrb	r3, [r7, #13]
 80032ce:	3301      	adds	r3, #1
 80032d0:	737b      	strb	r3, [r7, #13]
 80032d2:	7b7b      	ldrb	r3, [r7, #13]
 80032d4:	2b07      	cmp	r3, #7
 80032d6:	d9ce      	bls.n	8003276 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80032d8:	7bbb      	ldrb	r3, [r7, #14]
 80032da:	3301      	adds	r3, #1
 80032dc:	73bb      	strb	r3, [r7, #14]
 80032de:	7bba      	ldrb	r2, [r7, #14]
 80032e0:	793b      	ldrb	r3, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3ad      	bcc.n	8003242 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80032e6:	bf00      	nop
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd90      	pop	{r4, r7, pc}
 80032f0:	0800b468 	.word	0x0800b468
 80032f4:	0800b8dc 	.word	0x0800b8dc

080032f8 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	4603      	mov	r3, r0
 8003300:	603a      	str	r2, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
 8003304:	460b      	mov	r3, r1
 8003306:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003308:	e01f      	b.n	800334a <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	2b7a      	cmp	r3, #122	; 0x7a
 800330e:	d904      	bls.n	800331a <OLED_ShowString+0x22>
 8003310:	2300      	movs	r3, #0
 8003312:	71fb      	strb	r3, [r7, #7]
 8003314:	79bb      	ldrb	r3, [r7, #6]
 8003316:	3310      	adds	r3, #16
 8003318:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800331a:	79bb      	ldrb	r3, [r7, #6]
 800331c:	2b3a      	cmp	r3, #58	; 0x3a
 800331e:	d905      	bls.n	800332c <OLED_ShowString+0x34>
 8003320:	2300      	movs	r3, #0
 8003322:	71fb      	strb	r3, [r7, #7]
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	71bb      	strb	r3, [r7, #6]
 8003328:	f7ff fef4 	bl	8003114 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	79b9      	ldrb	r1, [r7, #6]
 8003332:	79f8      	ldrb	r0, [r7, #7]
 8003334:	2301      	movs	r3, #1
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	230c      	movs	r3, #12
 800333a:	f7ff ff6b 	bl	8003214 <OLED_ShowChar>
        x+=8;
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	3308      	adds	r3, #8
 8003342:	71fb      	strb	r3, [r7, #7]
        p++;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1db      	bne.n	800330a <OLED_ShowString+0x12>
    }  
}	 
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <OLED_Init>:

void OLED_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003360:	f001 fc28 	bl	8004bb4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003364:	4b41      	ldr	r3, [pc, #260]	; (800346c <OLED_Init+0x110>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a40      	ldr	r2, [pc, #256]	; (800346c <OLED_Init+0x110>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	4b3e      	ldr	r3, [pc, #248]	; (800346c <OLED_Init+0x110>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a3d      	ldr	r2, [pc, #244]	; (800346c <OLED_Init+0x110>)
 8003376:	f023 0304 	bic.w	r3, r3, #4
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800337c:	f001 fc2e 	bl	8004bdc <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003380:	2200      	movs	r2, #0
 8003382:	2180      	movs	r1, #128	; 0x80
 8003384:	483a      	ldr	r0, [pc, #232]	; (8003470 <OLED_Init+0x114>)
 8003386:	f000 fc4b 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800338a:	2064      	movs	r0, #100	; 0x64
 800338c:	f000 f8e4 	bl	8003558 <HAL_Delay>
	OLED_RST_Set();
 8003390:	2201      	movs	r2, #1
 8003392:	2180      	movs	r1, #128	; 0x80
 8003394:	4836      	ldr	r0, [pc, #216]	; (8003470 <OLED_Init+0x114>)
 8003396:	f000 fc43 	bl	8003c20 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800339a:	2100      	movs	r1, #0
 800339c:	20ae      	movs	r0, #174	; 0xae
 800339e:	f7ff fe6f 	bl	8003080 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80033a2:	2100      	movs	r1, #0
 80033a4:	20d5      	movs	r0, #213	; 0xd5
 80033a6:	f7ff fe6b 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80033aa:	2100      	movs	r1, #0
 80033ac:	2050      	movs	r0, #80	; 0x50
 80033ae:	f7ff fe67 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80033b2:	2100      	movs	r1, #0
 80033b4:	20a8      	movs	r0, #168	; 0xa8
 80033b6:	f7ff fe63 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80033ba:	2100      	movs	r1, #0
 80033bc:	203f      	movs	r0, #63	; 0x3f
 80033be:	f7ff fe5f 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80033c2:	2100      	movs	r1, #0
 80033c4:	20d3      	movs	r0, #211	; 0xd3
 80033c6:	f7ff fe5b 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80033ca:	2100      	movs	r1, #0
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7ff fe57 	bl	8003080 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80033d2:	2100      	movs	r1, #0
 80033d4:	2040      	movs	r0, #64	; 0x40
 80033d6:	f7ff fe53 	bl	8003080 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80033da:	2100      	movs	r1, #0
 80033dc:	208d      	movs	r0, #141	; 0x8d
 80033de:	f7ff fe4f 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80033e2:	2100      	movs	r1, #0
 80033e4:	2014      	movs	r0, #20
 80033e6:	f7ff fe4b 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80033ea:	2100      	movs	r1, #0
 80033ec:	2020      	movs	r0, #32
 80033ee:	f7ff fe47 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80033f2:	2100      	movs	r1, #0
 80033f4:	2002      	movs	r0, #2
 80033f6:	f7ff fe43 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80033fa:	2100      	movs	r1, #0
 80033fc:	20a1      	movs	r0, #161	; 0xa1
 80033fe:	f7ff fe3f 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003402:	2100      	movs	r1, #0
 8003404:	20c0      	movs	r0, #192	; 0xc0
 8003406:	f7ff fe3b 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800340a:	2100      	movs	r1, #0
 800340c:	20da      	movs	r0, #218	; 0xda
 800340e:	f7ff fe37 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003412:	2100      	movs	r1, #0
 8003414:	2012      	movs	r0, #18
 8003416:	f7ff fe33 	bl	8003080 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800341a:	2100      	movs	r1, #0
 800341c:	2081      	movs	r0, #129	; 0x81
 800341e:	f7ff fe2f 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003422:	2100      	movs	r1, #0
 8003424:	20ef      	movs	r0, #239	; 0xef
 8003426:	f7ff fe2b 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800342a:	2100      	movs	r1, #0
 800342c:	20d9      	movs	r0, #217	; 0xd9
 800342e:	f7ff fe27 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003432:	2100      	movs	r1, #0
 8003434:	20f1      	movs	r0, #241	; 0xf1
 8003436:	f7ff fe23 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800343a:	2100      	movs	r1, #0
 800343c:	20db      	movs	r0, #219	; 0xdb
 800343e:	f7ff fe1f 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003442:	2100      	movs	r1, #0
 8003444:	2030      	movs	r0, #48	; 0x30
 8003446:	f7ff fe1b 	bl	8003080 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800344a:	2100      	movs	r1, #0
 800344c:	20a4      	movs	r0, #164	; 0xa4
 800344e:	f7ff fe17 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8003452:	2100      	movs	r1, #0
 8003454:	20a6      	movs	r0, #166	; 0xa6
 8003456:	f7ff fe13 	bl	8003080 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800345a:	2100      	movs	r1, #0
 800345c:	20af      	movs	r0, #175	; 0xaf
 800345e:	f7ff fe0f 	bl	8003080 <OLED_WR_Byte>
	OLED_Clear(); 
 8003462:	f7ff fe57 	bl	8003114 <OLED_Clear>
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_Init+0x40>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_Init+0x40>)
 800347e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_Init+0x40>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <HAL_Init+0x40>)
 800348a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800348e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_Init+0x40>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <HAL_Init+0x40>)
 8003496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800349c:	2003      	movs	r0, #3
 800349e:	f000 f94f 	bl	8003740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034a2:	200f      	movs	r0, #15
 80034a4:	f000 f808 	bl	80034b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034a8:	f7ff fa7e 	bl	80029a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023c00 	.word	0x40023c00

080034b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_InitTick+0x54>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_InitTick+0x58>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4619      	mov	r1, r3
 80034ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f967 	bl	80037aa <HAL_SYSTICK_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00e      	b.n	8003504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b0f      	cmp	r3, #15
 80034ea:	d80a      	bhi.n	8003502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ec:	2200      	movs	r2, #0
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f000 f92f 	bl	8003756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034f8:	4a06      	ldr	r2, [pc, #24]	; (8003514 <HAL_InitTick+0x5c>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000004 	.word	0x20000004
 8003510:	2000000c 	.word	0x2000000c
 8003514:	20000008 	.word	0x20000008

08003518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_IncTick+0x20>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_IncTick+0x24>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4413      	add	r3, r2
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_IncTick+0x24>)
 800352a:	6013      	str	r3, [r2, #0]
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	2000000c 	.word	0x2000000c
 800353c:	20000718 	.word	0x20000718

08003540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return uwTick;
 8003544:	4b03      	ldr	r3, [pc, #12]	; (8003554 <HAL_GetTick+0x14>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000718 	.word	0x20000718

08003558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003560:	f7ff ffee 	bl	8003540 <HAL_GetTick>
 8003564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d005      	beq.n	800357e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_Delay+0x44>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800357e:	bf00      	nop
 8003580:	f7ff ffde 	bl	8003540 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	429a      	cmp	r2, r3
 800358e:	d8f7      	bhi.n	8003580 <HAL_Delay+0x28>
  {
  }
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000000c 	.word	0x2000000c

080035a0 <__NVIC_SetPriorityGrouping>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035bc:	4013      	ands	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035d2:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	60d3      	str	r3, [r2, #12]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_GetPriorityGrouping>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <__NVIC_GetPriorityGrouping+0x18>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0307 	and.w	r3, r3, #7
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_EnableIRQ>:
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	2b00      	cmp	r3, #0
 8003614:	db0b      	blt.n	800362e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <__NVIC_EnableIRQ+0x38>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2001      	movs	r0, #1
 8003626:	fa00 f202 	lsl.w	r2, r0, r2
 800362a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100

08003640 <__NVIC_SetPriority>:
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db0a      	blt.n	800366a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	490c      	ldr	r1, [pc, #48]	; (800368c <__NVIC_SetPriority+0x4c>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	440b      	add	r3, r1
 8003664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003668:	e00a      	b.n	8003680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4908      	ldr	r1, [pc, #32]	; (8003690 <__NVIC_SetPriority+0x50>)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3b04      	subs	r3, #4
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	440b      	add	r3, r1
 800367e:	761a      	strb	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <NVIC_EncodePriority>:
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	; 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f1c3 0307 	rsb	r3, r3, #7
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf28      	it	cs
 80036b2:	2304      	movcs	r3, #4
 80036b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d902      	bls.n	80036c4 <NVIC_EncodePriority+0x30>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3b03      	subs	r3, #3
 80036c2:	e000      	b.n	80036c6 <NVIC_EncodePriority+0x32>
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	401a      	ands	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	4313      	orrs	r3, r2
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	; 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800370c:	d301      	bcc.n	8003712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800370e:	2301      	movs	r3, #1
 8003710:	e00f      	b.n	8003732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <SysTick_Config+0x40>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800371a:	210f      	movs	r1, #15
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	f7ff ff8e 	bl	8003640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <SysTick_Config+0x40>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372a:	4b04      	ldr	r3, [pc, #16]	; (800373c <SysTick_Config+0x40>)
 800372c:	2207      	movs	r2, #7
 800372e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	e000e010 	.word	0xe000e010

08003740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff29 	bl	80035a0 <__NVIC_SetPriorityGrouping>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003768:	f7ff ff3e 	bl	80035e8 <__NVIC_GetPriorityGrouping>
 800376c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f7ff ff8e 	bl	8003694 <NVIC_EncodePriority>
 8003778:	4602      	mov	r2, r0
 800377a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff5d 	bl	8003640 <__NVIC_SetPriority>
}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	4603      	mov	r3, r0
 8003796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff31 	bl	8003604 <__NVIC_EnableIRQ>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ffa2 	bl	80036fc <SysTick_Config>
 80037b8:	4603      	mov	r3, r0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037d0:	f7ff feb6 	bl	8003540 <HAL_GetTick>
 80037d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d008      	beq.n	80037f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e052      	b.n	800389a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0216 	bic.w	r2, r2, #22
 8003802:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003812:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d103      	bne.n	8003824 <HAL_DMA_Abort+0x62>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0208 	bic.w	r2, r2, #8
 8003832:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003844:	e013      	b.n	800386e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003846:	f7ff fe7b 	bl	8003540 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b05      	cmp	r3, #5
 8003852:	d90c      	bls.n	800386e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2203      	movs	r2, #3
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e015      	b.n	800389a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e4      	bne.n	8003846 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	223f      	movs	r2, #63	; 0x3f
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d004      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e00c      	b.n	80038da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2205      	movs	r2, #5
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	e16b      	b.n	8003bdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	429a      	cmp	r2, r3
 800391e:	f040 815a 	bne.w	8003bd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d005      	beq.n	800393a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003936:	2b02      	cmp	r3, #2
 8003938:	d130      	bne.n	800399c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	2203      	movs	r2, #3
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003970:	2201      	movs	r2, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 0201 	and.w	r2, r3, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d017      	beq.n	80039d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	2203      	movs	r2, #3
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d123      	bne.n	8003a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	08da      	lsrs	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3208      	adds	r2, #8
 80039ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	220f      	movs	r2, #15
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	08da      	lsrs	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3208      	adds	r2, #8
 8003a26:	69b9      	ldr	r1, [r7, #24]
 8003a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2203      	movs	r2, #3
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0203 	and.w	r2, r3, #3
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80b4 	beq.w	8003bd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	4b60      	ldr	r3, [pc, #384]	; (8003bf4 <HAL_GPIO_Init+0x30c>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	4a5f      	ldr	r2, [pc, #380]	; (8003bf4 <HAL_GPIO_Init+0x30c>)
 8003a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7e:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <HAL_GPIO_Init+0x30c>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	; (8003bf8 <HAL_GPIO_Init+0x310>)
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	; (8003bfc <HAL_GPIO_Init+0x314>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d02b      	beq.n	8003b0e <HAL_GPIO_Init+0x226>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a51      	ldr	r2, [pc, #324]	; (8003c00 <HAL_GPIO_Init+0x318>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d025      	beq.n	8003b0a <HAL_GPIO_Init+0x222>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a50      	ldr	r2, [pc, #320]	; (8003c04 <HAL_GPIO_Init+0x31c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01f      	beq.n	8003b06 <HAL_GPIO_Init+0x21e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a4f      	ldr	r2, [pc, #316]	; (8003c08 <HAL_GPIO_Init+0x320>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d019      	beq.n	8003b02 <HAL_GPIO_Init+0x21a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a4e      	ldr	r2, [pc, #312]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_GPIO_Init+0x216>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a4d      	ldr	r2, [pc, #308]	; (8003c10 <HAL_GPIO_Init+0x328>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00d      	beq.n	8003afa <HAL_GPIO_Init+0x212>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4c      	ldr	r2, [pc, #304]	; (8003c14 <HAL_GPIO_Init+0x32c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <HAL_GPIO_Init+0x20e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a4b      	ldr	r2, [pc, #300]	; (8003c18 <HAL_GPIO_Init+0x330>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d101      	bne.n	8003af2 <HAL_GPIO_Init+0x20a>
 8003aee:	2307      	movs	r3, #7
 8003af0:	e00e      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003af2:	2308      	movs	r3, #8
 8003af4:	e00c      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003af6:	2306      	movs	r3, #6
 8003af8:	e00a      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003afa:	2305      	movs	r3, #5
 8003afc:	e008      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003afe:	2304      	movs	r3, #4
 8003b00:	e006      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003b02:	2303      	movs	r3, #3
 8003b04:	e004      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e002      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	f002 0203 	and.w	r2, r2, #3
 8003b16:	0092      	lsls	r2, r2, #2
 8003b18:	4093      	lsls	r3, r2
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b20:	4935      	ldr	r1, [pc, #212]	; (8003bf8 <HAL_GPIO_Init+0x310>)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	3302      	adds	r3, #2
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b52:	4a32      	ldr	r2, [pc, #200]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b58:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b7c:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b82:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bac:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bd0:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	f67f ae90 	bls.w	8003904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40013800 	.word	0x40013800
 8003bfc:	40020000 	.word	0x40020000
 8003c00:	40020400 	.word	0x40020400
 8003c04:	40020800 	.word	0x40020800
 8003c08:	40020c00 	.word	0x40020c00
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40021400 	.word	0x40021400
 8003c14:	40021800 	.word	0x40021800
 8003c18:	40021c00 	.word	0x40021c00
 8003c1c:	40013c00 	.word	0x40013c00

08003c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c30:	787b      	ldrb	r3, [r7, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c3c:	e003      	b.n	8003c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	041a      	lsls	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	619a      	str	r2, [r3, #24]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c64:	887a      	ldrh	r2, [r7, #2]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	041a      	lsls	r2, r3, #16
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	43d9      	mvns	r1, r3
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	400b      	ands	r3, r1
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	619a      	str	r2, [r3, #24]
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e12b      	b.n	8003ef2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fe feae 	bl	8002a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2224      	movs	r2, #36	; 0x24
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cec:	f001 fbba 	bl	8005464 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4a81      	ldr	r2, [pc, #516]	; (8003efc <HAL_I2C_Init+0x274>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d807      	bhi.n	8003d0c <HAL_I2C_Init+0x84>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a80      	ldr	r2, [pc, #512]	; (8003f00 <HAL_I2C_Init+0x278>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	bf94      	ite	ls
 8003d04:	2301      	movls	r3, #1
 8003d06:	2300      	movhi	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e006      	b.n	8003d1a <HAL_I2C_Init+0x92>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a7d      	ldr	r2, [pc, #500]	; (8003f04 <HAL_I2C_Init+0x27c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	bf94      	ite	ls
 8003d14:	2301      	movls	r3, #1
 8003d16:	2300      	movhi	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e0e7      	b.n	8003ef2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a78      	ldr	r2, [pc, #480]	; (8003f08 <HAL_I2C_Init+0x280>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0c9b      	lsrs	r3, r3, #18
 8003d2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4a6a      	ldr	r2, [pc, #424]	; (8003efc <HAL_I2C_Init+0x274>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d802      	bhi.n	8003d5c <HAL_I2C_Init+0xd4>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	e009      	b.n	8003d70 <HAL_I2C_Init+0xe8>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	4a69      	ldr	r2, [pc, #420]	; (8003f0c <HAL_I2C_Init+0x284>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	099b      	lsrs	r3, r3, #6
 8003d6e:	3301      	adds	r3, #1
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	495c      	ldr	r1, [pc, #368]	; (8003efc <HAL_I2C_Init+0x274>)
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	d819      	bhi.n	8003dc4 <HAL_I2C_Init+0x13c>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1e59      	subs	r1, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003da4:	400b      	ands	r3, r1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_I2C_Init+0x138>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1e59      	subs	r1, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbe:	e051      	b.n	8003e64 <HAL_I2C_Init+0x1dc>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	e04f      	b.n	8003e64 <HAL_I2C_Init+0x1dc>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d111      	bne.n	8003df0 <HAL_I2C_Init+0x168>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1e58      	subs	r0, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	440b      	add	r3, r1
 8003dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e012      	b.n	8003e16 <HAL_I2C_Init+0x18e>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e58      	subs	r0, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	0099      	lsls	r1, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Init+0x196>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e022      	b.n	8003e64 <HAL_I2C_Init+0x1dc>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10e      	bne.n	8003e44 <HAL_I2C_Init+0x1bc>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e58      	subs	r0, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	440b      	add	r3, r1
 8003e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e42:	e00f      	b.n	8003e64 <HAL_I2C_Init+0x1dc>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1e58      	subs	r0, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	0099      	lsls	r1, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	6809      	ldr	r1, [r1, #0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6911      	ldr	r1, [r2, #16]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68d2      	ldr	r2, [r2, #12]
 8003e9e:	4311      	orrs	r1, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	000186a0 	.word	0x000186a0
 8003f00:	001e847f 	.word	0x001e847f
 8003f04:	003d08ff 	.word	0x003d08ff
 8003f08:	431bde83 	.word	0x431bde83
 8003f0c:	10624dd3 	.word	0x10624dd3

08003f10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	817b      	strh	r3, [r7, #10]
 8003f20:	4613      	mov	r3, r2
 8003f22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7ff fb0c 	bl	8003540 <HAL_GetTick>
 8003f28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	f040 80e0 	bne.w	80040f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	2319      	movs	r3, #25
 8003f3e:	2201      	movs	r2, #1
 8003f40:	4970      	ldr	r1, [pc, #448]	; (8004104 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fc58 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e0d3      	b.n	80040fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_I2C_Master_Transmit+0x50>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e0cc      	b.n	80040fa <HAL_I2C_Master_Transmit+0x1ea>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d007      	beq.n	8003f86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2221      	movs	r2, #33	; 0x21
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	893a      	ldrh	r2, [r7, #8]
 8003fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4a50      	ldr	r2, [pc, #320]	; (8004108 <HAL_I2C_Master_Transmit+0x1f8>)
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fc8:	8979      	ldrh	r1, [r7, #10]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	6a3a      	ldr	r2, [r7, #32]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fac2 	bl	8004558 <I2C_MasterRequestWrite>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e08d      	b.n	80040fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ff4:	e066      	b.n	80040c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	6a39      	ldr	r1, [r7, #32]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fcd2 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	2b04      	cmp	r3, #4
 800400c:	d107      	bne.n	800401e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06b      	b.n	80040fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	781a      	ldrb	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b04      	cmp	r3, #4
 800405e:	d11b      	bne.n	8004098 <HAL_I2C_Master_Transmit+0x188>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	d017      	beq.n	8004098 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	781a      	ldrb	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	6a39      	ldr	r1, [r7, #32]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fcc2 	bl	8004a26 <I2C_WaitOnBTFFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d107      	bne.n	80040c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e01a      	b.n	80040fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d194      	bne.n	8003ff6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	00100002 	.word	0x00100002
 8004108:	ffff0000 	.word	0xffff0000

0800410c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	; 0x30
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	461a      	mov	r2, r3
 8004118:	460b      	mov	r3, r1
 800411a:	817b      	strh	r3, [r7, #10]
 800411c:	4613      	mov	r3, r2
 800411e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004120:	f7ff fa0e 	bl	8003540 <HAL_GetTick>
 8004124:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b20      	cmp	r3, #32
 8004130:	f040 820b 	bne.w	800454a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2319      	movs	r3, #25
 800413a:	2201      	movs	r2, #1
 800413c:	497c      	ldr	r1, [pc, #496]	; (8004330 <HAL_I2C_Master_Receive+0x224>)
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fb5a 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800414a:	2302      	movs	r3, #2
 800414c:	e1fe      	b.n	800454c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_I2C_Master_Receive+0x50>
 8004158:	2302      	movs	r3, #2
 800415a:	e1f7      	b.n	800454c <HAL_I2C_Master_Receive+0x440>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d007      	beq.n	8004182 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004190:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2222      	movs	r2, #34	; 0x22
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2210      	movs	r2, #16
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	893a      	ldrh	r2, [r7, #8]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a5c      	ldr	r2, [pc, #368]	; (8004334 <HAL_I2C_Master_Receive+0x228>)
 80041c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041c4:	8979      	ldrh	r1, [r7, #10]
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fa46 	bl	800465c <I2C_MasterRequestRead>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e1b8      	b.n	800454c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d113      	bne.n	800420a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e2:	2300      	movs	r3, #0
 80041e4:	623b      	str	r3, [r7, #32]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	623b      	str	r3, [r7, #32]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	623b      	str	r3, [r7, #32]
 80041f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e18c      	b.n	8004524 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420e:	2b01      	cmp	r3, #1
 8004210:	d11b      	bne.n	800424a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e16c      	b.n	8004524 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	2b02      	cmp	r3, #2
 8004250:	d11b      	bne.n	800428a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004260:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004272:	2300      	movs	r3, #0
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	e14c      	b.n	8004524 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004298:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042b0:	e138      	b.n	8004524 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	f200 80f1 	bhi.w	800449e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d123      	bne.n	800430c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fbed 	bl	8004aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e139      	b.n	800454c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800430a:	e10b      	b.n	8004524 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b02      	cmp	r3, #2
 8004312:	d14e      	bne.n	80043b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	2200      	movs	r2, #0
 800431c:	4906      	ldr	r1, [pc, #24]	; (8004338 <HAL_I2C_Master_Receive+0x22c>)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fa6a 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e10e      	b.n	800454c <HAL_I2C_Master_Receive+0x440>
 800432e:	bf00      	nop
 8004330:	00100002 	.word	0x00100002
 8004334:	ffff0000 	.word	0xffff0000
 8004338:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b0:	e0b8      	b.n	8004524 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	2200      	movs	r2, #0
 80043ba:	4966      	ldr	r1, [pc, #408]	; (8004554 <HAL_I2C_Master_Receive+0x448>)
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fa1b 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0bf      	b.n	800454c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2200      	movs	r2, #0
 8004416:	494f      	ldr	r1, [pc, #316]	; (8004554 <HAL_I2C_Master_Receive+0x448>)
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f9ed 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e091      	b.n	800454c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800449c:	e042      	b.n	8004524 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fb00 	bl	8004aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e04c      	b.n	800454c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d118      	bne.n	8004524 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	f47f aec2 	bne.w	80042b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e000      	b.n	800454c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800454a:	2302      	movs	r3, #2
  }
}
 800454c:	4618      	mov	r0, r3
 800454e:	3728      	adds	r7, #40	; 0x28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	00010004 	.word	0x00010004

08004558 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	460b      	mov	r3, r1
 8004566:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d006      	beq.n	8004582 <I2C_MasterRequestWrite+0x2a>
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d003      	beq.n	8004582 <I2C_MasterRequestWrite+0x2a>
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004580:	d108      	bne.n	8004594 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e00b      	b.n	80045ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	2b12      	cmp	r3, #18
 800459a:	d107      	bne.n	80045ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f91d 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d2:	d103      	bne.n	80045dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e035      	b.n	800464c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045e8:	d108      	bne.n	80045fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ea:	897b      	ldrh	r3, [r7, #10]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f8:	611a      	str	r2, [r3, #16]
 80045fa:	e01b      	b.n	8004634 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045fc:	897b      	ldrh	r3, [r7, #10]
 80045fe:	11db      	asrs	r3, r3, #7
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 0306 	and.w	r3, r3, #6
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f063 030f 	orn	r3, r3, #15
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	490e      	ldr	r1, [pc, #56]	; (8004654 <I2C_MasterRequestWrite+0xfc>)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f943 	bl	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e010      	b.n	800464c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800462a:	897b      	ldrh	r3, [r7, #10]
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	4907      	ldr	r1, [pc, #28]	; (8004658 <I2C_MasterRequestWrite+0x100>)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f933 	bl	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	00010008 	.word	0x00010008
 8004658:	00010002 	.word	0x00010002

0800465c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	460b      	mov	r3, r1
 800466a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004680:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d006      	beq.n	8004696 <I2C_MasterRequestRead+0x3a>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d003      	beq.n	8004696 <I2C_MasterRequestRead+0x3a>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004694:	d108      	bne.n	80046a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e00b      	b.n	80046c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	2b11      	cmp	r3, #17
 80046ae:	d107      	bne.n	80046c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f893 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00d      	beq.n	80046f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e6:	d103      	bne.n	80046f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e079      	b.n	80047e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046fc:	d108      	bne.n	8004710 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046fe:	897b      	ldrh	r3, [r7, #10]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	611a      	str	r2, [r3, #16]
 800470e:	e05f      	b.n	80047d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004710:	897b      	ldrh	r3, [r7, #10]
 8004712:	11db      	asrs	r3, r3, #7
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f003 0306 	and.w	r3, r3, #6
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f063 030f 	orn	r3, r3, #15
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4930      	ldr	r1, [pc, #192]	; (80047f0 <I2C_MasterRequestRead+0x194>)
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f8b9 	bl	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e054      	b.n	80047e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800473e:	897b      	ldrh	r3, [r7, #10]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4929      	ldr	r1, [pc, #164]	; (80047f4 <I2C_MasterRequestRead+0x198>)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f8a9 	bl	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e044      	b.n	80047e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004782:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f831 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047aa:	d103      	bne.n	80047b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e017      	b.n	80047e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80047b8:	897b      	ldrh	r3, [r7, #10]
 80047ba:	11db      	asrs	r3, r3, #7
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 0306 	and.w	r3, r3, #6
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f063 030e 	orn	r3, r3, #14
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4907      	ldr	r1, [pc, #28]	; (80047f4 <I2C_MasterRequestRead+0x198>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f865 	bl	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	00010008 	.word	0x00010008
 80047f4:	00010002 	.word	0x00010002

080047f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004808:	e025      	b.n	8004856 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d021      	beq.n	8004856 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004812:	f7fe fe95 	bl	8003540 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d116      	bne.n	8004856 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e023      	b.n	800489e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10d      	bne.n	800487c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	43da      	mvns	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	e00c      	b.n	8004896 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	43da      	mvns	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4013      	ands	r3, r2
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	429a      	cmp	r2, r3
 800489a:	d0b6      	beq.n	800480a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048b4:	e051      	b.n	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c4:	d123      	bne.n	800490e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f043 0204 	orr.w	r2, r3, #4
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e046      	b.n	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d021      	beq.n	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fe fe13 	bl	8003540 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d116      	bne.n	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e020      	b.n	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d10c      	bne.n	800497e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	43da      	mvns	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4013      	ands	r3, r2
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e00b      	b.n	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	43da      	mvns	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4013      	ands	r3, r2
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d18d      	bne.n	80048b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b0:	e02d      	b.n	8004a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f8ce 	bl	8004b54 <I2C_IsAcknowledgeFailed>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e02d      	b.n	8004a1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d021      	beq.n	8004a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7fe fdb9 	bl	8003540 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d116      	bne.n	8004a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e007      	b.n	8004a1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b80      	cmp	r3, #128	; 0x80
 8004a1a:	d1ca      	bne.n	80049b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a32:	e02d      	b.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f88d 	bl	8004b54 <I2C_IsAcknowledgeFailed>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e02d      	b.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d021      	beq.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4c:	f7fe fd78 	bl	8003540 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d302      	bcc.n	8004a62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d116      	bne.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	f043 0220 	orr.w	r2, r3, #32
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e007      	b.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d1ca      	bne.n	8004a34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab4:	e042      	b.n	8004b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d119      	bne.n	8004af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0210 	mvn.w	r2, #16
 8004acc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e029      	b.n	8004b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af8:	f7fe fd22 	bl	8003540 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d302      	bcc.n	8004b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d116      	bne.n	8004b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	f043 0220 	orr.w	r2, r3, #32
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e007      	b.n	8004b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d1b5      	bne.n	8004ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6a:	d11b      	bne.n	8004ba4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	f043 0204 	orr.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_PWR_EnableBkUpAccess+0x20>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004bc6:	687b      	ldr	r3, [r7, #4]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	420e0020 	.word	0x420e0020
 8004bd8:	40007000 	.word	0x40007000

08004bdc <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_PWR_DisableBkUpAccess+0x20>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004bee:	687b      	ldr	r3, [r7, #4]
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	420e0020 	.word	0x420e0020
 8004c00:	40007000 	.word	0x40007000

08004c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e267      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d075      	beq.n	8004d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c22:	4b88      	ldr	r3, [pc, #544]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d00c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2e:	4b85      	ldr	r3, [pc, #532]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d112      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3a:	4b82      	ldr	r3, [pc, #520]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	4b7e      	ldr	r3, [pc, #504]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d05b      	beq.n	8004d0c <HAL_RCC_OscConfig+0x108>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d157      	bne.n	8004d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e242      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d106      	bne.n	8004c78 <HAL_RCC_OscConfig+0x74>
 8004c6a:	4b76      	ldr	r3, [pc, #472]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a75      	ldr	r2, [pc, #468]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e01d      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x98>
 8004c82:	4b70      	ldr	r3, [pc, #448]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6f      	ldr	r2, [pc, #444]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a6c      	ldr	r2, [pc, #432]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	4b69      	ldr	r3, [pc, #420]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a68      	ldr	r2, [pc, #416]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b66      	ldr	r3, [pc, #408]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a65      	ldr	r2, [pc, #404]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d013      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fe fc40 	bl	8003540 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fe fc3c 	bl	8003540 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	; 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e207      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b5b      	ldr	r3, [pc, #364]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xc0>
 8004ce2:	e014      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe fc2c 	bl	8003540 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fe fc28 	bl	8003540 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	; 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e1f3      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfe:	4b51      	ldr	r3, [pc, #324]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0xe8>
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d063      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d1a:	4b4a      	ldr	r3, [pc, #296]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b47      	ldr	r3, [pc, #284]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d11c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d32:	4b44      	ldr	r3, [pc, #272]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	4b41      	ldr	r3, [pc, #260]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d001      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e1c7      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4b3b      	ldr	r3, [pc, #236]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4937      	ldr	r1, [pc, #220]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6a:	e03a      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d74:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <HAL_RCC_OscConfig+0x244>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fe fbe1 	bl	8003540 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d82:	f7fe fbdd 	bl	8003540 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e1a8      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d94:	4b2b      	ldr	r3, [pc, #172]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4925      	ldr	r1, [pc, #148]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db6:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <HAL_RCC_OscConfig+0x244>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fe fbc0 	bl	8003540 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc4:	f7fe fbbc 	bl	8003540 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e187      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d036      	beq.n	8004e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df6:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <HAL_RCC_OscConfig+0x248>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fe fba0 	bl	8003540 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fe fb9c 	bl	8003540 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e167      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x200>
 8004e22:	e01b      	b.n	8004e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e24:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <HAL_RCC_OscConfig+0x248>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2a:	f7fe fb89 	bl	8003540 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e30:	e00e      	b.n	8004e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e32:	f7fe fb85 	bl	8003540 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d907      	bls.n	8004e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e150      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
 8004e44:	40023800 	.word	0x40023800
 8004e48:	42470000 	.word	0x42470000
 8004e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e50:	4b88      	ldr	r3, [pc, #544]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ea      	bne.n	8004e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8097 	beq.w	8004f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6e:	4b81      	ldr	r3, [pc, #516]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10f      	bne.n	8004e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	4b7d      	ldr	r3, [pc, #500]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	4a7c      	ldr	r2, [pc, #496]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8a:	4b7a      	ldr	r3, [pc, #488]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9a:	4b77      	ldr	r3, [pc, #476]	; (8005078 <HAL_RCC_OscConfig+0x474>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d118      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea6:	4b74      	ldr	r3, [pc, #464]	; (8005078 <HAL_RCC_OscConfig+0x474>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a73      	ldr	r2, [pc, #460]	; (8005078 <HAL_RCC_OscConfig+0x474>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb2:	f7fe fb45 	bl	8003540 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eba:	f7fe fb41 	bl	8003540 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e10c      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ecc:	4b6a      	ldr	r3, [pc, #424]	; (8005078 <HAL_RCC_OscConfig+0x474>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x2ea>
 8004ee0:	4b64      	ldr	r3, [pc, #400]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	4a63      	ldr	r2, [pc, #396]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	6713      	str	r3, [r2, #112]	; 0x70
 8004eec:	e01c      	b.n	8004f28 <HAL_RCC_OscConfig+0x324>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x30c>
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	4a5e      	ldr	r2, [pc, #376]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	6713      	str	r3, [r2, #112]	; 0x70
 8004f02:	4b5c      	ldr	r3, [pc, #368]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	4a5b      	ldr	r2, [pc, #364]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f0e:	e00b      	b.n	8004f28 <HAL_RCC_OscConfig+0x324>
 8004f10:	4b58      	ldr	r3, [pc, #352]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	4a57      	ldr	r2, [pc, #348]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1c:	4b55      	ldr	r3, [pc, #340]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	4a54      	ldr	r2, [pc, #336]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f22:	f023 0304 	bic.w	r3, r3, #4
 8004f26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fe fb06 	bl	8003540 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fe fb02 	bl	8003540 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e0cb      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4e:	4b49      	ldr	r3, [pc, #292]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ee      	beq.n	8004f38 <HAL_RCC_OscConfig+0x334>
 8004f5a:	e014      	b.n	8004f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5c:	f7fe faf0 	bl	8003540 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f62:	e00a      	b.n	8004f7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fe faec 	bl	8003540 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0b5      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7a:	4b3e      	ldr	r3, [pc, #248]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ee      	bne.n	8004f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8c:	4b39      	ldr	r3, [pc, #228]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	4a38      	ldr	r2, [pc, #224]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a1 	beq.w	80050e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa2:	4b34      	ldr	r3, [pc, #208]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d05c      	beq.n	8005068 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d141      	bne.n	800503a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb6:	4b31      	ldr	r3, [pc, #196]	; (800507c <HAL_RCC_OscConfig+0x478>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbc:	f7fe fac0 	bl	8003540 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fe fabc 	bl	8003540 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e087      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	4b27      	ldr	r3, [pc, #156]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	019b      	lsls	r3, r3, #6
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	491b      	ldr	r1, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 8005008:	4313      	orrs	r3, r2
 800500a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <HAL_RCC_OscConfig+0x478>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fe fa95 	bl	8003540 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501a:	f7fe fa91 	bl	8003540 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e05c      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800502c:	4b11      	ldr	r3, [pc, #68]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x416>
 8005038:	e054      	b.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503a:	4b10      	ldr	r3, [pc, #64]	; (800507c <HAL_RCC_OscConfig+0x478>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fe fa7e 	bl	8003540 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005048:	f7fe fa7a 	bl	8003540 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e045      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	4b06      	ldr	r3, [pc, #24]	; (8005074 <HAL_RCC_OscConfig+0x470>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x444>
 8005066:	e03d      	b.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d107      	bne.n	8005080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e038      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
 8005074:	40023800 	.word	0x40023800
 8005078:	40007000 	.word	0x40007000
 800507c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005080:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <HAL_RCC_OscConfig+0x4ec>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d028      	beq.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d121      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d11a      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d111      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	3b01      	subs	r3, #1
 80050ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800

080050f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0cc      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005108:	4b68      	ldr	r3, [pc, #416]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d90c      	bls.n	8005130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b65      	ldr	r3, [pc, #404]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b63      	ldr	r3, [pc, #396]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0b8      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005148:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005160:	4b53      	ldr	r3, [pc, #332]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a52      	ldr	r2, [pc, #328]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800516a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516c:	4b50      	ldr	r3, [pc, #320]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	494d      	ldr	r1, [pc, #308]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d044      	beq.n	8005214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005192:	4b47      	ldr	r3, [pc, #284]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d119      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e07f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b2:	4b3f      	ldr	r3, [pc, #252]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e06f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c2:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e067      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f023 0203 	bic.w	r2, r3, #3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4934      	ldr	r1, [pc, #208]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e4:	f7fe f9ac 	bl	8003540 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ec:	f7fe f9a8 	bl	8003540 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e04f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 020c 	and.w	r2, r3, #12
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	429a      	cmp	r2, r3
 8005212:	d1eb      	bne.n	80051ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d20c      	bcs.n	800523c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b22      	ldr	r3, [pc, #136]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b20      	ldr	r3, [pc, #128]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e032      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4916      	ldr	r1, [pc, #88]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005266:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	490e      	ldr	r1, [pc, #56]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800527a:	f000 f821 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	490a      	ldr	r1, [pc, #40]	; (80052b4 <HAL_RCC_ClockConfig+0x1c0>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe f90c 	bl	80034b8 <HAL_InitTick>

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40023c00 	.word	0x40023c00
 80052b0:	40023800 	.word	0x40023800
 80052b4:	0800b450 	.word	0x0800b450
 80052b8:	20000004 	.word	0x20000004
 80052bc:	20000008 	.word	0x20000008

080052c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c4:	b090      	sub	sp, #64	; 0x40
 80052c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
 80052cc:	2300      	movs	r3, #0
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d0:	2300      	movs	r3, #0
 80052d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d8:	4b59      	ldr	r3, [pc, #356]	; (8005440 <HAL_RCC_GetSysClockFreq+0x180>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d00d      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x40>
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	f200 80a1 	bhi.w	800542c <HAL_RCC_GetSysClockFreq+0x16c>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0x34>
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d003      	beq.n	80052fa <HAL_RCC_GetSysClockFreq+0x3a>
 80052f2:	e09b      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052f4:	4b53      	ldr	r3, [pc, #332]	; (8005444 <HAL_RCC_GetSysClockFreq+0x184>)
 80052f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80052f8:	e09b      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052fa:	4b53      	ldr	r3, [pc, #332]	; (8005448 <HAL_RCC_GetSysClockFreq+0x188>)
 80052fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052fe:	e098      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005300:	4b4f      	ldr	r3, [pc, #316]	; (8005440 <HAL_RCC_GetSysClockFreq+0x180>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800530a:	4b4d      	ldr	r3, [pc, #308]	; (8005440 <HAL_RCC_GetSysClockFreq+0x180>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d028      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005316:	4b4a      	ldr	r3, [pc, #296]	; (8005440 <HAL_RCC_GetSysClockFreq+0x180>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	099b      	lsrs	r3, r3, #6
 800531c:	2200      	movs	r2, #0
 800531e:	623b      	str	r3, [r7, #32]
 8005320:	627a      	str	r2, [r7, #36]	; 0x24
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005328:	2100      	movs	r1, #0
 800532a:	4b47      	ldr	r3, [pc, #284]	; (8005448 <HAL_RCC_GetSysClockFreq+0x188>)
 800532c:	fb03 f201 	mul.w	r2, r3, r1
 8005330:	2300      	movs	r3, #0
 8005332:	fb00 f303 	mul.w	r3, r0, r3
 8005336:	4413      	add	r3, r2
 8005338:	4a43      	ldr	r2, [pc, #268]	; (8005448 <HAL_RCC_GetSysClockFreq+0x188>)
 800533a:	fba0 1202 	umull	r1, r2, r0, r2
 800533e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005340:	460a      	mov	r2, r1
 8005342:	62ba      	str	r2, [r7, #40]	; 0x28
 8005344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005346:	4413      	add	r3, r2
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	2200      	movs	r2, #0
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	61fa      	str	r2, [r7, #28]
 8005352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005356:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800535a:	f7fb fc27 	bl	8000bac <__aeabi_uldivmod>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4613      	mov	r3, r2
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005366:	e053      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005368:	4b35      	ldr	r3, [pc, #212]	; (8005440 <HAL_RCC_GetSysClockFreq+0x180>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	099b      	lsrs	r3, r3, #6
 800536e:	2200      	movs	r2, #0
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	617a      	str	r2, [r7, #20]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800537a:	f04f 0b00 	mov.w	fp, #0
 800537e:	4652      	mov	r2, sl
 8005380:	465b      	mov	r3, fp
 8005382:	f04f 0000 	mov.w	r0, #0
 8005386:	f04f 0100 	mov.w	r1, #0
 800538a:	0159      	lsls	r1, r3, #5
 800538c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005390:	0150      	lsls	r0, r2, #5
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	ebb2 080a 	subs.w	r8, r2, sl
 800539a:	eb63 090b 	sbc.w	r9, r3, fp
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80053aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80053ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80053b2:	ebb2 0408 	subs.w	r4, r2, r8
 80053b6:	eb63 0509 	sbc.w	r5, r3, r9
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	00eb      	lsls	r3, r5, #3
 80053c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053c8:	00e2      	lsls	r2, r4, #3
 80053ca:	4614      	mov	r4, r2
 80053cc:	461d      	mov	r5, r3
 80053ce:	eb14 030a 	adds.w	r3, r4, sl
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	eb45 030b 	adc.w	r3, r5, fp
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053e6:	4629      	mov	r1, r5
 80053e8:	028b      	lsls	r3, r1, #10
 80053ea:	4621      	mov	r1, r4
 80053ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053f0:	4621      	mov	r1, r4
 80053f2:	028a      	lsls	r2, r1, #10
 80053f4:	4610      	mov	r0, r2
 80053f6:	4619      	mov	r1, r3
 80053f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fa:	2200      	movs	r2, #0
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	60fa      	str	r2, [r7, #12]
 8005400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005404:	f7fb fbd2 	bl	8000bac <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4613      	mov	r3, r2
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <HAL_RCC_GetSysClockFreq+0x180>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	3301      	adds	r3, #1
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800542a:	e002      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_RCC_GetSysClockFreq+0x184>)
 800542e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005434:	4618      	mov	r0, r3
 8005436:	3740      	adds	r7, #64	; 0x40
 8005438:	46bd      	mov	sp, r7
 800543a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800543e:	bf00      	nop
 8005440:	40023800 	.word	0x40023800
 8005444:	00f42400 	.word	0x00f42400
 8005448:	017d7840 	.word	0x017d7840

0800544c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <HAL_RCC_GetHCLKFreq+0x14>)
 8005452:	681b      	ldr	r3, [r3, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000004 	.word	0x20000004

08005464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005468:	f7ff fff0 	bl	800544c <HAL_RCC_GetHCLKFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0a9b      	lsrs	r3, r3, #10
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	4903      	ldr	r1, [pc, #12]	; (8005488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005480:	4618      	mov	r0, r3
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40023800 	.word	0x40023800
 8005488:	0800b460 	.word	0x0800b460

0800548c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005490:	f7ff ffdc 	bl	800544c <HAL_RCC_GetHCLKFreq>
 8005494:	4602      	mov	r2, r0
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	0b5b      	lsrs	r3, r3, #13
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	4903      	ldr	r1, [pc, #12]	; (80054b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054a2:	5ccb      	ldrb	r3, [r1, r3]
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40023800 	.word	0x40023800
 80054b0:	0800b460 	.word	0x0800b460

080054b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e041      	b.n	800554a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fd fae0 	bl	8002aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f000 fe6c 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e041      	b.n	80055e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f839 	bl	80055f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f000 fe1d 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <HAL_TIM_PWM_Start+0x24>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e022      	b.n	800566e <HAL_TIM_PWM_Start+0x6a>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b04      	cmp	r3, #4
 800562c:	d109      	bne.n	8005642 <HAL_TIM_PWM_Start+0x3e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b01      	cmp	r3, #1
 8005638:	bf14      	ite	ne
 800563a:	2301      	movne	r3, #1
 800563c:	2300      	moveq	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	e015      	b.n	800566e <HAL_TIM_PWM_Start+0x6a>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b08      	cmp	r3, #8
 8005646:	d109      	bne.n	800565c <HAL_TIM_PWM_Start+0x58>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e008      	b.n	800566e <HAL_TIM_PWM_Start+0x6a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e07c      	b.n	8005770 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d104      	bne.n	8005686 <HAL_TIM_PWM_Start+0x82>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005684:	e013      	b.n	80056ae <HAL_TIM_PWM_Start+0xaa>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b04      	cmp	r3, #4
 800568a:	d104      	bne.n	8005696 <HAL_TIM_PWM_Start+0x92>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005694:	e00b      	b.n	80056ae <HAL_TIM_PWM_Start+0xaa>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b08      	cmp	r3, #8
 800569a:	d104      	bne.n	80056a6 <HAL_TIM_PWM_Start+0xa2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a4:	e003      	b.n	80056ae <HAL_TIM_PWM_Start+0xaa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2201      	movs	r2, #1
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 f99e 	bl	80069f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2d      	ldr	r2, [pc, #180]	; (8005778 <HAL_TIM_PWM_Start+0x174>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_TIM_PWM_Start+0xcc>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2c      	ldr	r2, [pc, #176]	; (800577c <HAL_TIM_PWM_Start+0x178>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d101      	bne.n	80056d4 <HAL_TIM_PWM_Start+0xd0>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <HAL_TIM_PWM_Start+0xd2>
 80056d4:	2300      	movs	r3, #0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a22      	ldr	r2, [pc, #136]	; (8005778 <HAL_TIM_PWM_Start+0x174>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d022      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d01d      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <HAL_TIM_PWM_Start+0x17c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d018      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <HAL_TIM_PWM_Start+0x180>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <HAL_TIM_PWM_Start+0x184>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00e      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a16      	ldr	r2, [pc, #88]	; (800577c <HAL_TIM_PWM_Start+0x178>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d009      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_TIM_PWM_Start+0x188>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d004      	beq.n	800573a <HAL_TIM_PWM_Start+0x136>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a16      	ldr	r2, [pc, #88]	; (8005790 <HAL_TIM_PWM_Start+0x18c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d111      	bne.n	800575e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b06      	cmp	r3, #6
 800574a:	d010      	beq.n	800576e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575c:	e007      	b.n	800576e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0201 	orr.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40010000 	.word	0x40010000
 800577c:	40010400 	.word	0x40010400
 8005780:	40000400 	.word	0x40000400
 8005784:	40000800 	.word	0x40000800
 8005788:	40000c00 	.word	0x40000c00
 800578c:	40014000 	.word	0x40014000
 8005790:	40001800 	.word	0x40001800

08005794 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e041      	b.n	800582a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fd fa80 	bl	8002cc0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f000 fcfc 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b086      	sub	sp, #24
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e097      	b.n	8005976 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fd f996 	bl	8002b8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005876:	f023 0307 	bic.w	r3, r3, #7
 800587a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3304      	adds	r3, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f000 fca2 	bl	80061d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b4:	f023 0303 	bic.w	r3, r3, #3
 80058b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	4313      	orrs	r3, r2
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80058d2:	f023 030c 	bic.w	r3, r3, #12
 80058d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	4313      	orrs	r3, r2
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	011a      	lsls	r2, r3, #4
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	031b      	lsls	r3, r3, #12
 8005902:	4313      	orrs	r3, r2
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005910:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005918:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	4313      	orrs	r3, r2
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005996:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800599e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059a6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d110      	bne.n	80059d0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d102      	bne.n	80059ba <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059b4:	7b7b      	ldrb	r3, [r7, #13]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d001      	beq.n	80059be <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e069      	b.n	8005a92 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ce:	e031      	b.n	8005a34 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d110      	bne.n	80059f8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d102      	bne.n	80059e2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059dc:	7b3b      	ldrb	r3, [r7, #12]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d001      	beq.n	80059e6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e055      	b.n	8005a92 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2202      	movs	r2, #2
 80059ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059f6:	e01d      	b.n	8005a34 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d108      	bne.n	8005a10 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d105      	bne.n	8005a10 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a04:	7b7b      	ldrb	r3, [r7, #13]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d102      	bne.n	8005a10 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a0a:	7b3b      	ldrb	r3, [r7, #12]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d001      	beq.n	8005a14 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e03e      	b.n	8005a92 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_TIM_Encoder_Start+0xc4>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d008      	beq.n	8005a52 <HAL_TIM_Encoder_Start+0xd4>
 8005a40:	e00f      	b.n	8005a62 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2201      	movs	r2, #1
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 ffd4 	bl	80069f8 <TIM_CCxChannelCmd>
      break;
 8005a50:	e016      	b.n	8005a80 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2201      	movs	r2, #1
 8005a58:	2104      	movs	r1, #4
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 ffcc 	bl	80069f8 <TIM_CCxChannelCmd>
      break;
 8005a60:	e00e      	b.n	8005a80 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2201      	movs	r2, #1
 8005a68:	2100      	movs	r1, #0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 ffc4 	bl	80069f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2201      	movs	r2, #1
 8005a76:	2104      	movs	r1, #4
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 ffbd 	bl	80069f8 <TIM_CCxChannelCmd>
      break;
 8005a7e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d122      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d11b      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f06f 0202 	mvn.w	r2, #2
 8005ac6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7fb fe6b 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
 8005ae2:	e005      	b.n	8005af0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fb55 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fb5c 	bl	80061a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d122      	bne.n	8005b4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d11b      	bne.n	8005b4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f06f 0204 	mvn.w	r2, #4
 8005b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fb fe41 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
 8005b36:	e005      	b.n	8005b44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fb2b 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fb32 	bl	80061a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d122      	bne.n	8005b9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d11b      	bne.n	8005b9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f06f 0208 	mvn.w	r2, #8
 8005b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2204      	movs	r2, #4
 8005b74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7fb fe17 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
 8005b8a:	e005      	b.n	8005b98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb01 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fb08 	bl	80061a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d122      	bne.n	8005bf2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0310 	and.w	r3, r3, #16
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d11b      	bne.n	8005bf2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f06f 0210 	mvn.w	r2, #16
 8005bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fb fded 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
 8005bde:	e005      	b.n	8005bec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fad7 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fade 	bl	80061a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d10e      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d107      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f06f 0201 	mvn.w	r2, #1
 8005c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fab1 	bl	8006180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c28:	2b80      	cmp	r3, #128	; 0x80
 8005c2a:	d10e      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b80      	cmp	r3, #128	; 0x80
 8005c38:	d107      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 ffd5 	bl	8006bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d10e      	bne.n	8005c76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d107      	bne.n	8005c76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 faa3 	bl	80061bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d10e      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d107      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f06f 0220 	mvn.w	r2, #32
 8005c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 ff9f 	bl	8006be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e088      	b.n	8005dda <HAL_TIM_IC_ConfigChannel+0x130>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d11b      	bne.n	8005d0e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6819      	ldr	r1, [r3, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f000 fcc3 	bl	8006670 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699a      	ldr	r2, [r3, #24]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 020c 	bic.w	r2, r2, #12
 8005cf8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6999      	ldr	r1, [r3, #24]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	619a      	str	r2, [r3, #24]
 8005d0c:	e060      	b.n	8005dd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d11c      	bne.n	8005d4e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6819      	ldr	r1, [r3, #0]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f000 fd47 	bl	80067b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d36:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6999      	ldr	r1, [r3, #24]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	021a      	lsls	r2, r3, #8
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	619a      	str	r2, [r3, #24]
 8005d4c:	e040      	b.n	8005dd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d11b      	bne.n	8005d8c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6819      	ldr	r1, [r3, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f000 fd94 	bl	8006890 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69da      	ldr	r2, [r3, #28]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 020c 	bic.w	r2, r2, #12
 8005d76:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69d9      	ldr	r1, [r3, #28]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	61da      	str	r2, [r3, #28]
 8005d8a:	e021      	b.n	8005dd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d11c      	bne.n	8005dcc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6819      	ldr	r1, [r3, #0]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f000 fdb1 	bl	8006908 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005db4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69d9      	ldr	r1, [r3, #28]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	021a      	lsls	r2, r3, #8
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	61da      	str	r2, [r3, #28]
 8005dca:	e001      	b.n	8005dd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e0ae      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b0c      	cmp	r3, #12
 8005e0e:	f200 809f 	bhi.w	8005f50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e4d 	.word	0x08005e4d
 8005e1c:	08005f51 	.word	0x08005f51
 8005e20:	08005f51 	.word	0x08005f51
 8005e24:	08005f51 	.word	0x08005f51
 8005e28:	08005e8d 	.word	0x08005e8d
 8005e2c:	08005f51 	.word	0x08005f51
 8005e30:	08005f51 	.word	0x08005f51
 8005e34:	08005f51 	.word	0x08005f51
 8005e38:	08005ecf 	.word	0x08005ecf
 8005e3c:	08005f51 	.word	0x08005f51
 8005e40:	08005f51 	.word	0x08005f51
 8005e44:	08005f51 	.word	0x08005f51
 8005e48:	08005f0f 	.word	0x08005f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fa5c 	bl	8006310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0208 	orr.w	r2, r2, #8
 8005e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0204 	bic.w	r2, r2, #4
 8005e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6999      	ldr	r1, [r3, #24]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	619a      	str	r2, [r3, #24]
      break;
 8005e8a:	e064      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 faac 	bl	80063f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6999      	ldr	r1, [r3, #24]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	021a      	lsls	r2, r3, #8
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	619a      	str	r2, [r3, #24]
      break;
 8005ecc:	e043      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fb01 	bl	80064dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0208 	orr.w	r2, r2, #8
 8005ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0204 	bic.w	r2, r2, #4
 8005ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69d9      	ldr	r1, [r3, #28]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	61da      	str	r2, [r3, #28]
      break;
 8005f0c:	e023      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fb55 	bl	80065c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69d9      	ldr	r1, [r3, #28]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	021a      	lsls	r2, r3, #8
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	61da      	str	r2, [r3, #28]
      break;
 8005f4e:	e002      	b.n	8005f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	75fb      	strb	r3, [r7, #23]
      break;
 8005f54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_TIM_ConfigClockSource+0x1c>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e0b4      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x186>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fbc:	d03e      	beq.n	800603c <HAL_TIM_ConfigClockSource+0xd4>
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc2:	f200 8087 	bhi.w	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fca:	f000 8086 	beq.w	80060da <HAL_TIM_ConfigClockSource+0x172>
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd2:	d87f      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd4:	2b70      	cmp	r3, #112	; 0x70
 8005fd6:	d01a      	beq.n	800600e <HAL_TIM_ConfigClockSource+0xa6>
 8005fd8:	2b70      	cmp	r3, #112	; 0x70
 8005fda:	d87b      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fdc:	2b60      	cmp	r3, #96	; 0x60
 8005fde:	d050      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x11a>
 8005fe0:	2b60      	cmp	r3, #96	; 0x60
 8005fe2:	d877      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe4:	2b50      	cmp	r3, #80	; 0x50
 8005fe6:	d03c      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0xfa>
 8005fe8:	2b50      	cmp	r3, #80	; 0x50
 8005fea:	d873      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d058      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x13a>
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d86f      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b30      	cmp	r3, #48	; 0x30
 8005ff6:	d064      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ff8:	2b30      	cmp	r3, #48	; 0x30
 8005ffa:	d86b      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d060      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006000:	2b20      	cmp	r3, #32
 8006002:	d867      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d05c      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006008:	2b10      	cmp	r3, #16
 800600a:	d05a      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 800600c:	e062      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6899      	ldr	r1, [r3, #8]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f000 fccb 	bl	80069b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	609a      	str	r2, [r3, #8]
      break;
 800603a:	e04f      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	6899      	ldr	r1, [r3, #8]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f000 fcb4 	bl	80069b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800605e:	609a      	str	r2, [r3, #8]
      break;
 8006060:	e03c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6859      	ldr	r1, [r3, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	461a      	mov	r2, r3
 8006070:	f000 fb72 	bl	8006758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2150      	movs	r1, #80	; 0x50
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fc81 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 8006080:	e02c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6859      	ldr	r1, [r3, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	461a      	mov	r2, r3
 8006090:	f000 fbce 	bl	8006830 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2160      	movs	r1, #96	; 0x60
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fc71 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 80060a0:	e01c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6859      	ldr	r1, [r3, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f000 fb52 	bl	8006758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fc61 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 80060c0:	e00c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f000 fc58 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 80060d2:	e003      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
      break;
 80060d8:	e000      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b0c      	cmp	r3, #12
 800610a:	d831      	bhi.n	8006170 <HAL_TIM_ReadCapturedValue+0x78>
 800610c:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <HAL_TIM_ReadCapturedValue+0x1c>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	08006149 	.word	0x08006149
 8006118:	08006171 	.word	0x08006171
 800611c:	08006171 	.word	0x08006171
 8006120:	08006171 	.word	0x08006171
 8006124:	08006153 	.word	0x08006153
 8006128:	08006171 	.word	0x08006171
 800612c:	08006171 	.word	0x08006171
 8006130:	08006171 	.word	0x08006171
 8006134:	0800615d 	.word	0x0800615d
 8006138:	08006171 	.word	0x08006171
 800613c:	08006171 	.word	0x08006171
 8006140:	08006171 	.word	0x08006171
 8006144:	08006167 	.word	0x08006167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	60fb      	str	r3, [r7, #12]

      break;
 8006150:	e00f      	b.n	8006172 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	60fb      	str	r3, [r7, #12]

      break;
 800615a:	e00a      	b.n	8006172 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	60fb      	str	r3, [r7, #12]

      break;
 8006164:	e005      	b.n	8006172 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	60fb      	str	r3, [r7, #12]

      break;
 800616e:	e000      	b.n	8006172 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006170:	bf00      	nop
  }

  return tmpreg;
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a40      	ldr	r2, [pc, #256]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d013      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ee:	d00f      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a3d      	ldr	r2, [pc, #244]	; (80062e8 <TIM_Base_SetConfig+0x118>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00b      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a3c      	ldr	r2, [pc, #240]	; (80062ec <TIM_Base_SetConfig+0x11c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a3b      	ldr	r2, [pc, #236]	; (80062f0 <TIM_Base_SetConfig+0x120>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a3a      	ldr	r2, [pc, #232]	; (80062f4 <TIM_Base_SetConfig+0x124>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d108      	bne.n	8006222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2f      	ldr	r2, [pc, #188]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d02b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006230:	d027      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2c      	ldr	r2, [pc, #176]	; (80062e8 <TIM_Base_SetConfig+0x118>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d023      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2b      	ldr	r2, [pc, #172]	; (80062ec <TIM_Base_SetConfig+0x11c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01f      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2a      	ldr	r2, [pc, #168]	; (80062f0 <TIM_Base_SetConfig+0x120>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a29      	ldr	r2, [pc, #164]	; (80062f4 <TIM_Base_SetConfig+0x124>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d017      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a28      	ldr	r2, [pc, #160]	; (80062f8 <TIM_Base_SetConfig+0x128>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a27      	ldr	r2, [pc, #156]	; (80062fc <TIM_Base_SetConfig+0x12c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a26      	ldr	r2, [pc, #152]	; (8006300 <TIM_Base_SetConfig+0x130>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a25      	ldr	r2, [pc, #148]	; (8006304 <TIM_Base_SetConfig+0x134>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a24      	ldr	r2, [pc, #144]	; (8006308 <TIM_Base_SetConfig+0x138>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a23      	ldr	r2, [pc, #140]	; (800630c <TIM_Base_SetConfig+0x13c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d108      	bne.n	8006294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a0a      	ldr	r2, [pc, #40]	; (80062e4 <TIM_Base_SetConfig+0x114>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0xf8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <TIM_Base_SetConfig+0x124>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d103      	bne.n	80062d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	615a      	str	r2, [r3, #20]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40010400 	.word	0x40010400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800
 8006304:	40001800 	.word	0x40001800
 8006308:	40001c00 	.word	0x40001c00
 800630c:	40002000 	.word	0x40002000

08006310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f023 0302 	bic.w	r3, r3, #2
 8006358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a20      	ldr	r2, [pc, #128]	; (80063e8 <TIM_OC1_SetConfig+0xd8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_OC1_SetConfig+0x64>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a1f      	ldr	r2, [pc, #124]	; (80063ec <TIM_OC1_SetConfig+0xdc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d10c      	bne.n	800638e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 0308 	bic.w	r3, r3, #8
 800637a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0304 	bic.w	r3, r3, #4
 800638c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a15      	ldr	r2, [pc, #84]	; (80063e8 <TIM_OC1_SetConfig+0xd8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_OC1_SetConfig+0x8e>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a14      	ldr	r2, [pc, #80]	; (80063ec <TIM_OC1_SetConfig+0xdc>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d111      	bne.n	80063c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	621a      	str	r2, [r3, #32]
}
 80063dc:	bf00      	nop
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010400 	.word	0x40010400

080063f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f023 0210 	bic.w	r2, r3, #16
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0320 	bic.w	r3, r3, #32
 800643a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <TIM_OC2_SetConfig+0xe4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC2_SetConfig+0x68>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <TIM_OC2_SetConfig+0xe8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d10d      	bne.n	8006474 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800645e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a17      	ldr	r2, [pc, #92]	; (80064d4 <TIM_OC2_SetConfig+0xe4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_OC2_SetConfig+0x94>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <TIM_OC2_SetConfig+0xe8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d113      	bne.n	80064ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800648a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	621a      	str	r2, [r3, #32]
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40010400 	.word	0x40010400

080064dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0303 	bic.w	r3, r3, #3
 8006512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a21      	ldr	r2, [pc, #132]	; (80065bc <TIM_OC3_SetConfig+0xe0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d003      	beq.n	8006542 <TIM_OC3_SetConfig+0x66>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a20      	ldr	r2, [pc, #128]	; (80065c0 <TIM_OC3_SetConfig+0xe4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d10d      	bne.n	800655e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800655c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a16      	ldr	r2, [pc, #88]	; (80065bc <TIM_OC3_SetConfig+0xe0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d003      	beq.n	800656e <TIM_OC3_SetConfig+0x92>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <TIM_OC3_SetConfig+0xe4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d113      	bne.n	8006596 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800657c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	621a      	str	r2, [r3, #32]
}
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	40010000 	.word	0x40010000
 80065c0:	40010400 	.word	0x40010400

080065c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800660e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	031b      	lsls	r3, r3, #12
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a12      	ldr	r2, [pc, #72]	; (8006668 <TIM_OC4_SetConfig+0xa4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_OC4_SetConfig+0x68>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a11      	ldr	r2, [pc, #68]	; (800666c <TIM_OC4_SetConfig+0xa8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d109      	bne.n	8006640 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	019b      	lsls	r3, r3, #6
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400

08006670 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a28      	ldr	r2, [pc, #160]	; (800673c <TIM_TI1_SetConfig+0xcc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01b      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a4:	d017      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4a25      	ldr	r2, [pc, #148]	; (8006740 <TIM_TI1_SetConfig+0xd0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4a24      	ldr	r2, [pc, #144]	; (8006744 <TIM_TI1_SetConfig+0xd4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00f      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4a23      	ldr	r2, [pc, #140]	; (8006748 <TIM_TI1_SetConfig+0xd8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00b      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4a22      	ldr	r2, [pc, #136]	; (800674c <TIM_TI1_SetConfig+0xdc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d007      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4a21      	ldr	r2, [pc, #132]	; (8006750 <TIM_TI1_SetConfig+0xe0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4a20      	ldr	r2, [pc, #128]	; (8006754 <TIM_TI1_SetConfig+0xe4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d101      	bne.n	80066da <TIM_TI1_SetConfig+0x6a>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <TIM_TI1_SetConfig+0x6c>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d008      	beq.n	80066f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e003      	b.n	80066fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f043 0301 	orr.w	r3, r3, #1
 80066f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	b2db      	uxtb	r3, r3
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f023 030a 	bic.w	r3, r3, #10
 8006714:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f003 030a 	and.w	r3, r3, #10
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	4313      	orrs	r3, r2
 8006720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40010000 	.word	0x40010000
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800
 8006748:	40000c00 	.word	0x40000c00
 800674c:	40010400 	.word	0x40010400
 8006750:	40014000 	.word	0x40014000
 8006754:	40001800 	.word	0x40001800

08006758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	f023 0201 	bic.w	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f023 030a 	bic.w	r3, r3, #10
 8006794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	621a      	str	r2, [r3, #32]
}
 80067aa:	bf00      	nop
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b087      	sub	sp, #28
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	f023 0210 	bic.w	r2, r3, #16
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	031b      	lsls	r3, r3, #12
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006808:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	621a      	str	r2, [r3, #32]
}
 8006824:	bf00      	nop
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	f023 0210 	bic.w	r2, r3, #16
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800685a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	031b      	lsls	r3, r3, #12
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800686c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	621a      	str	r2, [r3, #32]
}
 8006884:	bf00      	nop
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f023 0303 	bic.w	r3, r3, #3
 80068bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80068e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	621a      	str	r2, [r3, #32]
}
 80068fc:	bf00      	nop
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006934:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006946:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	031b      	lsls	r3, r3, #12
 800694c:	b29b      	uxth	r3, r3
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800695a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	031b      	lsls	r3, r3, #12
 8006960:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	f043 0307 	orr.w	r3, r3, #7
 80069a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	609a      	str	r2, [r3, #8]
}
 80069ac:	bf00      	nop
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	021a      	lsls	r2, r3, #8
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	431a      	orrs	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4313      	orrs	r3, r2
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1a      	ldr	r2, [r3, #32]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	401a      	ands	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1a      	ldr	r2, [r3, #32]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f003 031f 	and.w	r3, r3, #31
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a30:	431a      	orrs	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
	...

08006a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e05a      	b.n	8006b12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a21      	ldr	r2, [pc, #132]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d022      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa8:	d01d      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d018      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1b      	ldr	r2, [pc, #108]	; (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1a      	ldr	r2, [pc, #104]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00e      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a18      	ldr	r2, [pc, #96]	; (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d009      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a17      	ldr	r2, [pc, #92]	; (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d004      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d10c      	bne.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40010000 	.word	0x40010000
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40000c00 	.word	0x40000c00
 8006b30:	40010400 	.word	0x40010400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40001800 	.word	0x40001800

08006b3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e03d      	b.n	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e03f      	b.n	8006c9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fc f8d0 	bl	8002dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2224      	movs	r2, #36	; 0x24
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fddf 	bl	8007810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	695a      	ldr	r2, [r3, #20]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b08a      	sub	sp, #40	; 0x28
 8006ca6:	af02      	add	r7, sp, #8
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	603b      	str	r3, [r7, #0]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	d17c      	bne.n	8006dbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <HAL_UART_Transmit+0x2c>
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e075      	b.n	8006dbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_UART_Transmit+0x3e>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e06e      	b.n	8006dbe <HAL_UART_Transmit+0x11c>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2221      	movs	r2, #33	; 0x21
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cf6:	f7fc fc23 	bl	8003540 <HAL_GetTick>
 8006cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	88fa      	ldrh	r2, [r7, #6]
 8006d06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d10:	d108      	bne.n	8006d24 <HAL_UART_Transmit+0x82>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e003      	b.n	8006d2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d34:	e02a      	b.n	8006d8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2180      	movs	r1, #128	; 0x80
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 fb1f 	bl	8007384 <UART_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e036      	b.n	8006dbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10b      	bne.n	8006d6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	3302      	adds	r3, #2
 8006d6a:	61bb      	str	r3, [r7, #24]
 8006d6c:	e007      	b.n	8006d7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	781a      	ldrb	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1cf      	bne.n	8006d36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2140      	movs	r1, #64	; 0x40
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 faef 	bl	8007384 <UART_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e006      	b.n	8006dbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e000      	b.n	8006dbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
  }
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d11d      	bne.n	8006e1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <HAL_UART_Receive_IT+0x26>
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e016      	b.n	8006e1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_UART_Receive_IT+0x38>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e00f      	b.n	8006e1e <HAL_UART_Receive_IT+0x58>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 fb24 	bl	8007460 <UART_Start_Receive_IT>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	e000      	b.n	8006e1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006e1c:	2302      	movs	r3, #2
  }
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b0ba      	sub	sp, #232	; 0xe8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10f      	bne.n	8006e8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <HAL_UART_IRQHandler+0x66>
 8006e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fc07 	bl	800769a <UART_Receive_IT>
      return;
 8006e8c:	e256      	b.n	800733c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80de 	beq.w	8007054 <HAL_UART_IRQHandler+0x22c>
 8006e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d106      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80d1 	beq.w	8007054 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xae>
 8006ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f043 0201 	orr.w	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <HAL_UART_IRQHandler+0xd2>
 8006ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	f043 0202 	orr.w	r2, r3, #2
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00b      	beq.n	8006f1e <HAL_UART_IRQHandler+0xf6>
 8006f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	f043 0204 	orr.w	r2, r3, #4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d011      	beq.n	8006f4e <HAL_UART_IRQHandler+0x126>
 8006f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d105      	bne.n	8006f42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	f043 0208 	orr.w	r2, r3, #8
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 81ed 	beq.w	8007332 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d008      	beq.n	8006f76 <HAL_UART_IRQHandler+0x14e>
 8006f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fb92 	bl	800769a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	bf0c      	ite	eq
 8006f84:	2301      	moveq	r3, #1
 8006f86:	2300      	movne	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d103      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x17a>
 8006f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d04f      	beq.n	8007042 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa9a 	bl	80074dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	d141      	bne.n	800703a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3314      	adds	r3, #20
 8006fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3314      	adds	r3, #20
 8006fde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1d9      	bne.n	8006fb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	2b00      	cmp	r3, #0
 8007008:	d013      	beq.n	8007032 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	4a7d      	ldr	r2, [pc, #500]	; (8007204 <HAL_UART_IRQHandler+0x3dc>)
 8007010:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	4618      	mov	r0, r3
 8007018:	f7fc fc43 	bl	80038a2 <HAL_DMA_Abort_IT>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d016      	beq.n	8007050 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007030:	e00e      	b.n	8007050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f990 	bl	8007358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007038:	e00a      	b.n	8007050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f98c 	bl	8007358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007040:	e006      	b.n	8007050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f988 	bl	8007358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800704e:	e170      	b.n	8007332 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007050:	bf00      	nop
    return;
 8007052:	e16e      	b.n	8007332 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	2b01      	cmp	r3, #1
 800705a:	f040 814a 	bne.w	80072f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800705e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007062:	f003 0310 	and.w	r3, r3, #16
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8143 	beq.w	80072f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 813c 	beq.w	80072f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800707a:	2300      	movs	r3, #0
 800707c:	60bb      	str	r3, [r7, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	60bb      	str	r3, [r7, #8]
 800708e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709a:	2b40      	cmp	r3, #64	; 0x40
 800709c:	f040 80b4 	bne.w	8007208 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8140 	beq.w	8007336 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070be:	429a      	cmp	r2, r3
 80070c0:	f080 8139 	bcs.w	8007336 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d6:	f000 8088 	beq.w	80071ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	330c      	adds	r3, #12
 8007102:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800710a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800711e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1d9      	bne.n	80070da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3314      	adds	r3, #20
 800712c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3314      	adds	r3, #20
 8007146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800714a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800714e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800715c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e1      	bne.n	8007126 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3314      	adds	r3, #20
 8007168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3314      	adds	r3, #20
 8007182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800718c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e3      	bne.n	8007162 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	330c      	adds	r3, #12
 80071ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ba:	f023 0310 	bic.w	r3, r3, #16
 80071be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	330c      	adds	r3, #12
 80071c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80071cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80071ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e3      	bne.n	80071a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fc faec 	bl	80037c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f8b6 	bl	800736c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007200:	e099      	b.n	8007336 <HAL_UART_IRQHandler+0x50e>
 8007202:	bf00      	nop
 8007204:	080075a3 	.word	0x080075a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007210:	b29b      	uxth	r3, r3
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800721c:	b29b      	uxth	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 808b 	beq.w	800733a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8086 	beq.w	800733a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	330c      	adds	r3, #12
 8007234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800723e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	330c      	adds	r3, #12
 800724e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007252:	647a      	str	r2, [r7, #68]	; 0x44
 8007254:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e3      	bne.n	800722e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3314      	adds	r3, #20
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	623b      	str	r3, [r7, #32]
   return(result);
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	f023 0301 	bic.w	r3, r3, #1
 800727c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3314      	adds	r3, #20
 8007286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800728a:	633a      	str	r2, [r7, #48]	; 0x30
 800728c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e3      	bne.n	8007266 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0310 	bic.w	r3, r3, #16
 80072c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	330c      	adds	r3, #12
 80072cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80072d0:	61fa      	str	r2, [r7, #28]
 80072d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	69b9      	ldr	r1, [r7, #24]
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	617b      	str	r3, [r7, #20]
   return(result);
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e3      	bne.n	80072ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f83e 	bl	800736c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072f0:	e023      	b.n	800733a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <HAL_UART_IRQHandler+0x4ea>
 80072fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f95d 	bl	80075ca <UART_Transmit_IT>
    return;
 8007310:	e014      	b.n	800733c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00e      	beq.n	800733c <HAL_UART_IRQHandler+0x514>
 800731e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f99d 	bl	800766a <UART_EndTransmit_IT>
    return;
 8007330:	e004      	b.n	800733c <HAL_UART_IRQHandler+0x514>
    return;
 8007332:	bf00      	nop
 8007334:	e002      	b.n	800733c <HAL_UART_IRQHandler+0x514>
      return;
 8007336:	bf00      	nop
 8007338:	e000      	b.n	800733c <HAL_UART_IRQHandler+0x514>
      return;
 800733a:	bf00      	nop
  }
}
 800733c:	37e8      	adds	r7, #232	; 0xe8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop

08007344 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b090      	sub	sp, #64	; 0x40
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	4613      	mov	r3, r2
 8007392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007394:	e050      	b.n	8007438 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739c:	d04c      	beq.n	8007438 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800739e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d007      	beq.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80073a4:	f7fc f8cc 	bl	8003540 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d241      	bcs.n	8007438 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	330c      	adds	r3, #12
 80073d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073d4:	637a      	str	r2, [r7, #52]	; 0x34
 80073d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e5      	bne.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3314      	adds	r3, #20
 80073ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	613b      	str	r3, [r7, #16]
   return(result);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3314      	adds	r3, #20
 8007406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007408:	623a      	str	r2, [r7, #32]
 800740a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	69f9      	ldr	r1, [r7, #28]
 800740e:	6a3a      	ldr	r2, [r7, #32]
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	61bb      	str	r3, [r7, #24]
   return(result);
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e5      	bne.n	80073e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e00f      	b.n	8007458 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4013      	ands	r3, r2
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	429a      	cmp	r2, r3
 8007446:	bf0c      	ite	eq
 8007448:	2301      	moveq	r3, #1
 800744a:	2300      	movne	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	429a      	cmp	r2, r3
 8007454:	d09f      	beq.n	8007396 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3740      	adds	r7, #64	; 0x40
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	88fa      	ldrh	r2, [r7, #6]
 8007478:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	88fa      	ldrh	r2, [r7, #6]
 800747e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2222      	movs	r2, #34	; 0x22
 800748a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d007      	beq.n	80074ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695a      	ldr	r2, [r3, #20]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0201 	orr.w	r2, r2, #1
 80074bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0220 	orr.w	r2, r2, #32
 80074cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074dc:	b480      	push	{r7}
 80074de:	b095      	sub	sp, #84	; 0x54
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	330c      	adds	r3, #12
 8007502:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007504:	643a      	str	r2, [r7, #64]	; 0x40
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800750a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e5      	bne.n	80074e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3314      	adds	r3, #20
 800751e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	61fb      	str	r3, [r7, #28]
   return(result);
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	f023 0301 	bic.w	r3, r3, #1
 800752e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3314      	adds	r3, #20
 8007536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007538:	62fa      	str	r2, [r7, #44]	; 0x2c
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800753e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e5      	bne.n	8007518 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	2b01      	cmp	r3, #1
 8007552:	d119      	bne.n	8007588 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	60bb      	str	r3, [r7, #8]
   return(result);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f023 0310 	bic.w	r3, r3, #16
 800756a:	647b      	str	r3, [r7, #68]	; 0x44
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	330c      	adds	r3, #12
 8007572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007574:	61ba      	str	r2, [r7, #24]
 8007576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	6979      	ldr	r1, [r7, #20]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	613b      	str	r3, [r7, #16]
   return(result);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e5      	bne.n	8007554 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007596:	bf00      	nop
 8007598:	3754      	adds	r7, #84	; 0x54
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff fecb 	bl	8007358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075c2:	bf00      	nop
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b085      	sub	sp, #20
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b21      	cmp	r3, #33	; 0x21
 80075dc:	d13e      	bne.n	800765c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e6:	d114      	bne.n	8007612 <UART_Transmit_IT+0x48>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d110      	bne.n	8007612 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007604:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	1c9a      	adds	r2, r3, #2
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	621a      	str	r2, [r3, #32]
 8007610:	e008      	b.n	8007624 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	1c59      	adds	r1, r3, #1
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6211      	str	r1, [r2, #32]
 800761c:	781a      	ldrb	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29b      	uxth	r3, r3
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	4619      	mov	r1, r3
 8007632:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10f      	bne.n	8007658 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007646:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007656:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	e000      	b.n	800765e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800765c:	2302      	movs	r3, #2
  }
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007680:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff fe5a 	bl	8007344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b08c      	sub	sp, #48	; 0x30
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b22      	cmp	r3, #34	; 0x22
 80076ac:	f040 80ab 	bne.w	8007806 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b8:	d117      	bne.n	80076ea <UART_Receive_IT+0x50>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d113      	bne.n	80076ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d8:	b29a      	uxth	r2, r3
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	1c9a      	adds	r2, r3, #2
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	629a      	str	r2, [r3, #40]	; 0x28
 80076e8:	e026      	b.n	8007738 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fc:	d007      	beq.n	800770e <UART_Receive_IT+0x74>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <UART_Receive_IT+0x82>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	b2da      	uxtb	r2, r3
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	e008      	b.n	800772e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007728:	b2da      	uxtb	r2, r3
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29b      	uxth	r3, r3
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	4619      	mov	r1, r3
 8007746:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007748:	2b00      	cmp	r3, #0
 800774a:	d15a      	bne.n	8007802 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0220 	bic.w	r2, r2, #32
 800775a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68da      	ldr	r2, [r3, #12]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800776a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	2b01      	cmp	r3, #1
 800778a:	d135      	bne.n	80077f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	330c      	adds	r3, #12
 8007798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	613b      	str	r3, [r7, #16]
   return(result);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f023 0310 	bic.w	r3, r3, #16
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	330c      	adds	r3, #12
 80077b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b2:	623a      	str	r2, [r7, #32]
 80077b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	69f9      	ldr	r1, [r7, #28]
 80077b8:	6a3a      	ldr	r2, [r7, #32]
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e5      	bne.n	8007792 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	d10a      	bne.n	80077ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff fdbb 	bl	800736c <HAL_UARTEx_RxEventCallback>
 80077f6:	e002      	b.n	80077fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7f9 ffc9 	bl	8001790 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	e002      	b.n	8007808 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	e000      	b.n	8007808 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007806:	2302      	movs	r3, #2
  }
}
 8007808:	4618      	mov	r0, r3
 800780a:	3730      	adds	r7, #48	; 0x30
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007814:	b0c0      	sub	sp, #256	; 0x100
 8007816:	af00      	add	r7, sp, #0
 8007818:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800781c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782c:	68d9      	ldr	r1, [r3, #12]
 800782e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	ea40 0301 	orr.w	r3, r0, r1
 8007838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800783a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	431a      	orrs	r2, r3
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	431a      	orrs	r2, r3
 8007850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007868:	f021 010c 	bic.w	r1, r1, #12
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007876:	430b      	orrs	r3, r1
 8007878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800787a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788a:	6999      	ldr	r1, [r3, #24]
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	ea40 0301 	orr.w	r3, r0, r1
 8007896:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b8f      	ldr	r3, [pc, #572]	; (8007adc <UART_SetConfig+0x2cc>)
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d005      	beq.n	80078b0 <UART_SetConfig+0xa0>
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4b8d      	ldr	r3, [pc, #564]	; (8007ae0 <UART_SetConfig+0x2d0>)
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d104      	bne.n	80078ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078b0:	f7fd fdec 	bl	800548c <HAL_RCC_GetPCLK2Freq>
 80078b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80078b8:	e003      	b.n	80078c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078ba:	f7fd fdd3 	bl	8005464 <HAL_RCC_GetPCLK1Freq>
 80078be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078cc:	f040 810c 	bne.w	8007ae8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80078de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80078e2:	4622      	mov	r2, r4
 80078e4:	462b      	mov	r3, r5
 80078e6:	1891      	adds	r1, r2, r2
 80078e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80078ea:	415b      	adcs	r3, r3
 80078ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80078f2:	4621      	mov	r1, r4
 80078f4:	eb12 0801 	adds.w	r8, r2, r1
 80078f8:	4629      	mov	r1, r5
 80078fa:	eb43 0901 	adc.w	r9, r3, r1
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	f04f 0300 	mov.w	r3, #0
 8007906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800790a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800790e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007912:	4690      	mov	r8, r2
 8007914:	4699      	mov	r9, r3
 8007916:	4623      	mov	r3, r4
 8007918:	eb18 0303 	adds.w	r3, r8, r3
 800791c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007920:	462b      	mov	r3, r5
 8007922:	eb49 0303 	adc.w	r3, r9, r3
 8007926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800792a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007936:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800793a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800793e:	460b      	mov	r3, r1
 8007940:	18db      	adds	r3, r3, r3
 8007942:	653b      	str	r3, [r7, #80]	; 0x50
 8007944:	4613      	mov	r3, r2
 8007946:	eb42 0303 	adc.w	r3, r2, r3
 800794a:	657b      	str	r3, [r7, #84]	; 0x54
 800794c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007950:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007954:	f7f9 f92a 	bl	8000bac <__aeabi_uldivmod>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4b61      	ldr	r3, [pc, #388]	; (8007ae4 <UART_SetConfig+0x2d4>)
 800795e:	fba3 2302 	umull	r2, r3, r3, r2
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	011c      	lsls	r4, r3, #4
 8007966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800796a:	2200      	movs	r2, #0
 800796c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007970:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007974:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007978:	4642      	mov	r2, r8
 800797a:	464b      	mov	r3, r9
 800797c:	1891      	adds	r1, r2, r2
 800797e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007980:	415b      	adcs	r3, r3
 8007982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007988:	4641      	mov	r1, r8
 800798a:	eb12 0a01 	adds.w	sl, r2, r1
 800798e:	4649      	mov	r1, r9
 8007990:	eb43 0b01 	adc.w	fp, r3, r1
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079a8:	4692      	mov	sl, r2
 80079aa:	469b      	mov	fp, r3
 80079ac:	4643      	mov	r3, r8
 80079ae:	eb1a 0303 	adds.w	r3, sl, r3
 80079b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079b6:	464b      	mov	r3, r9
 80079b8:	eb4b 0303 	adc.w	r3, fp, r3
 80079bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80079d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80079d4:	460b      	mov	r3, r1
 80079d6:	18db      	adds	r3, r3, r3
 80079d8:	643b      	str	r3, [r7, #64]	; 0x40
 80079da:	4613      	mov	r3, r2
 80079dc:	eb42 0303 	adc.w	r3, r2, r3
 80079e0:	647b      	str	r3, [r7, #68]	; 0x44
 80079e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80079ea:	f7f9 f8df 	bl	8000bac <__aeabi_uldivmod>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	4b3b      	ldr	r3, [pc, #236]	; (8007ae4 <UART_SetConfig+0x2d4>)
 80079f6:	fba3 2301 	umull	r2, r3, r3, r1
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	2264      	movs	r2, #100	; 0x64
 80079fe:	fb02 f303 	mul.w	r3, r2, r3
 8007a02:	1acb      	subs	r3, r1, r3
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a0a:	4b36      	ldr	r3, [pc, #216]	; (8007ae4 <UART_SetConfig+0x2d4>)
 8007a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a10:	095b      	lsrs	r3, r3, #5
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a18:	441c      	add	r4, r3
 8007a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	464b      	mov	r3, r9
 8007a30:	1891      	adds	r1, r2, r2
 8007a32:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a34:	415b      	adcs	r3, r3
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	1851      	adds	r1, r2, r1
 8007a40:	6339      	str	r1, [r7, #48]	; 0x30
 8007a42:	4649      	mov	r1, r9
 8007a44:	414b      	adcs	r3, r1
 8007a46:	637b      	str	r3, [r7, #52]	; 0x34
 8007a48:	f04f 0200 	mov.w	r2, #0
 8007a4c:	f04f 0300 	mov.w	r3, #0
 8007a50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a54:	4659      	mov	r1, fp
 8007a56:	00cb      	lsls	r3, r1, #3
 8007a58:	4651      	mov	r1, sl
 8007a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a5e:	4651      	mov	r1, sl
 8007a60:	00ca      	lsls	r2, r1, #3
 8007a62:	4610      	mov	r0, r2
 8007a64:	4619      	mov	r1, r3
 8007a66:	4603      	mov	r3, r0
 8007a68:	4642      	mov	r2, r8
 8007a6a:	189b      	adds	r3, r3, r2
 8007a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a70:	464b      	mov	r3, r9
 8007a72:	460a      	mov	r2, r1
 8007a74:	eb42 0303 	adc.w	r3, r2, r3
 8007a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a90:	460b      	mov	r3, r1
 8007a92:	18db      	adds	r3, r3, r3
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a96:	4613      	mov	r3, r2
 8007a98:	eb42 0303 	adc.w	r3, r2, r3
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007aa6:	f7f9 f881 	bl	8000bac <__aeabi_uldivmod>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4b0d      	ldr	r3, [pc, #52]	; (8007ae4 <UART_SetConfig+0x2d4>)
 8007ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab4:	095b      	lsrs	r3, r3, #5
 8007ab6:	2164      	movs	r1, #100	; 0x64
 8007ab8:	fb01 f303 	mul.w	r3, r1, r3
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	3332      	adds	r3, #50	; 0x32
 8007ac2:	4a08      	ldr	r2, [pc, #32]	; (8007ae4 <UART_SetConfig+0x2d4>)
 8007ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac8:	095b      	lsrs	r3, r3, #5
 8007aca:	f003 0207 	and.w	r2, r3, #7
 8007ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4422      	add	r2, r4
 8007ad6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ad8:	e106      	b.n	8007ce8 <UART_SetConfig+0x4d8>
 8007ada:	bf00      	nop
 8007adc:	40011000 	.word	0x40011000
 8007ae0:	40011400 	.word	0x40011400
 8007ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007af2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007afa:	4642      	mov	r2, r8
 8007afc:	464b      	mov	r3, r9
 8007afe:	1891      	adds	r1, r2, r2
 8007b00:	6239      	str	r1, [r7, #32]
 8007b02:	415b      	adcs	r3, r3
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
 8007b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	1854      	adds	r4, r2, r1
 8007b0e:	4649      	mov	r1, r9
 8007b10:	eb43 0501 	adc.w	r5, r3, r1
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	f04f 0300 	mov.w	r3, #0
 8007b1c:	00eb      	lsls	r3, r5, #3
 8007b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b22:	00e2      	lsls	r2, r4, #3
 8007b24:	4614      	mov	r4, r2
 8007b26:	461d      	mov	r5, r3
 8007b28:	4643      	mov	r3, r8
 8007b2a:	18e3      	adds	r3, r4, r3
 8007b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b30:	464b      	mov	r3, r9
 8007b32:	eb45 0303 	adc.w	r3, r5, r3
 8007b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b56:	4629      	mov	r1, r5
 8007b58:	008b      	lsls	r3, r1, #2
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b60:	4621      	mov	r1, r4
 8007b62:	008a      	lsls	r2, r1, #2
 8007b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b68:	f7f9 f820 	bl	8000bac <__aeabi_uldivmod>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4b60      	ldr	r3, [pc, #384]	; (8007cf4 <UART_SetConfig+0x4e4>)
 8007b72:	fba3 2302 	umull	r2, r3, r3, r2
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	011c      	lsls	r4, r3, #4
 8007b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	464b      	mov	r3, r9
 8007b90:	1891      	adds	r1, r2, r2
 8007b92:	61b9      	str	r1, [r7, #24]
 8007b94:	415b      	adcs	r3, r3
 8007b96:	61fb      	str	r3, [r7, #28]
 8007b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b9c:	4641      	mov	r1, r8
 8007b9e:	1851      	adds	r1, r2, r1
 8007ba0:	6139      	str	r1, [r7, #16]
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	414b      	adcs	r3, r1
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	00cb      	lsls	r3, r1, #3
 8007bb8:	4651      	mov	r1, sl
 8007bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bbe:	4651      	mov	r1, sl
 8007bc0:	00ca      	lsls	r2, r1, #3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4642      	mov	r2, r8
 8007bca:	189b      	adds	r3, r3, r2
 8007bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	460a      	mov	r2, r1
 8007bd4:	eb42 0303 	adc.w	r3, r2, r3
 8007bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007be6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	008b      	lsls	r3, r1, #2
 8007bf8:	4641      	mov	r1, r8
 8007bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bfe:	4641      	mov	r1, r8
 8007c00:	008a      	lsls	r2, r1, #2
 8007c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c06:	f7f8 ffd1 	bl	8000bac <__aeabi_uldivmod>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	4b38      	ldr	r3, [pc, #224]	; (8007cf4 <UART_SetConfig+0x4e4>)
 8007c12:	fba3 2301 	umull	r2, r3, r3, r1
 8007c16:	095b      	lsrs	r3, r3, #5
 8007c18:	2264      	movs	r2, #100	; 0x64
 8007c1a:	fb02 f303 	mul.w	r3, r2, r3
 8007c1e:	1acb      	subs	r3, r1, r3
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	3332      	adds	r3, #50	; 0x32
 8007c24:	4a33      	ldr	r2, [pc, #204]	; (8007cf4 <UART_SetConfig+0x4e4>)
 8007c26:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2a:	095b      	lsrs	r3, r3, #5
 8007c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c30:	441c      	add	r4, r3
 8007c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c36:	2200      	movs	r2, #0
 8007c38:	673b      	str	r3, [r7, #112]	; 0x70
 8007c3a:	677a      	str	r2, [r7, #116]	; 0x74
 8007c3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c40:	4642      	mov	r2, r8
 8007c42:	464b      	mov	r3, r9
 8007c44:	1891      	adds	r1, r2, r2
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	415b      	adcs	r3, r3
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c50:	4641      	mov	r1, r8
 8007c52:	1851      	adds	r1, r2, r1
 8007c54:	6039      	str	r1, [r7, #0]
 8007c56:	4649      	mov	r1, r9
 8007c58:	414b      	adcs	r3, r1
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c68:	4659      	mov	r1, fp
 8007c6a:	00cb      	lsls	r3, r1, #3
 8007c6c:	4651      	mov	r1, sl
 8007c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c72:	4651      	mov	r1, sl
 8007c74:	00ca      	lsls	r2, r1, #3
 8007c76:	4610      	mov	r0, r2
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	4642      	mov	r2, r8
 8007c7e:	189b      	adds	r3, r3, r2
 8007c80:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c82:	464b      	mov	r3, r9
 8007c84:	460a      	mov	r2, r1
 8007c86:	eb42 0303 	adc.w	r3, r2, r3
 8007c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	663b      	str	r3, [r7, #96]	; 0x60
 8007c96:	667a      	str	r2, [r7, #100]	; 0x64
 8007c98:	f04f 0200 	mov.w	r2, #0
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	008b      	lsls	r3, r1, #2
 8007ca8:	4641      	mov	r1, r8
 8007caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cae:	4641      	mov	r1, r8
 8007cb0:	008a      	lsls	r2, r1, #2
 8007cb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007cb6:	f7f8 ff79 	bl	8000bac <__aeabi_uldivmod>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <UART_SetConfig+0x4e4>)
 8007cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc4:	095b      	lsrs	r3, r3, #5
 8007cc6:	2164      	movs	r1, #100	; 0x64
 8007cc8:	fb01 f303 	mul.w	r3, r1, r3
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	011b      	lsls	r3, r3, #4
 8007cd0:	3332      	adds	r3, #50	; 0x32
 8007cd2:	4a08      	ldr	r2, [pc, #32]	; (8007cf4 <UART_SetConfig+0x4e4>)
 8007cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd8:	095b      	lsrs	r3, r3, #5
 8007cda:	f003 020f 	and.w	r2, r3, #15
 8007cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4422      	add	r2, r4
 8007ce6:	609a      	str	r2, [r3, #8]
}
 8007ce8:	bf00      	nop
 8007cea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cf4:	51eb851f 	.word	0x51eb851f

08007cf8 <__NVIC_SetPriority>:
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	6039      	str	r1, [r7, #0]
 8007d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	db0a      	blt.n	8007d22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	490c      	ldr	r1, [pc, #48]	; (8007d44 <__NVIC_SetPriority+0x4c>)
 8007d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d16:	0112      	lsls	r2, r2, #4
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007d20:	e00a      	b.n	8007d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	4908      	ldr	r1, [pc, #32]	; (8007d48 <__NVIC_SetPriority+0x50>)
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	0112      	lsls	r2, r2, #4
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	440b      	add	r3, r1
 8007d36:	761a      	strb	r2, [r3, #24]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	e000e100 	.word	0xe000e100
 8007d48:	e000ed00 	.word	0xe000ed00

08007d4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d50:	2100      	movs	r1, #0
 8007d52:	f06f 0004 	mvn.w	r0, #4
 8007d56:	f7ff ffcf 	bl	8007cf8 <__NVIC_SetPriority>
#endif
}
 8007d5a:	bf00      	nop
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d66:	f3ef 8305 	mrs	r3, IPSR
 8007d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007d72:	f06f 0305 	mvn.w	r3, #5
 8007d76:	607b      	str	r3, [r7, #4]
 8007d78:	e00c      	b.n	8007d94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d7a:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <osKernelInitialize+0x44>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d105      	bne.n	8007d8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d82:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <osKernelInitialize+0x44>)
 8007d84:	2201      	movs	r2, #1
 8007d86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	607b      	str	r3, [r7, #4]
 8007d8c:	e002      	b.n	8007d94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d94:	687b      	ldr	r3, [r7, #4]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	2000071c 	.word	0x2000071c

08007da8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dae:	f3ef 8305 	mrs	r3, IPSR
 8007db2:	603b      	str	r3, [r7, #0]
  return(result);
 8007db4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007dba:	f06f 0305 	mvn.w	r3, #5
 8007dbe:	607b      	str	r3, [r7, #4]
 8007dc0:	e010      	b.n	8007de4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <osKernelStart+0x48>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d109      	bne.n	8007dde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007dca:	f7ff ffbf 	bl	8007d4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007dce:	4b08      	ldr	r3, [pc, #32]	; (8007df0 <osKernelStart+0x48>)
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007dd4:	f001 f87c 	bl	8008ed0 <vTaskStartScheduler>
      stat = osOK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	607b      	str	r3, [r7, #4]
 8007ddc:	e002      	b.n	8007de4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007dde:	f04f 33ff 	mov.w	r3, #4294967295
 8007de2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007de4:	687b      	ldr	r3, [r7, #4]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	2000071c 	.word	0x2000071c

08007df4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08e      	sub	sp, #56	; 0x38
 8007df8:	af04      	add	r7, sp, #16
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e04:	f3ef 8305 	mrs	r3, IPSR
 8007e08:	617b      	str	r3, [r7, #20]
  return(result);
 8007e0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d17e      	bne.n	8007f0e <osThreadNew+0x11a>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d07b      	beq.n	8007f0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e16:	2380      	movs	r3, #128	; 0x80
 8007e18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e1a:	2318      	movs	r3, #24
 8007e1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007e22:	f04f 33ff 	mov.w	r3, #4294967295
 8007e26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d045      	beq.n	8007eba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <osThreadNew+0x48>
        name = attr->name;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <osThreadNew+0x6e>
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	2b38      	cmp	r3, #56	; 0x38
 8007e54:	d805      	bhi.n	8007e62 <osThreadNew+0x6e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <osThreadNew+0x72>
        return (NULL);
 8007e62:	2300      	movs	r3, #0
 8007e64:	e054      	b.n	8007f10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	089b      	lsrs	r3, r3, #2
 8007e74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00e      	beq.n	8007e9c <osThreadNew+0xa8>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2ba7      	cmp	r3, #167	; 0xa7
 8007e84:	d90a      	bls.n	8007e9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d006      	beq.n	8007e9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <osThreadNew+0xa8>
        mem = 1;
 8007e96:	2301      	movs	r3, #1
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	e010      	b.n	8007ebe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10c      	bne.n	8007ebe <osThreadNew+0xca>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d108      	bne.n	8007ebe <osThreadNew+0xca>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d104      	bne.n	8007ebe <osThreadNew+0xca>
          mem = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61bb      	str	r3, [r7, #24]
 8007eb8:	e001      	b.n	8007ebe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d110      	bne.n	8007ee6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ecc:	9202      	str	r2, [sp, #8]
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	6a3a      	ldr	r2, [r7, #32]
 8007ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 fe0c 	bl	8008af8 <xTaskCreateStatic>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	613b      	str	r3, [r7, #16]
 8007ee4:	e013      	b.n	8007f0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d110      	bne.n	8007f0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	f107 0310 	add.w	r3, r7, #16
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fe57 	bl	8008bb2 <xTaskCreate>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d001      	beq.n	8007f0e <osThreadNew+0x11a>
            hTask = NULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f0e:	693b      	ldr	r3, [r7, #16]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3728      	adds	r7, #40	; 0x28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f20:	f3ef 8305 	mrs	r3, IPSR
 8007f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <osDelay+0x1c>
    stat = osErrorISR;
 8007f2c:	f06f 0305 	mvn.w	r3, #5
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	e007      	b.n	8007f44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 ff92 	bl	8008e68 <vTaskDelay>
    }
  }

  return (stat);
 8007f44:	68fb      	ldr	r3, [r7, #12]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4a07      	ldr	r2, [pc, #28]	; (8007f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8007f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	4a06      	ldr	r2, [pc, #24]	; (8007f80 <vApplicationGetIdleTaskMemory+0x30>)
 8007f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2280      	movs	r2, #128	; 0x80
 8007f6c:	601a      	str	r2, [r3, #0]
}
 8007f6e:	bf00      	nop
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20000720 	.word	0x20000720
 8007f80:	200007c8 	.word	0x200007c8

08007f84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4a07      	ldr	r2, [pc, #28]	; (8007fb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007f94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	4a06      	ldr	r2, [pc, #24]	; (8007fb4 <vApplicationGetTimerTaskMemory+0x30>)
 8007f9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	200009c8 	.word	0x200009c8
 8007fb4:	20000a70 	.word	0x20000a70

08007fb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f103 0208 	add.w	r2, r3, #8
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f103 0208 	add.w	r2, r3, #8
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f103 0208 	add.w	r2, r3, #8
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008012:	b480      	push	{r7}
 8008014:	b085      	sub	sp, #20
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	601a      	str	r2, [r3, #0]
}
 800804e:	bf00      	nop
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008070:	d103      	bne.n	800807a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	e00c      	b.n	8008094 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3308      	adds	r3, #8
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	e002      	b.n	8008088 <vListInsert+0x2e>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	429a      	cmp	r2, r3
 8008092:	d2f6      	bcs.n	8008082 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	601a      	str	r2, [r3, #0]
}
 80080c0:	bf00      	nop
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6892      	ldr	r2, [r2, #8]
 80080e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	6852      	ldr	r2, [r2, #4]
 80080ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d103      	bne.n	8008100 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	1e5a      	subs	r2, r3, #1
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800814a:	f002 f87b 	bl	800a244 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800815a:	fb01 f303 	mul.w	r3, r1, r3
 800815e:	441a      	add	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817a:	3b01      	subs	r3, #1
 800817c:	68f9      	ldr	r1, [r7, #12]
 800817e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008180:	fb01 f303 	mul.w	r3, r1, r3
 8008184:	441a      	add	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	22ff      	movs	r2, #255	; 0xff
 800818e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	22ff      	movs	r2, #255	; 0xff
 8008196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d114      	bne.n	80081ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d01a      	beq.n	80081de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3310      	adds	r3, #16
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 f929 	bl	8009404 <xTaskRemoveFromEventList>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d012      	beq.n	80081de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <xQueueGenericReset+0xcc>)
 80081ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	e009      	b.n	80081de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3310      	adds	r3, #16
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fef2 	bl	8007fb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3324      	adds	r3, #36	; 0x24
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff feed 	bl	8007fb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80081de:	f002 f861 	bl	800a2a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80081e2:	2301      	movs	r3, #1
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08e      	sub	sp, #56	; 0x38
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <xQueueGenericCreateStatic+0x52>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <xQueueGenericCreateStatic+0x56>
 8008242:	2301      	movs	r3, #1
 8008244:	e000      	b.n	8008248 <xQueueGenericCreateStatic+0x58>
 8008246:	2300      	movs	r3, #0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	623b      	str	r3, [r7, #32]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <xQueueGenericCreateStatic+0x7e>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <xQueueGenericCreateStatic+0x82>
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <xQueueGenericCreateStatic+0x84>
 8008272:	2300      	movs	r3, #0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	61fb      	str	r3, [r7, #28]
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800828e:	2350      	movs	r3, #80	; 0x50
 8008290:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b50      	cmp	r3, #80	; 0x50
 8008296:	d00a      	beq.n	80082ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	61bb      	str	r3, [r7, #24]
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00d      	beq.n	80082d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	4613      	mov	r3, r2
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 f805 	bl	80082e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80082d8:	4618      	mov	r0, r3
 80082da:	3730      	adds	r7, #48	; 0x30
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d103      	bne.n	80082fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e002      	b.n	8008302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800830e:	2101      	movs	r1, #1
 8008310:	69b8      	ldr	r0, [r7, #24]
 8008312:	f7ff ff05 	bl	8008120 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08e      	sub	sp, #56	; 0x38
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008336:	2300      	movs	r3, #0
 8008338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <xQueueGenericSend+0x32>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008356:	bf00      	nop
 8008358:	e7fe      	b.n	8008358 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d103      	bne.n	8008368 <xQueueGenericSend+0x40>
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <xQueueGenericSend+0x44>
 8008368:	2301      	movs	r3, #1
 800836a:	e000      	b.n	800836e <xQueueGenericSend+0x46>
 800836c:	2300      	movs	r3, #0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <xQueueGenericSend+0x60>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d103      	bne.n	8008396 <xQueueGenericSend+0x6e>
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <xQueueGenericSend+0x72>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <xQueueGenericSend+0x74>
 800839a:	2300      	movs	r3, #0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	623b      	str	r3, [r7, #32]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083b6:	f001 f9e7 	bl	8009788 <xTaskGetSchedulerState>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <xQueueGenericSend+0x9e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <xQueueGenericSend+0xa2>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e000      	b.n	80083cc <xQueueGenericSend+0xa4>
 80083ca:	2300      	movs	r3, #0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	61fb      	str	r3, [r7, #28]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083e6:	f001 ff2d 	bl	800a244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d302      	bcc.n	80083fc <xQueueGenericSend+0xd4>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d129      	bne.n	8008450 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008402:	f000 fa0b 	bl	800881c <prvCopyDataToQueue>
 8008406:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	d010      	beq.n	8008432 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	3324      	adds	r3, #36	; 0x24
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fff5 	bl	8009404 <xTaskRemoveFromEventList>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d013      	beq.n	8008448 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008420:	4b3f      	ldr	r3, [pc, #252]	; (8008520 <xQueueGenericSend+0x1f8>)
 8008422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	e00a      	b.n	8008448 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008438:	4b39      	ldr	r3, [pc, #228]	; (8008520 <xQueueGenericSend+0x1f8>)
 800843a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008448:	f001 ff2c 	bl	800a2a4 <vPortExitCritical>
				return pdPASS;
 800844c:	2301      	movs	r3, #1
 800844e:	e063      	b.n	8008518 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d103      	bne.n	800845e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008456:	f001 ff25 	bl	800a2a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800845a:	2300      	movs	r3, #0
 800845c:	e05c      	b.n	8008518 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800845e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008460:	2b00      	cmp	r3, #0
 8008462:	d106      	bne.n	8008472 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008464:	f107 0314 	add.w	r3, r7, #20
 8008468:	4618      	mov	r0, r3
 800846a:	f001 f82f 	bl	80094cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800846e:	2301      	movs	r3, #1
 8008470:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008472:	f001 ff17 	bl	800a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008476:	f000 fd9b 	bl	8008fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800847a:	f001 fee3 	bl	800a244 <vPortEnterCritical>
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008484:	b25b      	sxtb	r3, r3
 8008486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848a:	d103      	bne.n	8008494 <xQueueGenericSend+0x16c>
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800849a:	b25b      	sxtb	r3, r3
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d103      	bne.n	80084aa <xQueueGenericSend+0x182>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084aa:	f001 fefb 	bl	800a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084ae:	1d3a      	adds	r2, r7, #4
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 f81e 	bl	80094f8 <xTaskCheckForTimeOut>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d124      	bne.n	800850c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084c4:	f000 faa2 	bl	8008a0c <prvIsQueueFull>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d018      	beq.n	8008500 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	3310      	adds	r3, #16
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 ff44 	bl	8009364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084de:	f000 fa2d 	bl	800893c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084e2:	f000 fd73 	bl	8008fcc <xTaskResumeAll>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f47f af7c 	bne.w	80083e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80084ee:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <xQueueGenericSend+0x1f8>)
 80084f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	e772      	b.n	80083e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008502:	f000 fa1b 	bl	800893c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008506:	f000 fd61 	bl	8008fcc <xTaskResumeAll>
 800850a:	e76c      	b.n	80083e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800850c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800850e:	f000 fa15 	bl	800893c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008512:	f000 fd5b 	bl	8008fcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008516:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008518:	4618      	mov	r0, r3
 800851a:	3738      	adds	r7, #56	; 0x38
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	e000ed04 	.word	0xe000ed04

08008524 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b090      	sub	sp, #64	; 0x40
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10a      	bne.n	8008552 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <xQueueGenericSendFromISR+0x3c>
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <xQueueGenericSendFromISR+0x40>
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <xQueueGenericSendFromISR+0x42>
 8008564:	2300      	movs	r3, #0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d103      	bne.n	800858e <xQueueGenericSendFromISR+0x6a>
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858a:	2b01      	cmp	r3, #1
 800858c:	d101      	bne.n	8008592 <xQueueGenericSendFromISR+0x6e>
 800858e:	2301      	movs	r3, #1
 8008590:	e000      	b.n	8008594 <xQueueGenericSendFromISR+0x70>
 8008592:	2300      	movs	r3, #0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	623b      	str	r3, [r7, #32]
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085ae:	f001 ff2b 	bl	800a408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085b2:	f3ef 8211 	mrs	r2, BASEPRI
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	61fa      	str	r2, [r7, #28]
 80085c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d302      	bcc.n	80085e0 <xQueueGenericSendFromISR+0xbc>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d12f      	bne.n	8008640 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085f6:	f000 f911 	bl	800881c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80085fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008602:	d112      	bne.n	800862a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	2b00      	cmp	r3, #0
 800860a:	d016      	beq.n	800863a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	3324      	adds	r3, #36	; 0x24
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fef7 	bl	8009404 <xTaskRemoveFromEventList>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00e      	beq.n	800863a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00b      	beq.n	800863a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	e007      	b.n	800863a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800862a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800862e:	3301      	adds	r3, #1
 8008630:	b2db      	uxtb	r3, r3
 8008632:	b25a      	sxtb	r2, r3
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800863a:	2301      	movs	r3, #1
 800863c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800863e:	e001      	b.n	8008644 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008640:	2300      	movs	r3, #0
 8008642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008646:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800864e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008652:	4618      	mov	r0, r3
 8008654:	3740      	adds	r7, #64	; 0x40
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08c      	sub	sp, #48	; 0x30
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008668:	2300      	movs	r3, #0
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <xQueueReceive+0x30>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	623b      	str	r3, [r7, #32]
}
 8008688:	bf00      	nop
 800868a:	e7fe      	b.n	800868a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d103      	bne.n	800869a <xQueueReceive+0x3e>
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <xQueueReceive+0x42>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <xQueueReceive+0x44>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xQueueReceive+0x5e>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	61fb      	str	r3, [r7, #28]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ba:	f001 f865 	bl	8009788 <xTaskGetSchedulerState>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d102      	bne.n	80086ca <xQueueReceive+0x6e>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <xQueueReceive+0x72>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e000      	b.n	80086d0 <xQueueReceive+0x74>
 80086ce:	2300      	movs	r3, #0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10a      	bne.n	80086ea <xQueueReceive+0x8e>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	61bb      	str	r3, [r7, #24]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086ea:	f001 fdab 	bl	800a244 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d01f      	beq.n	800873a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086fe:	f000 f8f7 	bl	80088f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	1e5a      	subs	r2, r3, #1
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00f      	beq.n	8008732 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	3310      	adds	r3, #16
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fe74 	bl	8009404 <xTaskRemoveFromEventList>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008722:	4b3d      	ldr	r3, [pc, #244]	; (8008818 <xQueueReceive+0x1bc>)
 8008724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008732:	f001 fdb7 	bl	800a2a4 <vPortExitCritical>
				return pdPASS;
 8008736:	2301      	movs	r3, #1
 8008738:	e069      	b.n	800880e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d103      	bne.n	8008748 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008740:	f001 fdb0 	bl	800a2a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008744:	2300      	movs	r3, #0
 8008746:	e062      	b.n	800880e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800874e:	f107 0310 	add.w	r3, r7, #16
 8008752:	4618      	mov	r0, r3
 8008754:	f000 feba 	bl	80094cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008758:	2301      	movs	r3, #1
 800875a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800875c:	f001 fda2 	bl	800a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008760:	f000 fc26 	bl	8008fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008764:	f001 fd6e 	bl	800a244 <vPortEnterCritical>
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800876e:	b25b      	sxtb	r3, r3
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008774:	d103      	bne.n	800877e <xQueueReceive+0x122>
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008784:	b25b      	sxtb	r3, r3
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d103      	bne.n	8008794 <xQueueReceive+0x138>
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008794:	f001 fd86 	bl	800a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008798:	1d3a      	adds	r2, r7, #4
 800879a:	f107 0310 	add.w	r3, r7, #16
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fea9 	bl	80094f8 <xTaskCheckForTimeOut>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d123      	bne.n	80087f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ae:	f000 f917 	bl	80089e0 <prvIsQueueEmpty>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d017      	beq.n	80087e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	3324      	adds	r3, #36	; 0x24
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	4611      	mov	r1, r2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 fdcf 	bl	8009364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c8:	f000 f8b8 	bl	800893c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087cc:	f000 fbfe 	bl	8008fcc <xTaskResumeAll>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d189      	bne.n	80086ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80087d6:	4b10      	ldr	r3, [pc, #64]	; (8008818 <xQueueReceive+0x1bc>)
 80087d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	e780      	b.n	80086ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ea:	f000 f8a7 	bl	800893c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087ee:	f000 fbed 	bl	8008fcc <xTaskResumeAll>
 80087f2:	e77a      	b.n	80086ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f6:	f000 f8a1 	bl	800893c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087fa:	f000 fbe7 	bl	8008fcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008800:	f000 f8ee 	bl	80089e0 <prvIsQueueEmpty>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	f43f af6f 	beq.w	80086ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800880c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800880e:	4618      	mov	r0, r3
 8008810:	3730      	adds	r7, #48	; 0x30
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008828:	2300      	movs	r3, #0
 800882a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008830:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10d      	bne.n	8008856 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d14d      	bne.n	80088de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 ffbc 	bl	80097c4 <xTaskPriorityDisinherit>
 800884c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	609a      	str	r2, [r3, #8]
 8008854:	e043      	b.n	80088de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d119      	bne.n	8008890 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6858      	ldr	r0, [r3, #4]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008864:	461a      	mov	r2, r3
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	f002 f8a2 	bl	800a9b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008874:	441a      	add	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	d32b      	bcc.n	80088de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	605a      	str	r2, [r3, #4]
 800888e:	e026      	b.n	80088de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68d8      	ldr	r0, [r3, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	461a      	mov	r2, r3
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	f002 f888 	bl	800a9b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a8:	425b      	negs	r3, r3
 80088aa:	441a      	add	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d207      	bcs.n	80088cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c4:	425b      	negs	r3, r3
 80088c6:	441a      	add	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d105      	bne.n	80088de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	3b01      	subs	r3, #1
 80088dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	1c5a      	adds	r2, r3, #1
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80088e6:	697b      	ldr	r3, [r7, #20]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d018      	beq.n	8008934 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	441a      	add	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	429a      	cmp	r2, r3
 800891a:	d303      	bcc.n	8008924 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68d9      	ldr	r1, [r3, #12]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	461a      	mov	r2, r3
 800892e:	6838      	ldr	r0, [r7, #0]
 8008930:	f002 f83e 	bl	800a9b0 <memcpy>
	}
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008944:	f001 fc7e 	bl	800a244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800894e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008950:	e011      	b.n	8008976 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	2b00      	cmp	r3, #0
 8008958:	d012      	beq.n	8008980 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3324      	adds	r3, #36	; 0x24
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fd50 	bl	8009404 <xTaskRemoveFromEventList>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800896a:	f000 fe27 	bl	80095bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	3b01      	subs	r3, #1
 8008972:	b2db      	uxtb	r3, r3
 8008974:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800897a:	2b00      	cmp	r3, #0
 800897c:	dce9      	bgt.n	8008952 <prvUnlockQueue+0x16>
 800897e:	e000      	b.n	8008982 <prvUnlockQueue+0x46>
					break;
 8008980:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	22ff      	movs	r2, #255	; 0xff
 8008986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800898a:	f001 fc8b 	bl	800a2a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800898e:	f001 fc59 	bl	800a244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008998:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800899a:	e011      	b.n	80089c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d012      	beq.n	80089ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3310      	adds	r3, #16
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fd2b 	bl	8009404 <xTaskRemoveFromEventList>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089b4:	f000 fe02 	bl	80095bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	dce9      	bgt.n	800899c <prvUnlockQueue+0x60>
 80089c8:	e000      	b.n	80089cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	22ff      	movs	r2, #255	; 0xff
 80089d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80089d4:	f001 fc66 	bl	800a2a4 <vPortExitCritical>
}
 80089d8:	bf00      	nop
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089e8:	f001 fc2c 	bl	800a244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d102      	bne.n	80089fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089f4:	2301      	movs	r3, #1
 80089f6:	60fb      	str	r3, [r7, #12]
 80089f8:	e001      	b.n	80089fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089fe:	f001 fc51 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 8008a02:	68fb      	ldr	r3, [r7, #12]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a14:	f001 fc16 	bl	800a244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d102      	bne.n	8008a2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	e001      	b.n	8008a2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a2e:	f001 fc39 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 8008a32:	68fb      	ldr	r3, [r7, #12]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a46:	2300      	movs	r3, #0
 8008a48:	60fb      	str	r3, [r7, #12]
 8008a4a:	e014      	b.n	8008a76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a4c:	4a0f      	ldr	r2, [pc, #60]	; (8008a8c <vQueueAddToRegistry+0x50>)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10b      	bne.n	8008a70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a58:	490c      	ldr	r1, [pc, #48]	; (8008a8c <vQueueAddToRegistry+0x50>)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a62:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <vQueueAddToRegistry+0x50>)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	00db      	lsls	r3, r3, #3
 8008a68:	4413      	add	r3, r2
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a6e:	e006      	b.n	8008a7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b07      	cmp	r3, #7
 8008a7a:	d9e7      	bls.n	8008a4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a7c:	bf00      	nop
 8008a7e:	bf00      	nop
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	20000e70 	.word	0x20000e70

08008a90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008aa0:	f001 fbd0 	bl	800a244 <vPortEnterCritical>
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aaa:	b25b      	sxtb	r3, r3
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab0:	d103      	bne.n	8008aba <vQueueWaitForMessageRestricted+0x2a>
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ac0:	b25b      	sxtb	r3, r3
 8008ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac6:	d103      	bne.n	8008ad0 <vQueueWaitForMessageRestricted+0x40>
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ad0:	f001 fbe8 	bl	800a2a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d106      	bne.n	8008aea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	3324      	adds	r3, #36	; 0x24
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	68b9      	ldr	r1, [r7, #8]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fc61 	bl	80093ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008aea:	6978      	ldr	r0, [r7, #20]
 8008aec:	f7ff ff26 	bl	800893c <prvUnlockQueue>
	}
 8008af0:	bf00      	nop
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08e      	sub	sp, #56	; 0x38
 8008afc:	af04      	add	r7, sp, #16
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	623b      	str	r3, [r7, #32]
}
 8008b1e:	bf00      	nop
 8008b20:	e7fe      	b.n	8008b20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <xTaskCreateStatic+0x46>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	61fb      	str	r3, [r7, #28]
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b3e:	23a8      	movs	r3, #168	; 0xa8
 8008b40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2ba8      	cmp	r3, #168	; 0xa8
 8008b46:	d00a      	beq.n	8008b5e <xTaskCreateStatic+0x66>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	61bb      	str	r3, [r7, #24]
}
 8008b5a:	bf00      	nop
 8008b5c:	e7fe      	b.n	8008b5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d01e      	beq.n	8008ba4 <xTaskCreateStatic+0xac>
 8008b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d01b      	beq.n	8008ba4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	2202      	movs	r2, #2
 8008b7a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9303      	str	r3, [sp, #12]
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	9302      	str	r3, [sp, #8]
 8008b86:	f107 0314 	add.w	r3, r7, #20
 8008b8a:	9301      	str	r3, [sp, #4]
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	68b9      	ldr	r1, [r7, #8]
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f850 	bl	8008c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b9e:	f000 f8f3 	bl	8008d88 <prvAddNewTaskToReadyList>
 8008ba2:	e001      	b.n	8008ba8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ba8:	697b      	ldr	r3, [r7, #20]
	}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3728      	adds	r7, #40	; 0x28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b08c      	sub	sp, #48	; 0x30
 8008bb6:	af04      	add	r7, sp, #16
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	603b      	str	r3, [r7, #0]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008bc2:	88fb      	ldrh	r3, [r7, #6]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f001 fc5e 	bl	800a488 <pvPortMalloc>
 8008bcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00e      	beq.n	8008bf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008bd4:	20a8      	movs	r0, #168	; 0xa8
 8008bd6:	f001 fc57 	bl	800a488 <pvPortMalloc>
 8008bda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	631a      	str	r2, [r3, #48]	; 0x30
 8008be8:	e005      	b.n	8008bf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bea:	6978      	ldr	r0, [r7, #20]
 8008bec:	f001 fd18 	bl	800a620 <vPortFree>
 8008bf0:	e001      	b.n	8008bf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d017      	beq.n	8008c2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c04:	88fa      	ldrh	r2, [r7, #6]
 8008c06:	2300      	movs	r3, #0
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68b9      	ldr	r1, [r7, #8]
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 f80e 	bl	8008c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c20:	69f8      	ldr	r0, [r7, #28]
 8008c22:	f000 f8b1 	bl	8008d88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c26:	2301      	movs	r3, #1
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	e002      	b.n	8008c32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c32:	69bb      	ldr	r3, [r7, #24]
	}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3720      	adds	r7, #32
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	461a      	mov	r2, r3
 8008c54:	21a5      	movs	r1, #165	; 0xa5
 8008c56:	f001 fe21 	bl	800a89c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c64:	3b01      	subs	r3, #1
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	f023 0307 	bic.w	r3, r3, #7
 8008c72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	617b      	str	r3, [r7, #20]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d01f      	beq.n	8008cda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61fb      	str	r3, [r7, #28]
 8008c9e:	e012      	b.n	8008cc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	7819      	ldrb	r1, [r3, #0]
 8008ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	4413      	add	r3, r2
 8008cae:	3334      	adds	r3, #52	; 0x34
 8008cb0:	460a      	mov	r2, r1
 8008cb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	4413      	add	r3, r2
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d006      	beq.n	8008cce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	61fb      	str	r3, [r7, #28]
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	2b0f      	cmp	r3, #15
 8008cca:	d9e9      	bls.n	8008ca0 <prvInitialiseNewTask+0x64>
 8008ccc:	e000      	b.n	8008cd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8008cce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cd8:	e003      	b.n	8008ce2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	2b37      	cmp	r3, #55	; 0x37
 8008ce6:	d901      	bls.n	8008cec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ce8:	2337      	movs	r3, #55	; 0x37
 8008cea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	3304      	adds	r3, #4
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff f978 	bl	8007ff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0a:	3318      	adds	r3, #24
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff f973 	bl	8007ff8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	3354      	adds	r3, #84	; 0x54
 8008d3c:	224c      	movs	r2, #76	; 0x4c
 8008d3e:	2100      	movs	r1, #0
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 fdab 	bl	800a89c <memset>
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	4a0c      	ldr	r2, [pc, #48]	; (8008d7c <prvInitialiseNewTask+0x140>)
 8008d4a:	659a      	str	r2, [r3, #88]	; 0x58
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	4a0c      	ldr	r2, [pc, #48]	; (8008d80 <prvInitialiseNewTask+0x144>)
 8008d50:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	4a0b      	ldr	r2, [pc, #44]	; (8008d84 <prvInitialiseNewTask+0x148>)
 8008d56:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	68f9      	ldr	r1, [r7, #12]
 8008d5c:	69b8      	ldr	r0, [r7, #24]
 8008d5e:	f001 f941 	bl	8009fe4 <pxPortInitialiseStack>
 8008d62:	4602      	mov	r2, r0
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d74:	bf00      	nop
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20005104 	.word	0x20005104
 8008d80:	2000516c 	.word	0x2000516c
 8008d84:	200051d4 	.word	0x200051d4

08008d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d90:	f001 fa58 	bl	800a244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d94:	4b2d      	ldr	r3, [pc, #180]	; (8008e4c <prvAddNewTaskToReadyList+0xc4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	4a2c      	ldr	r2, [pc, #176]	; (8008e4c <prvAddNewTaskToReadyList+0xc4>)
 8008d9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d9e:	4b2c      	ldr	r3, [pc, #176]	; (8008e50 <prvAddNewTaskToReadyList+0xc8>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d109      	bne.n	8008dba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008da6:	4a2a      	ldr	r2, [pc, #168]	; (8008e50 <prvAddNewTaskToReadyList+0xc8>)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008dac:	4b27      	ldr	r3, [pc, #156]	; (8008e4c <prvAddNewTaskToReadyList+0xc4>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d110      	bne.n	8008dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008db4:	f000 fc26 	bl	8009604 <prvInitialiseTaskLists>
 8008db8:	e00d      	b.n	8008dd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008dba:	4b26      	ldr	r3, [pc, #152]	; (8008e54 <prvAddNewTaskToReadyList+0xcc>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d109      	bne.n	8008dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008dc2:	4b23      	ldr	r3, [pc, #140]	; (8008e50 <prvAddNewTaskToReadyList+0xc8>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d802      	bhi.n	8008dd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008dd0:	4a1f      	ldr	r2, [pc, #124]	; (8008e50 <prvAddNewTaskToReadyList+0xc8>)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008dd6:	4b20      	ldr	r3, [pc, #128]	; (8008e58 <prvAddNewTaskToReadyList+0xd0>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	4a1e      	ldr	r2, [pc, #120]	; (8008e58 <prvAddNewTaskToReadyList+0xd0>)
 8008dde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008de0:	4b1d      	ldr	r3, [pc, #116]	; (8008e58 <prvAddNewTaskToReadyList+0xd0>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dec:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <prvAddNewTaskToReadyList+0xd4>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d903      	bls.n	8008dfc <prvAddNewTaskToReadyList+0x74>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df8:	4a18      	ldr	r2, [pc, #96]	; (8008e5c <prvAddNewTaskToReadyList+0xd4>)
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e00:	4613      	mov	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4a15      	ldr	r2, [pc, #84]	; (8008e60 <prvAddNewTaskToReadyList+0xd8>)
 8008e0a:	441a      	add	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	3304      	adds	r3, #4
 8008e10:	4619      	mov	r1, r3
 8008e12:	4610      	mov	r0, r2
 8008e14:	f7ff f8fd 	bl	8008012 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e18:	f001 fa44 	bl	800a2a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <prvAddNewTaskToReadyList+0xcc>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00e      	beq.n	8008e42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e24:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <prvAddNewTaskToReadyList+0xc8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d207      	bcs.n	8008e42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e32:	4b0c      	ldr	r3, [pc, #48]	; (8008e64 <prvAddNewTaskToReadyList+0xdc>)
 8008e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e42:	bf00      	nop
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20001384 	.word	0x20001384
 8008e50:	20000eb0 	.word	0x20000eb0
 8008e54:	20001390 	.word	0x20001390
 8008e58:	200013a0 	.word	0x200013a0
 8008e5c:	2000138c 	.word	0x2000138c
 8008e60:	20000eb4 	.word	0x20000eb4
 8008e64:	e000ed04 	.word	0xe000ed04

08008e68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d017      	beq.n	8008eaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e7a:	4b13      	ldr	r3, [pc, #76]	; (8008ec8 <vTaskDelay+0x60>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00a      	beq.n	8008e98 <vTaskDelay+0x30>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	60bb      	str	r3, [r7, #8]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e98:	f000 f88a 	bl	8008fb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fcfe 	bl	80098a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ea4:	f000 f892 	bl	8008fcc <xTaskResumeAll>
 8008ea8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d107      	bne.n	8008ec0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008eb0:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <vTaskDelay+0x64>)
 8008eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	200013ac 	.word	0x200013ac
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	; 0x28
 8008ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008eda:	2300      	movs	r3, #0
 8008edc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ede:	463a      	mov	r2, r7
 8008ee0:	1d39      	adds	r1, r7, #4
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff f832 	bl	8007f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	9202      	str	r2, [sp, #8]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	2300      	movs	r3, #0
 8008efc:	460a      	mov	r2, r1
 8008efe:	4924      	ldr	r1, [pc, #144]	; (8008f90 <vTaskStartScheduler+0xc0>)
 8008f00:	4824      	ldr	r0, [pc, #144]	; (8008f94 <vTaskStartScheduler+0xc4>)
 8008f02:	f7ff fdf9 	bl	8008af8 <xTaskCreateStatic>
 8008f06:	4603      	mov	r3, r0
 8008f08:	4a23      	ldr	r2, [pc, #140]	; (8008f98 <vTaskStartScheduler+0xc8>)
 8008f0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f0c:	4b22      	ldr	r3, [pc, #136]	; (8008f98 <vTaskStartScheduler+0xc8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f14:	2301      	movs	r3, #1
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	e001      	b.n	8008f1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d102      	bne.n	8008f2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f24:	f000 fd10 	bl	8009948 <xTimerCreateTimerTask>
 8008f28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d11b      	bne.n	8008f68 <vTaskStartScheduler+0x98>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	613b      	str	r3, [r7, #16]
}
 8008f42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f44:	4b15      	ldr	r3, [pc, #84]	; (8008f9c <vTaskStartScheduler+0xcc>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3354      	adds	r3, #84	; 0x54
 8008f4a:	4a15      	ldr	r2, [pc, #84]	; (8008fa0 <vTaskStartScheduler+0xd0>)
 8008f4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f4e:	4b15      	ldr	r3, [pc, #84]	; (8008fa4 <vTaskStartScheduler+0xd4>)
 8008f50:	f04f 32ff 	mov.w	r2, #4294967295
 8008f54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f56:	4b14      	ldr	r3, [pc, #80]	; (8008fa8 <vTaskStartScheduler+0xd8>)
 8008f58:	2201      	movs	r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f5c:	4b13      	ldr	r3, [pc, #76]	; (8008fac <vTaskStartScheduler+0xdc>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f62:	f001 f8cd 	bl	800a100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f66:	e00e      	b.n	8008f86 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6e:	d10a      	bne.n	8008f86 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	60fb      	str	r3, [r7, #12]
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <vTaskStartScheduler+0xb4>
}
 8008f86:	bf00      	nop
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	0800b318 	.word	0x0800b318
 8008f94:	080095d5 	.word	0x080095d5
 8008f98:	200013a8 	.word	0x200013a8
 8008f9c:	20000eb0 	.word	0x20000eb0
 8008fa0:	20000060 	.word	0x20000060
 8008fa4:	200013a4 	.word	0x200013a4
 8008fa8:	20001390 	.word	0x20001390
 8008fac:	20001388 	.word	0x20001388

08008fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008fb4:	4b04      	ldr	r3, [pc, #16]	; (8008fc8 <vTaskSuspendAll+0x18>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	4a03      	ldr	r2, [pc, #12]	; (8008fc8 <vTaskSuspendAll+0x18>)
 8008fbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008fbe:	bf00      	nop
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	200013ac 	.word	0x200013ac

08008fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008fda:	4b42      	ldr	r3, [pc, #264]	; (80090e4 <xTaskResumeAll+0x118>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10a      	bne.n	8008ff8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	603b      	str	r3, [r7, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	e7fe      	b.n	8008ff6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ff8:	f001 f924 	bl	800a244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ffc:	4b39      	ldr	r3, [pc, #228]	; (80090e4 <xTaskResumeAll+0x118>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3b01      	subs	r3, #1
 8009002:	4a38      	ldr	r2, [pc, #224]	; (80090e4 <xTaskResumeAll+0x118>)
 8009004:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009006:	4b37      	ldr	r3, [pc, #220]	; (80090e4 <xTaskResumeAll+0x118>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d162      	bne.n	80090d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800900e:	4b36      	ldr	r3, [pc, #216]	; (80090e8 <xTaskResumeAll+0x11c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d05e      	beq.n	80090d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009016:	e02f      	b.n	8009078 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009018:	4b34      	ldr	r3, [pc, #208]	; (80090ec <xTaskResumeAll+0x120>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3318      	adds	r3, #24
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff f851 	bl	80080cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3304      	adds	r3, #4
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff f84c 	bl	80080cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009038:	4b2d      	ldr	r3, [pc, #180]	; (80090f0 <xTaskResumeAll+0x124>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d903      	bls.n	8009048 <xTaskResumeAll+0x7c>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009044:	4a2a      	ldr	r2, [pc, #168]	; (80090f0 <xTaskResumeAll+0x124>)
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904c:	4613      	mov	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4a27      	ldr	r2, [pc, #156]	; (80090f4 <xTaskResumeAll+0x128>)
 8009056:	441a      	add	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3304      	adds	r3, #4
 800905c:	4619      	mov	r1, r3
 800905e:	4610      	mov	r0, r2
 8009060:	f7fe ffd7 	bl	8008012 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009068:	4b23      	ldr	r3, [pc, #140]	; (80090f8 <xTaskResumeAll+0x12c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906e:	429a      	cmp	r2, r3
 8009070:	d302      	bcc.n	8009078 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009072:	4b22      	ldr	r3, [pc, #136]	; (80090fc <xTaskResumeAll+0x130>)
 8009074:	2201      	movs	r2, #1
 8009076:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009078:	4b1c      	ldr	r3, [pc, #112]	; (80090ec <xTaskResumeAll+0x120>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1cb      	bne.n	8009018 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009086:	f000 fb5f 	bl	8009748 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800908a:	4b1d      	ldr	r3, [pc, #116]	; (8009100 <xTaskResumeAll+0x134>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d010      	beq.n	80090b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009096:	f000 f847 	bl	8009128 <xTaskIncrementTick>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80090a0:	4b16      	ldr	r3, [pc, #88]	; (80090fc <xTaskResumeAll+0x130>)
 80090a2:	2201      	movs	r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1f1      	bne.n	8009096 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80090b2:	4b13      	ldr	r3, [pc, #76]	; (8009100 <xTaskResumeAll+0x134>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090b8:	4b10      	ldr	r3, [pc, #64]	; (80090fc <xTaskResumeAll+0x130>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d009      	beq.n	80090d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090c4:	4b0f      	ldr	r3, [pc, #60]	; (8009104 <xTaskResumeAll+0x138>)
 80090c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090d4:	f001 f8e6 	bl	800a2a4 <vPortExitCritical>

	return xAlreadyYielded;
 80090d8:	68bb      	ldr	r3, [r7, #8]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	200013ac 	.word	0x200013ac
 80090e8:	20001384 	.word	0x20001384
 80090ec:	20001344 	.word	0x20001344
 80090f0:	2000138c 	.word	0x2000138c
 80090f4:	20000eb4 	.word	0x20000eb4
 80090f8:	20000eb0 	.word	0x20000eb0
 80090fc:	20001398 	.word	0x20001398
 8009100:	20001394 	.word	0x20001394
 8009104:	e000ed04 	.word	0xe000ed04

08009108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800910e:	4b05      	ldr	r3, [pc, #20]	; (8009124 <xTaskGetTickCount+0x1c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009114:	687b      	ldr	r3, [r7, #4]
}
 8009116:	4618      	mov	r0, r3
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20001388 	.word	0x20001388

08009128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009132:	4b4f      	ldr	r3, [pc, #316]	; (8009270 <xTaskIncrementTick+0x148>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	f040 808f 	bne.w	800925a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800913c:	4b4d      	ldr	r3, [pc, #308]	; (8009274 <xTaskIncrementTick+0x14c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3301      	adds	r3, #1
 8009142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009144:	4a4b      	ldr	r2, [pc, #300]	; (8009274 <xTaskIncrementTick+0x14c>)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d120      	bne.n	8009192 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009150:	4b49      	ldr	r3, [pc, #292]	; (8009278 <xTaskIncrementTick+0x150>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <xTaskIncrementTick+0x48>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	603b      	str	r3, [r7, #0]
}
 800916c:	bf00      	nop
 800916e:	e7fe      	b.n	800916e <xTaskIncrementTick+0x46>
 8009170:	4b41      	ldr	r3, [pc, #260]	; (8009278 <xTaskIncrementTick+0x150>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	4b41      	ldr	r3, [pc, #260]	; (800927c <xTaskIncrementTick+0x154>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a3f      	ldr	r2, [pc, #252]	; (8009278 <xTaskIncrementTick+0x150>)
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	4a3f      	ldr	r2, [pc, #252]	; (800927c <xTaskIncrementTick+0x154>)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	4b3e      	ldr	r3, [pc, #248]	; (8009280 <xTaskIncrementTick+0x158>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3301      	adds	r3, #1
 800918a:	4a3d      	ldr	r2, [pc, #244]	; (8009280 <xTaskIncrementTick+0x158>)
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	f000 fadb 	bl	8009748 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009192:	4b3c      	ldr	r3, [pc, #240]	; (8009284 <xTaskIncrementTick+0x15c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	429a      	cmp	r2, r3
 800919a:	d349      	bcc.n	8009230 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800919c:	4b36      	ldr	r3, [pc, #216]	; (8009278 <xTaskIncrementTick+0x150>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d104      	bne.n	80091b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a6:	4b37      	ldr	r3, [pc, #220]	; (8009284 <xTaskIncrementTick+0x15c>)
 80091a8:	f04f 32ff 	mov.w	r2, #4294967295
 80091ac:	601a      	str	r2, [r3, #0]
					break;
 80091ae:	e03f      	b.n	8009230 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b0:	4b31      	ldr	r3, [pc, #196]	; (8009278 <xTaskIncrementTick+0x150>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d203      	bcs.n	80091d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091c8:	4a2e      	ldr	r2, [pc, #184]	; (8009284 <xTaskIncrementTick+0x15c>)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091ce:	e02f      	b.n	8009230 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	3304      	adds	r3, #4
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe ff79 	bl	80080cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d004      	beq.n	80091ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	3318      	adds	r3, #24
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe ff70 	bl	80080cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f0:	4b25      	ldr	r3, [pc, #148]	; (8009288 <xTaskIncrementTick+0x160>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d903      	bls.n	8009200 <xTaskIncrementTick+0xd8>
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a22      	ldr	r2, [pc, #136]	; (8009288 <xTaskIncrementTick+0x160>)
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4a1f      	ldr	r2, [pc, #124]	; (800928c <xTaskIncrementTick+0x164>)
 800920e:	441a      	add	r2, r3
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	3304      	adds	r3, #4
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f7fe fefb 	bl	8008012 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009220:	4b1b      	ldr	r3, [pc, #108]	; (8009290 <xTaskIncrementTick+0x168>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009226:	429a      	cmp	r2, r3
 8009228:	d3b8      	bcc.n	800919c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800922a:	2301      	movs	r3, #1
 800922c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800922e:	e7b5      	b.n	800919c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009230:	4b17      	ldr	r3, [pc, #92]	; (8009290 <xTaskIncrementTick+0x168>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009236:	4915      	ldr	r1, [pc, #84]	; (800928c <xTaskIncrementTick+0x164>)
 8009238:	4613      	mov	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	440b      	add	r3, r1
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d901      	bls.n	800924c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009248:	2301      	movs	r3, #1
 800924a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800924c:	4b11      	ldr	r3, [pc, #68]	; (8009294 <xTaskIncrementTick+0x16c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d007      	beq.n	8009264 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009254:	2301      	movs	r3, #1
 8009256:	617b      	str	r3, [r7, #20]
 8009258:	e004      	b.n	8009264 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800925a:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <xTaskIncrementTick+0x170>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3301      	adds	r3, #1
 8009260:	4a0d      	ldr	r2, [pc, #52]	; (8009298 <xTaskIncrementTick+0x170>)
 8009262:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009264:	697b      	ldr	r3, [r7, #20]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	200013ac 	.word	0x200013ac
 8009274:	20001388 	.word	0x20001388
 8009278:	2000133c 	.word	0x2000133c
 800927c:	20001340 	.word	0x20001340
 8009280:	2000139c 	.word	0x2000139c
 8009284:	200013a4 	.word	0x200013a4
 8009288:	2000138c 	.word	0x2000138c
 800928c:	20000eb4 	.word	0x20000eb4
 8009290:	20000eb0 	.word	0x20000eb0
 8009294:	20001398 	.word	0x20001398
 8009298:	20001394 	.word	0x20001394

0800929c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092a2:	4b2a      	ldr	r3, [pc, #168]	; (800934c <vTaskSwitchContext+0xb0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092aa:	4b29      	ldr	r3, [pc, #164]	; (8009350 <vTaskSwitchContext+0xb4>)
 80092ac:	2201      	movs	r2, #1
 80092ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092b0:	e046      	b.n	8009340 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80092b2:	4b27      	ldr	r3, [pc, #156]	; (8009350 <vTaskSwitchContext+0xb4>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b8:	4b26      	ldr	r3, [pc, #152]	; (8009354 <vTaskSwitchContext+0xb8>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	60fb      	str	r3, [r7, #12]
 80092be:	e010      	b.n	80092e2 <vTaskSwitchContext+0x46>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10a      	bne.n	80092dc <vTaskSwitchContext+0x40>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	607b      	str	r3, [r7, #4]
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <vTaskSwitchContext+0x3e>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3b01      	subs	r3, #1
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	491d      	ldr	r1, [pc, #116]	; (8009358 <vTaskSwitchContext+0xbc>)
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4613      	mov	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	440b      	add	r3, r1
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0e4      	beq.n	80092c0 <vTaskSwitchContext+0x24>
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	4613      	mov	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4a15      	ldr	r2, [pc, #84]	; (8009358 <vTaskSwitchContext+0xbc>)
 8009302:	4413      	add	r3, r2
 8009304:	60bb      	str	r3, [r7, #8]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	605a      	str	r2, [r3, #4]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	3308      	adds	r3, #8
 8009318:	429a      	cmp	r2, r3
 800931a:	d104      	bne.n	8009326 <vTaskSwitchContext+0x8a>
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	605a      	str	r2, [r3, #4]
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	4a0b      	ldr	r2, [pc, #44]	; (800935c <vTaskSwitchContext+0xc0>)
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	4a08      	ldr	r2, [pc, #32]	; (8009354 <vTaskSwitchContext+0xb8>)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009336:	4b09      	ldr	r3, [pc, #36]	; (800935c <vTaskSwitchContext+0xc0>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3354      	adds	r3, #84	; 0x54
 800933c:	4a08      	ldr	r2, [pc, #32]	; (8009360 <vTaskSwitchContext+0xc4>)
 800933e:	6013      	str	r3, [r2, #0]
}
 8009340:	bf00      	nop
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	200013ac 	.word	0x200013ac
 8009350:	20001398 	.word	0x20001398
 8009354:	2000138c 	.word	0x2000138c
 8009358:	20000eb4 	.word	0x20000eb4
 800935c:	20000eb0 	.word	0x20000eb0
 8009360:	20000060 	.word	0x20000060

08009364 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	60fb      	str	r3, [r7, #12]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800938a:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <vTaskPlaceOnEventList+0x44>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3318      	adds	r3, #24
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7fe fe61 	bl	800805a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009398:	2101      	movs	r1, #1
 800939a:	6838      	ldr	r0, [r7, #0]
 800939c:	f000 fa80 	bl	80098a0 <prvAddCurrentTaskToDelayedList>
}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	20000eb0 	.word	0x20000eb0

080093ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10a      	bne.n	80093d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	617b      	str	r3, [r7, #20]
}
 80093d0:	bf00      	nop
 80093d2:	e7fe      	b.n	80093d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093d4:	4b0a      	ldr	r3, [pc, #40]	; (8009400 <vTaskPlaceOnEventListRestricted+0x54>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3318      	adds	r3, #24
 80093da:	4619      	mov	r1, r3
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7fe fe18 	bl	8008012 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80093e8:	f04f 33ff 	mov.w	r3, #4294967295
 80093ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	68b8      	ldr	r0, [r7, #8]
 80093f2:	f000 fa55 	bl	80098a0 <prvAddCurrentTaskToDelayedList>
	}
 80093f6:	bf00      	nop
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20000eb0 	.word	0x20000eb0

08009404 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	60fb      	str	r3, [r7, #12]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	3318      	adds	r3, #24
 8009434:	4618      	mov	r0, r3
 8009436:	f7fe fe49 	bl	80080cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800943a:	4b1e      	ldr	r3, [pc, #120]	; (80094b4 <xTaskRemoveFromEventList+0xb0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d11d      	bne.n	800947e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	3304      	adds	r3, #4
 8009446:	4618      	mov	r0, r3
 8009448:	f7fe fe40 	bl	80080cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009450:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <xTaskRemoveFromEventList+0xb4>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	429a      	cmp	r2, r3
 8009456:	d903      	bls.n	8009460 <xTaskRemoveFromEventList+0x5c>
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	4a16      	ldr	r2, [pc, #88]	; (80094b8 <xTaskRemoveFromEventList+0xb4>)
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4a13      	ldr	r2, [pc, #76]	; (80094bc <xTaskRemoveFromEventList+0xb8>)
 800946e:	441a      	add	r2, r3
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	3304      	adds	r3, #4
 8009474:	4619      	mov	r1, r3
 8009476:	4610      	mov	r0, r2
 8009478:	f7fe fdcb 	bl	8008012 <vListInsertEnd>
 800947c:	e005      	b.n	800948a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	3318      	adds	r3, #24
 8009482:	4619      	mov	r1, r3
 8009484:	480e      	ldr	r0, [pc, #56]	; (80094c0 <xTaskRemoveFromEventList+0xbc>)
 8009486:	f7fe fdc4 	bl	8008012 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948e:	4b0d      	ldr	r3, [pc, #52]	; (80094c4 <xTaskRemoveFromEventList+0xc0>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009494:	429a      	cmp	r2, r3
 8009496:	d905      	bls.n	80094a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009498:	2301      	movs	r3, #1
 800949a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800949c:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <xTaskRemoveFromEventList+0xc4>)
 800949e:	2201      	movs	r2, #1
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	e001      	b.n	80094a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80094a4:	2300      	movs	r3, #0
 80094a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80094a8:	697b      	ldr	r3, [r7, #20]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	200013ac 	.word	0x200013ac
 80094b8:	2000138c 	.word	0x2000138c
 80094bc:	20000eb4 	.word	0x20000eb4
 80094c0:	20001344 	.word	0x20001344
 80094c4:	20000eb0 	.word	0x20000eb0
 80094c8:	20001398 	.word	0x20001398

080094cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094d4:	4b06      	ldr	r3, [pc, #24]	; (80094f0 <vTaskInternalSetTimeOutState+0x24>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094dc:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <vTaskInternalSetTimeOutState+0x28>)
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	605a      	str	r2, [r3, #4]
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	2000139c 	.word	0x2000139c
 80094f4:	20001388 	.word	0x20001388

080094f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10a      	bne.n	800951e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	613b      	str	r3, [r7, #16]
}
 800951a:	bf00      	nop
 800951c:	e7fe      	b.n	800951c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	60fb      	str	r3, [r7, #12]
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800953a:	f000 fe83 	bl	800a244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800953e:	4b1d      	ldr	r3, [pc, #116]	; (80095b4 <xTaskCheckForTimeOut+0xbc>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009556:	d102      	bne.n	800955e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009558:	2300      	movs	r3, #0
 800955a:	61fb      	str	r3, [r7, #28]
 800955c:	e023      	b.n	80095a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <xTaskCheckForTimeOut+0xc0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	429a      	cmp	r2, r3
 8009568:	d007      	beq.n	800957a <xTaskCheckForTimeOut+0x82>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	429a      	cmp	r2, r3
 8009572:	d302      	bcc.n	800957a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009574:	2301      	movs	r3, #1
 8009576:	61fb      	str	r3, [r7, #28]
 8009578:	e015      	b.n	80095a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	429a      	cmp	r2, r3
 8009582:	d20b      	bcs.n	800959c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	1ad2      	subs	r2, r2, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff ff9b 	bl	80094cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009596:	2300      	movs	r3, #0
 8009598:	61fb      	str	r3, [r7, #28]
 800959a:	e004      	b.n	80095a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095a2:	2301      	movs	r3, #1
 80095a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80095a6:	f000 fe7d 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 80095aa:	69fb      	ldr	r3, [r7, #28]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3720      	adds	r7, #32
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20001388 	.word	0x20001388
 80095b8:	2000139c 	.word	0x2000139c

080095bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095c0:	4b03      	ldr	r3, [pc, #12]	; (80095d0 <vTaskMissedYield+0x14>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	601a      	str	r2, [r3, #0]
}
 80095c6:	bf00      	nop
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	20001398 	.word	0x20001398

080095d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095dc:	f000 f852 	bl	8009684 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095e0:	4b06      	ldr	r3, [pc, #24]	; (80095fc <prvIdleTask+0x28>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d9f9      	bls.n	80095dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80095e8:	4b05      	ldr	r3, [pc, #20]	; (8009600 <prvIdleTask+0x2c>)
 80095ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095f8:	e7f0      	b.n	80095dc <prvIdleTask+0x8>
 80095fa:	bf00      	nop
 80095fc:	20000eb4 	.word	0x20000eb4
 8009600:	e000ed04 	.word	0xe000ed04

08009604 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800960a:	2300      	movs	r3, #0
 800960c:	607b      	str	r3, [r7, #4]
 800960e:	e00c      	b.n	800962a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4a12      	ldr	r2, [pc, #72]	; (8009664 <prvInitialiseTaskLists+0x60>)
 800961c:	4413      	add	r3, r2
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fcca 	bl	8007fb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3301      	adds	r3, #1
 8009628:	607b      	str	r3, [r7, #4]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b37      	cmp	r3, #55	; 0x37
 800962e:	d9ef      	bls.n	8009610 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009630:	480d      	ldr	r0, [pc, #52]	; (8009668 <prvInitialiseTaskLists+0x64>)
 8009632:	f7fe fcc1 	bl	8007fb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009636:	480d      	ldr	r0, [pc, #52]	; (800966c <prvInitialiseTaskLists+0x68>)
 8009638:	f7fe fcbe 	bl	8007fb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800963c:	480c      	ldr	r0, [pc, #48]	; (8009670 <prvInitialiseTaskLists+0x6c>)
 800963e:	f7fe fcbb 	bl	8007fb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009642:	480c      	ldr	r0, [pc, #48]	; (8009674 <prvInitialiseTaskLists+0x70>)
 8009644:	f7fe fcb8 	bl	8007fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009648:	480b      	ldr	r0, [pc, #44]	; (8009678 <prvInitialiseTaskLists+0x74>)
 800964a:	f7fe fcb5 	bl	8007fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800964e:	4b0b      	ldr	r3, [pc, #44]	; (800967c <prvInitialiseTaskLists+0x78>)
 8009650:	4a05      	ldr	r2, [pc, #20]	; (8009668 <prvInitialiseTaskLists+0x64>)
 8009652:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009654:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <prvInitialiseTaskLists+0x7c>)
 8009656:	4a05      	ldr	r2, [pc, #20]	; (800966c <prvInitialiseTaskLists+0x68>)
 8009658:	601a      	str	r2, [r3, #0]
}
 800965a:	bf00      	nop
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000eb4 	.word	0x20000eb4
 8009668:	20001314 	.word	0x20001314
 800966c:	20001328 	.word	0x20001328
 8009670:	20001344 	.word	0x20001344
 8009674:	20001358 	.word	0x20001358
 8009678:	20001370 	.word	0x20001370
 800967c:	2000133c 	.word	0x2000133c
 8009680:	20001340 	.word	0x20001340

08009684 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800968a:	e019      	b.n	80096c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800968c:	f000 fdda 	bl	800a244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009690:	4b10      	ldr	r3, [pc, #64]	; (80096d4 <prvCheckTasksWaitingTermination+0x50>)
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3304      	adds	r3, #4
 800969c:	4618      	mov	r0, r3
 800969e:	f7fe fd15 	bl	80080cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096a2:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <prvCheckTasksWaitingTermination+0x54>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	4a0b      	ldr	r2, [pc, #44]	; (80096d8 <prvCheckTasksWaitingTermination+0x54>)
 80096aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096ac:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <prvCheckTasksWaitingTermination+0x58>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	4a0a      	ldr	r2, [pc, #40]	; (80096dc <prvCheckTasksWaitingTermination+0x58>)
 80096b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80096b6:	f000 fdf5 	bl	800a2a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f810 	bl	80096e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <prvCheckTasksWaitingTermination+0x58>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e1      	bne.n	800968c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20001358 	.word	0x20001358
 80096d8:	20001384 	.word	0x20001384
 80096dc:	2000136c 	.word	0x2000136c

080096e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	3354      	adds	r3, #84	; 0x54
 80096ec:	4618      	mov	r0, r3
 80096ee:	f001 f8dd 	bl	800a8ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d108      	bne.n	800970e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009700:	4618      	mov	r0, r3
 8009702:	f000 ff8d 	bl	800a620 <vPortFree>
				vPortFree( pxTCB );
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 ff8a 	bl	800a620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800970c:	e018      	b.n	8009740 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009714:	2b01      	cmp	r3, #1
 8009716:	d103      	bne.n	8009720 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 ff81 	bl	800a620 <vPortFree>
	}
 800971e:	e00f      	b.n	8009740 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009726:	2b02      	cmp	r3, #2
 8009728:	d00a      	beq.n	8009740 <prvDeleteTCB+0x60>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	60fb      	str	r3, [r7, #12]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <prvDeleteTCB+0x5e>
	}
 8009740:	bf00      	nop
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800974e:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <prvResetNextTaskUnblockTime+0x38>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d104      	bne.n	8009762 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <prvResetNextTaskUnblockTime+0x3c>)
 800975a:	f04f 32ff 	mov.w	r2, #4294967295
 800975e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009760:	e008      	b.n	8009774 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009762:	4b07      	ldr	r3, [pc, #28]	; (8009780 <prvResetNextTaskUnblockTime+0x38>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	4a04      	ldr	r2, [pc, #16]	; (8009784 <prvResetNextTaskUnblockTime+0x3c>)
 8009772:	6013      	str	r3, [r2, #0]
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	2000133c 	.word	0x2000133c
 8009784:	200013a4 	.word	0x200013a4

08009788 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800978e:	4b0b      	ldr	r3, [pc, #44]	; (80097bc <xTaskGetSchedulerState+0x34>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d102      	bne.n	800979c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009796:	2301      	movs	r3, #1
 8009798:	607b      	str	r3, [r7, #4]
 800979a:	e008      	b.n	80097ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800979c:	4b08      	ldr	r3, [pc, #32]	; (80097c0 <xTaskGetSchedulerState+0x38>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d102      	bne.n	80097aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097a4:	2302      	movs	r3, #2
 80097a6:	607b      	str	r3, [r7, #4]
 80097a8:	e001      	b.n	80097ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097aa:	2300      	movs	r3, #0
 80097ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097ae:	687b      	ldr	r3, [r7, #4]
	}
 80097b0:	4618      	mov	r0, r3
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	20001390 	.word	0x20001390
 80097c0:	200013ac 	.word	0x200013ac

080097c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b086      	sub	sp, #24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097d0:	2300      	movs	r3, #0
 80097d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d056      	beq.n	8009888 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097da:	4b2e      	ldr	r3, [pc, #184]	; (8009894 <xTaskPriorityDisinherit+0xd0>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d00a      	beq.n	80097fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	60fb      	str	r3, [r7, #12]
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	60bb      	str	r3, [r7, #8]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981c:	1e5a      	subs	r2, r3, #1
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800982a:	429a      	cmp	r2, r3
 800982c:	d02c      	beq.n	8009888 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009832:	2b00      	cmp	r3, #0
 8009834:	d128      	bne.n	8009888 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	3304      	adds	r3, #4
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe fc46 	bl	80080cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009858:	4b0f      	ldr	r3, [pc, #60]	; (8009898 <xTaskPriorityDisinherit+0xd4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	429a      	cmp	r2, r3
 800985e:	d903      	bls.n	8009868 <xTaskPriorityDisinherit+0xa4>
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009864:	4a0c      	ldr	r2, [pc, #48]	; (8009898 <xTaskPriorityDisinherit+0xd4>)
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4a09      	ldr	r2, [pc, #36]	; (800989c <xTaskPriorityDisinherit+0xd8>)
 8009876:	441a      	add	r2, r3
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	3304      	adds	r3, #4
 800987c:	4619      	mov	r1, r3
 800987e:	4610      	mov	r0, r2
 8009880:	f7fe fbc7 	bl	8008012 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009884:	2301      	movs	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009888:	697b      	ldr	r3, [r7, #20]
	}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20000eb0 	.word	0x20000eb0
 8009898:	2000138c 	.word	0x2000138c
 800989c:	20000eb4 	.word	0x20000eb4

080098a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098aa:	4b21      	ldr	r3, [pc, #132]	; (8009930 <prvAddCurrentTaskToDelayedList+0x90>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098b0:	4b20      	ldr	r3, [pc, #128]	; (8009934 <prvAddCurrentTaskToDelayedList+0x94>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	3304      	adds	r3, #4
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fe fc08 	bl	80080cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c2:	d10a      	bne.n	80098da <prvAddCurrentTaskToDelayedList+0x3a>
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d007      	beq.n	80098da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ca:	4b1a      	ldr	r3, [pc, #104]	; (8009934 <prvAddCurrentTaskToDelayedList+0x94>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3304      	adds	r3, #4
 80098d0:	4619      	mov	r1, r3
 80098d2:	4819      	ldr	r0, [pc, #100]	; (8009938 <prvAddCurrentTaskToDelayedList+0x98>)
 80098d4:	f7fe fb9d 	bl	8008012 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098d8:	e026      	b.n	8009928 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4413      	add	r3, r2
 80098e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098e2:	4b14      	ldr	r3, [pc, #80]	; (8009934 <prvAddCurrentTaskToDelayedList+0x94>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d209      	bcs.n	8009906 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098f2:	4b12      	ldr	r3, [pc, #72]	; (800993c <prvAddCurrentTaskToDelayedList+0x9c>)
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <prvAddCurrentTaskToDelayedList+0x94>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3304      	adds	r3, #4
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f7fe fbab 	bl	800805a <vListInsert>
}
 8009904:	e010      	b.n	8009928 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009906:	4b0e      	ldr	r3, [pc, #56]	; (8009940 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <prvAddCurrentTaskToDelayedList+0x94>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3304      	adds	r3, #4
 8009910:	4619      	mov	r1, r3
 8009912:	4610      	mov	r0, r2
 8009914:	f7fe fba1 	bl	800805a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009918:	4b0a      	ldr	r3, [pc, #40]	; (8009944 <prvAddCurrentTaskToDelayedList+0xa4>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	429a      	cmp	r2, r3
 8009920:	d202      	bcs.n	8009928 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009922:	4a08      	ldr	r2, [pc, #32]	; (8009944 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	6013      	str	r3, [r2, #0]
}
 8009928:	bf00      	nop
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	20001388 	.word	0x20001388
 8009934:	20000eb0 	.word	0x20000eb0
 8009938:	20001370 	.word	0x20001370
 800993c:	20001340 	.word	0x20001340
 8009940:	2000133c 	.word	0x2000133c
 8009944:	200013a4 	.word	0x200013a4

08009948 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	; 0x28
 800994c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009952:	f000 fb07 	bl	8009f64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009956:	4b1c      	ldr	r3, [pc, #112]	; (80099c8 <xTimerCreateTimerTask+0x80>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d021      	beq.n	80099a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009962:	2300      	movs	r3, #0
 8009964:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009966:	1d3a      	adds	r2, r7, #4
 8009968:	f107 0108 	add.w	r1, r7, #8
 800996c:	f107 030c 	add.w	r3, r7, #12
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fb07 	bl	8007f84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009976:	6879      	ldr	r1, [r7, #4]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	9202      	str	r2, [sp, #8]
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	2302      	movs	r3, #2
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	2300      	movs	r3, #0
 8009986:	460a      	mov	r2, r1
 8009988:	4910      	ldr	r1, [pc, #64]	; (80099cc <xTimerCreateTimerTask+0x84>)
 800998a:	4811      	ldr	r0, [pc, #68]	; (80099d0 <xTimerCreateTimerTask+0x88>)
 800998c:	f7ff f8b4 	bl	8008af8 <xTaskCreateStatic>
 8009990:	4603      	mov	r3, r0
 8009992:	4a10      	ldr	r2, [pc, #64]	; (80099d4 <xTimerCreateTimerTask+0x8c>)
 8009994:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009996:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <xTimerCreateTimerTask+0x8c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800999e:	2301      	movs	r3, #1
 80099a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	613b      	str	r3, [r7, #16]
}
 80099ba:	bf00      	nop
 80099bc:	e7fe      	b.n	80099bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80099be:	697b      	ldr	r3, [r7, #20]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	200013e0 	.word	0x200013e0
 80099cc:	0800b320 	.word	0x0800b320
 80099d0:	08009b0d 	.word	0x08009b0d
 80099d4:	200013e4 	.word	0x200013e4

080099d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08a      	sub	sp, #40	; 0x28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10a      	bne.n	8009a06 <xTimerGenericCommand+0x2e>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	623b      	str	r3, [r7, #32]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a06:	4b1a      	ldr	r3, [pc, #104]	; (8009a70 <xTimerGenericCommand+0x98>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d02a      	beq.n	8009a64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b05      	cmp	r3, #5
 8009a1e:	dc18      	bgt.n	8009a52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a20:	f7ff feb2 	bl	8009788 <xTaskGetSchedulerState>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d109      	bne.n	8009a3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a2a:	4b11      	ldr	r3, [pc, #68]	; (8009a70 <xTimerGenericCommand+0x98>)
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	f107 0110 	add.w	r1, r7, #16
 8009a32:	2300      	movs	r3, #0
 8009a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a36:	f7fe fc77 	bl	8008328 <xQueueGenericSend>
 8009a3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009a3c:	e012      	b.n	8009a64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a3e:	4b0c      	ldr	r3, [pc, #48]	; (8009a70 <xTimerGenericCommand+0x98>)
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	f107 0110 	add.w	r1, r7, #16
 8009a46:	2300      	movs	r3, #0
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f7fe fc6d 	bl	8008328 <xQueueGenericSend>
 8009a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8009a50:	e008      	b.n	8009a64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a52:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <xTimerGenericCommand+0x98>)
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	f107 0110 	add.w	r1, r7, #16
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	f7fe fd61 	bl	8008524 <xQueueGenericSendFromISR>
 8009a62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3728      	adds	r7, #40	; 0x28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	200013e0 	.word	0x200013e0

08009a74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a7e:	4b22      	ldr	r3, [pc, #136]	; (8009b08 <prvProcessExpiredTimer+0x94>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fb1d 	bl	80080cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a98:	f003 0304 	and.w	r3, r3, #4
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d022      	beq.n	8009ae6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	699a      	ldr	r2, [r3, #24]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	18d1      	adds	r1, r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	6978      	ldr	r0, [r7, #20]
 8009aae:	f000 f8d1 	bl	8009c54 <prvInsertTimerInActiveList>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d01f      	beq.n	8009af8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	2300      	movs	r3, #0
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	6978      	ldr	r0, [r7, #20]
 8009ac4:	f7ff ff88 	bl	80099d8 <xTimerGenericCommand>
 8009ac8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d113      	bne.n	8009af8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	60fb      	str	r3, [r7, #12]
}
 8009ae2:	bf00      	nop
 8009ae4:	e7fe      	b.n	8009ae4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aec:	f023 0301 	bic.w	r3, r3, #1
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	6978      	ldr	r0, [r7, #20]
 8009afe:	4798      	blx	r3
}
 8009b00:	bf00      	nop
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	200013d8 	.word	0x200013d8

08009b0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b14:	f107 0308 	add.w	r3, r7, #8
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 f857 	bl	8009bcc <prvGetNextExpireTime>
 8009b1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	4619      	mov	r1, r3
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 f803 	bl	8009b30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b2a:	f000 f8d5 	bl	8009cd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b2e:	e7f1      	b.n	8009b14 <prvTimerTask+0x8>

08009b30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b3a:	f7ff fa39 	bl	8008fb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b3e:	f107 0308 	add.w	r3, r7, #8
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 f866 	bl	8009c14 <prvSampleTimeNow>
 8009b48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d130      	bne.n	8009bb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10a      	bne.n	8009b6c <prvProcessTimerOrBlockTask+0x3c>
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d806      	bhi.n	8009b6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b5e:	f7ff fa35 	bl	8008fcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b62:	68f9      	ldr	r1, [r7, #12]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ff85 	bl	8009a74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b6a:	e024      	b.n	8009bb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d008      	beq.n	8009b84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b72:	4b13      	ldr	r3, [pc, #76]	; (8009bc0 <prvProcessTimerOrBlockTask+0x90>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d101      	bne.n	8009b80 <prvProcessTimerOrBlockTask+0x50>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e000      	b.n	8009b82 <prvProcessTimerOrBlockTask+0x52>
 8009b80:	2300      	movs	r3, #0
 8009b82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b84:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <prvProcessTimerOrBlockTask+0x94>)
 8009b86:	6818      	ldr	r0, [r3, #0]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	4619      	mov	r1, r3
 8009b92:	f7fe ff7d 	bl	8008a90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b96:	f7ff fa19 	bl	8008fcc <xTaskResumeAll>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10a      	bne.n	8009bb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ba0:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <prvProcessTimerOrBlockTask+0x98>)
 8009ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	f3bf 8f6f 	isb	sy
}
 8009bb0:	e001      	b.n	8009bb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009bb2:	f7ff fa0b 	bl	8008fcc <xTaskResumeAll>
}
 8009bb6:	bf00      	nop
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	200013dc 	.word	0x200013dc
 8009bc4:	200013e0 	.word	0x200013e0
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bd4:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <prvGetNextExpireTime+0x44>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <prvGetNextExpireTime+0x16>
 8009bde:	2201      	movs	r2, #1
 8009be0:	e000      	b.n	8009be4 <prvGetNextExpireTime+0x18>
 8009be2:	2200      	movs	r2, #0
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d105      	bne.n	8009bfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bf0:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <prvGetNextExpireTime+0x44>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	e001      	b.n	8009c00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c00:	68fb      	ldr	r3, [r7, #12]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	200013d8 	.word	0x200013d8

08009c14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c1c:	f7ff fa74 	bl	8009108 <xTaskGetTickCount>
 8009c20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c22:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <prvSampleTimeNow+0x3c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d205      	bcs.n	8009c38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c2c:	f000 f936 	bl	8009e9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	e002      	b.n	8009c3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c3e:	4a04      	ldr	r2, [pc, #16]	; (8009c50 <prvSampleTimeNow+0x3c>)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c44:	68fb      	ldr	r3, [r7, #12]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	200013e8 	.word	0x200013e8

08009c54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c62:	2300      	movs	r3, #0
 8009c64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d812      	bhi.n	8009ca0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	1ad2      	subs	r2, r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d302      	bcc.n	8009c8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	e01b      	b.n	8009cc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c8e:	4b10      	ldr	r3, [pc, #64]	; (8009cd0 <prvInsertTimerInActiveList+0x7c>)
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3304      	adds	r3, #4
 8009c96:	4619      	mov	r1, r3
 8009c98:	4610      	mov	r0, r2
 8009c9a:	f7fe f9de 	bl	800805a <vListInsert>
 8009c9e:	e012      	b.n	8009cc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d206      	bcs.n	8009cb6 <prvInsertTimerInActiveList+0x62>
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d302      	bcc.n	8009cb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	617b      	str	r3, [r7, #20]
 8009cb4:	e007      	b.n	8009cc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cb6:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <prvInsertTimerInActiveList+0x80>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	f7fe f9ca 	bl	800805a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cc6:	697b      	ldr	r3, [r7, #20]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3718      	adds	r7, #24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	200013dc 	.word	0x200013dc
 8009cd4:	200013d8 	.word	0x200013d8

08009cd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08e      	sub	sp, #56	; 0x38
 8009cdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cde:	e0ca      	b.n	8009e76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	da18      	bge.n	8009d18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ce6:	1d3b      	adds	r3, r7, #4
 8009ce8:	3304      	adds	r3, #4
 8009cea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10a      	bne.n	8009d08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	61fb      	str	r3, [r7, #28]
}
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d0e:	6850      	ldr	r0, [r2, #4]
 8009d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d12:	6892      	ldr	r2, [r2, #8]
 8009d14:	4611      	mov	r1, r2
 8009d16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f2c0 80ab 	blt.w	8009e76 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d004      	beq.n	8009d36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe f9cb 	bl	80080cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d36:	463b      	mov	r3, r7
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7ff ff6b 	bl	8009c14 <prvSampleTimeNow>
 8009d3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b09      	cmp	r3, #9
 8009d44:	f200 8096 	bhi.w	8009e74 <prvProcessReceivedCommands+0x19c>
 8009d48:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <prvProcessReceivedCommands+0x78>)
 8009d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4e:	bf00      	nop
 8009d50:	08009d79 	.word	0x08009d79
 8009d54:	08009d79 	.word	0x08009d79
 8009d58:	08009d79 	.word	0x08009d79
 8009d5c:	08009ded 	.word	0x08009ded
 8009d60:	08009e01 	.word	0x08009e01
 8009d64:	08009e4b 	.word	0x08009e4b
 8009d68:	08009d79 	.word	0x08009d79
 8009d6c:	08009d79 	.word	0x08009d79
 8009d70:	08009ded 	.word	0x08009ded
 8009d74:	08009e01 	.word	0x08009e01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d7e:	f043 0301 	orr.w	r3, r3, #1
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	18d1      	adds	r1, r2, r3
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d98:	f7ff ff5c 	bl	8009c54 <prvInsertTimerInActiveList>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d069      	beq.n	8009e76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009da8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d05e      	beq.n	8009e76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	441a      	add	r2, r3
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dca:	f7ff fe05 	bl	80099d8 <xTimerGenericCommand>
 8009dce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d14f      	bne.n	8009e76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	61bb      	str	r3, [r7, #24]
}
 8009de8:	bf00      	nop
 8009dea:	e7fe      	b.n	8009dea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009df2:	f023 0301 	bic.w	r3, r3, #1
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009dfe:	e03a      	b.n	8009e76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e06:	f043 0301 	orr.w	r3, r3, #1
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	617b      	str	r3, [r7, #20]
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e38:	699a      	ldr	r2, [r3, #24]
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	18d1      	adds	r1, r2, r3
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e44:	f7ff ff06 	bl	8009c54 <prvInsertTimerInActiveList>
					break;
 8009e48:	e015      	b.n	8009e76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d103      	bne.n	8009e60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e5a:	f000 fbe1 	bl	800a620 <vPortFree>
 8009e5e:	e00a      	b.n	8009e76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e66:	f023 0301 	bic.w	r3, r3, #1
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e72:	e000      	b.n	8009e76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009e74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e76:	4b08      	ldr	r3, [pc, #32]	; (8009e98 <prvProcessReceivedCommands+0x1c0>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	1d39      	adds	r1, r7, #4
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fbec 	bl	800865c <xQueueReceive>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f47f af2a 	bne.w	8009ce0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009e8c:	bf00      	nop
 8009e8e:	bf00      	nop
 8009e90:	3730      	adds	r7, #48	; 0x30
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	200013e0 	.word	0x200013e0

08009e9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ea2:	e048      	b.n	8009f36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ea4:	4b2d      	ldr	r3, [pc, #180]	; (8009f5c <prvSwitchTimerLists+0xc0>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eae:	4b2b      	ldr	r3, [pc, #172]	; (8009f5c <prvSwitchTimerLists+0xc0>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fe f905 	bl	80080cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ed0:	f003 0304 	and.w	r3, r3, #4
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d02e      	beq.n	8009f36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	4413      	add	r3, r2
 8009ee0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d90e      	bls.n	8009f08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ef6:	4b19      	ldr	r3, [pc, #100]	; (8009f5c <prvSwitchTimerLists+0xc0>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4619      	mov	r1, r3
 8009f00:	4610      	mov	r0, r2
 8009f02:	f7fe f8aa 	bl	800805a <vListInsert>
 8009f06:	e016      	b.n	8009f36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f08:	2300      	movs	r3, #0
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	2100      	movs	r1, #0
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7ff fd60 	bl	80099d8 <xTimerGenericCommand>
 8009f18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10a      	bne.n	8009f36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	603b      	str	r3, [r7, #0]
}
 8009f32:	bf00      	nop
 8009f34:	e7fe      	b.n	8009f34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <prvSwitchTimerLists+0xc0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1b1      	bne.n	8009ea4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f40:	4b06      	ldr	r3, [pc, #24]	; (8009f5c <prvSwitchTimerLists+0xc0>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f46:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <prvSwitchTimerLists+0xc4>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a04      	ldr	r2, [pc, #16]	; (8009f5c <prvSwitchTimerLists+0xc0>)
 8009f4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f4e:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <prvSwitchTimerLists+0xc4>)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	6013      	str	r3, [r2, #0]
}
 8009f54:	bf00      	nop
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	200013d8 	.word	0x200013d8
 8009f60:	200013dc 	.word	0x200013dc

08009f64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f6a:	f000 f96b 	bl	800a244 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f6e:	4b15      	ldr	r3, [pc, #84]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d120      	bne.n	8009fb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f76:	4814      	ldr	r0, [pc, #80]	; (8009fc8 <prvCheckForValidListAndQueue+0x64>)
 8009f78:	f7fe f81e 	bl	8007fb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f7c:	4813      	ldr	r0, [pc, #76]	; (8009fcc <prvCheckForValidListAndQueue+0x68>)
 8009f7e:	f7fe f81b 	bl	8007fb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f82:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <prvCheckForValidListAndQueue+0x6c>)
 8009f84:	4a10      	ldr	r2, [pc, #64]	; (8009fc8 <prvCheckForValidListAndQueue+0x64>)
 8009f86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f88:	4b12      	ldr	r3, [pc, #72]	; (8009fd4 <prvCheckForValidListAndQueue+0x70>)
 8009f8a:	4a10      	ldr	r2, [pc, #64]	; (8009fcc <prvCheckForValidListAndQueue+0x68>)
 8009f8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f8e:	2300      	movs	r3, #0
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	4b11      	ldr	r3, [pc, #68]	; (8009fd8 <prvCheckForValidListAndQueue+0x74>)
 8009f94:	4a11      	ldr	r2, [pc, #68]	; (8009fdc <prvCheckForValidListAndQueue+0x78>)
 8009f96:	2110      	movs	r1, #16
 8009f98:	200a      	movs	r0, #10
 8009f9a:	f7fe f929 	bl	80081f0 <xQueueGenericCreateStatic>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4a08      	ldr	r2, [pc, #32]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fa4:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fac:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	490b      	ldr	r1, [pc, #44]	; (8009fe0 <prvCheckForValidListAndQueue+0x7c>)
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fd42 	bl	8008a3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fb8:	f000 f974 	bl	800a2a4 <vPortExitCritical>
}
 8009fbc:	bf00      	nop
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	200013e0 	.word	0x200013e0
 8009fc8:	200013b0 	.word	0x200013b0
 8009fcc:	200013c4 	.word	0x200013c4
 8009fd0:	200013d8 	.word	0x200013d8
 8009fd4:	200013dc 	.word	0x200013dc
 8009fd8:	2000148c 	.word	0x2000148c
 8009fdc:	200013ec 	.word	0x200013ec
 8009fe0:	0800b328 	.word	0x0800b328

08009fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3b04      	subs	r3, #4
 8009ff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3b04      	subs	r3, #4
 800a002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f023 0201 	bic.w	r2, r3, #1
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3b04      	subs	r3, #4
 800a012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a014:	4a0c      	ldr	r2, [pc, #48]	; (800a048 <pxPortInitialiseStack+0x64>)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3b14      	subs	r3, #20
 800a01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3b04      	subs	r3, #4
 800a02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f06f 0202 	mvn.w	r2, #2
 800a032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3b20      	subs	r3, #32
 800a038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a03a:	68fb      	ldr	r3, [r7, #12]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	0800a04d 	.word	0x0800a04d

0800a04c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <prvTaskExitError+0x54>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05e:	d00a      	beq.n	800a076 <prvTaskExitError+0x2a>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	60fb      	str	r3, [r7, #12]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <prvTaskExitError+0x28>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	60bb      	str	r3, [r7, #8]
}
 800a088:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a08a:	bf00      	nop
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0fc      	beq.n	800a08c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a092:	bf00      	nop
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	20000010 	.word	0x20000010
	...

0800a0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0b0:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <pxCurrentTCBConst2>)
 800a0b2:	6819      	ldr	r1, [r3, #0]
 800a0b4:	6808      	ldr	r0, [r1, #0]
 800a0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	f380 8809 	msr	PSP, r0
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f04f 0000 	mov.w	r0, #0
 800a0c6:	f380 8811 	msr	BASEPRI, r0
 800a0ca:	4770      	bx	lr
 800a0cc:	f3af 8000 	nop.w

0800a0d0 <pxCurrentTCBConst2>:
 800a0d0:	20000eb0 	.word	0x20000eb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0d8:	4808      	ldr	r0, [pc, #32]	; (800a0fc <prvPortStartFirstTask+0x24>)
 800a0da:	6800      	ldr	r0, [r0, #0]
 800a0dc:	6800      	ldr	r0, [r0, #0]
 800a0de:	f380 8808 	msr	MSP, r0
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8814 	msr	CONTROL, r0
 800a0ea:	b662      	cpsie	i
 800a0ec:	b661      	cpsie	f
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	df00      	svc	0
 800a0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0fa:	bf00      	nop
 800a0fc:	e000ed08 	.word	0xe000ed08

0800a100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a106:	4b46      	ldr	r3, [pc, #280]	; (800a220 <xPortStartScheduler+0x120>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a46      	ldr	r2, [pc, #280]	; (800a224 <xPortStartScheduler+0x124>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d10a      	bne.n	800a126 <xPortStartScheduler+0x26>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	613b      	str	r3, [r7, #16]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a126:	4b3e      	ldr	r3, [pc, #248]	; (800a220 <xPortStartScheduler+0x120>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a3f      	ldr	r2, [pc, #252]	; (800a228 <xPortStartScheduler+0x128>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d10a      	bne.n	800a146 <xPortStartScheduler+0x46>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a146:	4b39      	ldr	r3, [pc, #228]	; (800a22c <xPortStartScheduler+0x12c>)
 800a148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	22ff      	movs	r2, #255	; 0xff
 800a156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	4b31      	ldr	r3, [pc, #196]	; (800a230 <xPortStartScheduler+0x130>)
 800a16c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a16e:	4b31      	ldr	r3, [pc, #196]	; (800a234 <xPortStartScheduler+0x134>)
 800a170:	2207      	movs	r2, #7
 800a172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a174:	e009      	b.n	800a18a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a176:	4b2f      	ldr	r3, [pc, #188]	; (800a234 <xPortStartScheduler+0x134>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	4a2d      	ldr	r2, [pc, #180]	; (800a234 <xPortStartScheduler+0x134>)
 800a17e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	b2db      	uxtb	r3, r3
 800a188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a18a:	78fb      	ldrb	r3, [r7, #3]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a192:	2b80      	cmp	r3, #128	; 0x80
 800a194:	d0ef      	beq.n	800a176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a196:	4b27      	ldr	r3, [pc, #156]	; (800a234 <xPortStartScheduler+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1c3 0307 	rsb	r3, r3, #7
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d00a      	beq.n	800a1b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	60bb      	str	r3, [r7, #8]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1b8:	4b1e      	ldr	r3, [pc, #120]	; (800a234 <xPortStartScheduler+0x134>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	4a1d      	ldr	r2, [pc, #116]	; (800a234 <xPortStartScheduler+0x134>)
 800a1c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1c2:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <xPortStartScheduler+0x134>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ca:	4a1a      	ldr	r2, [pc, #104]	; (800a234 <xPortStartScheduler+0x134>)
 800a1cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1d6:	4b18      	ldr	r3, [pc, #96]	; (800a238 <xPortStartScheduler+0x138>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a17      	ldr	r2, [pc, #92]	; (800a238 <xPortStartScheduler+0x138>)
 800a1dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1e2:	4b15      	ldr	r3, [pc, #84]	; (800a238 <xPortStartScheduler+0x138>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a14      	ldr	r2, [pc, #80]	; (800a238 <xPortStartScheduler+0x138>)
 800a1e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1ee:	f000 f8dd 	bl	800a3ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1f2:	4b12      	ldr	r3, [pc, #72]	; (800a23c <xPortStartScheduler+0x13c>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1f8:	f000 f8fc 	bl	800a3f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1fc:	4b10      	ldr	r3, [pc, #64]	; (800a240 <xPortStartScheduler+0x140>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a0f      	ldr	r2, [pc, #60]	; (800a240 <xPortStartScheduler+0x140>)
 800a202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a208:	f7ff ff66 	bl	800a0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a20c:	f7ff f846 	bl	800929c <vTaskSwitchContext>
	prvTaskExitError();
 800a210:	f7ff ff1c 	bl	800a04c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	e000ed00 	.word	0xe000ed00
 800a224:	410fc271 	.word	0x410fc271
 800a228:	410fc270 	.word	0x410fc270
 800a22c:	e000e400 	.word	0xe000e400
 800a230:	200014dc 	.word	0x200014dc
 800a234:	200014e0 	.word	0x200014e0
 800a238:	e000ed20 	.word	0xe000ed20
 800a23c:	20000010 	.word	0x20000010
 800a240:	e000ef34 	.word	0xe000ef34

0800a244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	607b      	str	r3, [r7, #4]
}
 800a25c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a25e:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <vPortEnterCritical+0x58>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	4a0d      	ldr	r2, [pc, #52]	; (800a29c <vPortEnterCritical+0x58>)
 800a266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a268:	4b0c      	ldr	r3, [pc, #48]	; (800a29c <vPortEnterCritical+0x58>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d10f      	bne.n	800a290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a270:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <vPortEnterCritical+0x5c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00a      	beq.n	800a290 <vPortEnterCritical+0x4c>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	603b      	str	r3, [r7, #0]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <vPortEnterCritical+0x4a>
	}
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	20000010 	.word	0x20000010
 800a2a0:	e000ed04 	.word	0xe000ed04

0800a2a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2aa:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10a      	bne.n	800a2c8 <vPortExitCritical+0x24>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	607b      	str	r3, [r7, #4]
}
 800a2c4:	bf00      	nop
 800a2c6:	e7fe      	b.n	800a2c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	4a09      	ldr	r2, [pc, #36]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2d2:	4b08      	ldr	r3, [pc, #32]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <vPortExitCritical+0x42>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	f383 8811 	msr	BASEPRI, r3
}
 800a2e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20000010 	.word	0x20000010
	...

0800a300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a300:	f3ef 8009 	mrs	r0, PSP
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	4b15      	ldr	r3, [pc, #84]	; (800a360 <pxCurrentTCBConst>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	f01e 0f10 	tst.w	lr, #16
 800a310:	bf08      	it	eq
 800a312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31a:	6010      	str	r0, [r2, #0]
 800a31c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a320:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a324:	f380 8811 	msr	BASEPRI, r0
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f7fe ffb4 	bl	800929c <vTaskSwitchContext>
 800a334:	f04f 0000 	mov.w	r0, #0
 800a338:	f380 8811 	msr	BASEPRI, r0
 800a33c:	bc09      	pop	{r0, r3}
 800a33e:	6819      	ldr	r1, [r3, #0]
 800a340:	6808      	ldr	r0, [r1, #0]
 800a342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a346:	f01e 0f10 	tst.w	lr, #16
 800a34a:	bf08      	it	eq
 800a34c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a350:	f380 8809 	msr	PSP, r0
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	f3af 8000 	nop.w

0800a360 <pxCurrentTCBConst>:
 800a360:	20000eb0 	.word	0x20000eb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop

0800a368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	607b      	str	r3, [r7, #4]
}
 800a380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a382:	f7fe fed1 	bl	8009128 <xTaskIncrementTick>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a38c:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <xPortSysTickHandler+0x40>)
 800a38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	2300      	movs	r3, #0
 800a396:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	f383 8811 	msr	BASEPRI, r3
}
 800a39e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3b0:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <vPortSetupTimerInterrupt+0x34>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3b6:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <vPortSetupTimerInterrupt+0x38>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3bc:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <vPortSetupTimerInterrupt+0x3c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <vPortSetupTimerInterrupt+0x40>)
 800a3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c6:	099b      	lsrs	r3, r3, #6
 800a3c8:	4a09      	ldr	r2, [pc, #36]	; (800a3f0 <vPortSetupTimerInterrupt+0x44>)
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <vPortSetupTimerInterrupt+0x34>)
 800a3d0:	2207      	movs	r2, #7
 800a3d2:	601a      	str	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	e000e010 	.word	0xe000e010
 800a3e4:	e000e018 	.word	0xe000e018
 800a3e8:	20000004 	.word	0x20000004
 800a3ec:	10624dd3 	.word	0x10624dd3
 800a3f0:	e000e014 	.word	0xe000e014

0800a3f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a404 <vPortEnableVFP+0x10>
 800a3f8:	6801      	ldr	r1, [r0, #0]
 800a3fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3fe:	6001      	str	r1, [r0, #0]
 800a400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a402:	bf00      	nop
 800a404:	e000ed88 	.word	0xe000ed88

0800a408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a40e:	f3ef 8305 	mrs	r3, IPSR
 800a412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b0f      	cmp	r3, #15
 800a418:	d914      	bls.n	800a444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a41a:	4a17      	ldr	r2, [pc, #92]	; (800a478 <vPortValidateInterruptPriority+0x70>)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4413      	add	r3, r2
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a424:	4b15      	ldr	r3, [pc, #84]	; (800a47c <vPortValidateInterruptPriority+0x74>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	7afa      	ldrb	r2, [r7, #11]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d20a      	bcs.n	800a444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	607b      	str	r3, [r7, #4]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <vPortValidateInterruptPriority+0x78>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a44c:	4b0d      	ldr	r3, [pc, #52]	; (800a484 <vPortValidateInterruptPriority+0x7c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d90a      	bls.n	800a46a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	603b      	str	r3, [r7, #0]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <vPortValidateInterruptPriority+0x60>
	}
 800a46a:	bf00      	nop
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	e000e3f0 	.word	0xe000e3f0
 800a47c:	200014dc 	.word	0x200014dc
 800a480:	e000ed0c 	.word	0xe000ed0c
 800a484:	200014e0 	.word	0x200014e0

0800a488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a490:	2300      	movs	r3, #0
 800a492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a494:	f7fe fd8c 	bl	8008fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a498:	4b5b      	ldr	r3, [pc, #364]	; (800a608 <pvPortMalloc+0x180>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4a0:	f000 f920 	bl	800a6e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4a4:	4b59      	ldr	r3, [pc, #356]	; (800a60c <pvPortMalloc+0x184>)
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f040 8093 	bne.w	800a5d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d01d      	beq.n	800a4f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a4b8:	2208      	movs	r2, #8
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4413      	add	r3, r2
 800a4be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d014      	beq.n	800a4f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f023 0307 	bic.w	r3, r3, #7
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	617b      	str	r3, [r7, #20]
}
 800a4f0:	bf00      	nop
 800a4f2:	e7fe      	b.n	800a4f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d06e      	beq.n	800a5d8 <pvPortMalloc+0x150>
 800a4fa:	4b45      	ldr	r3, [pc, #276]	; (800a610 <pvPortMalloc+0x188>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	429a      	cmp	r2, r3
 800a502:	d869      	bhi.n	800a5d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a504:	4b43      	ldr	r3, [pc, #268]	; (800a614 <pvPortMalloc+0x18c>)
 800a506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a508:	4b42      	ldr	r3, [pc, #264]	; (800a614 <pvPortMalloc+0x18c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a50e:	e004      	b.n	800a51a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d903      	bls.n	800a52c <pvPortMalloc+0xa4>
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f1      	bne.n	800a510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a52c:	4b36      	ldr	r3, [pc, #216]	; (800a608 <pvPortMalloc+0x180>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a532:	429a      	cmp	r2, r3
 800a534:	d050      	beq.n	800a5d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2208      	movs	r2, #8
 800a53c:	4413      	add	r3, r2
 800a53e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	2308      	movs	r3, #8
 800a552:	005b      	lsls	r3, r3, #1
 800a554:	429a      	cmp	r2, r3
 800a556:	d91f      	bls.n	800a598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4413      	add	r3, r2
 800a55e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f003 0307 	and.w	r3, r3, #7
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <pvPortMalloc+0xf8>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	613b      	str	r3, [r7, #16]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	685a      	ldr	r2, [r3, #4]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	1ad2      	subs	r2, r2, r3
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a592:	69b8      	ldr	r0, [r7, #24]
 800a594:	f000 f908 	bl	800a7a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a598:	4b1d      	ldr	r3, [pc, #116]	; (800a610 <pvPortMalloc+0x188>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	4a1b      	ldr	r2, [pc, #108]	; (800a610 <pvPortMalloc+0x188>)
 800a5a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5a6:	4b1a      	ldr	r3, [pc, #104]	; (800a610 <pvPortMalloc+0x188>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4b1b      	ldr	r3, [pc, #108]	; (800a618 <pvPortMalloc+0x190>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d203      	bcs.n	800a5ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5b2:	4b17      	ldr	r3, [pc, #92]	; (800a610 <pvPortMalloc+0x188>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a18      	ldr	r2, [pc, #96]	; (800a618 <pvPortMalloc+0x190>)
 800a5b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	4b13      	ldr	r3, [pc, #76]	; (800a60c <pvPortMalloc+0x184>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a5ce:	4b13      	ldr	r3, [pc, #76]	; (800a61c <pvPortMalloc+0x194>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	4a11      	ldr	r2, [pc, #68]	; (800a61c <pvPortMalloc+0x194>)
 800a5d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5d8:	f7fe fcf8 	bl	8008fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	f003 0307 	and.w	r3, r3, #7
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00a      	beq.n	800a5fc <pvPortMalloc+0x174>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	60fb      	str	r3, [r7, #12]
}
 800a5f8:	bf00      	nop
 800a5fa:	e7fe      	b.n	800a5fa <pvPortMalloc+0x172>
	return pvReturn;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3728      	adds	r7, #40	; 0x28
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	200050ec 	.word	0x200050ec
 800a60c:	20005100 	.word	0x20005100
 800a610:	200050f0 	.word	0x200050f0
 800a614:	200050e4 	.word	0x200050e4
 800a618:	200050f4 	.word	0x200050f4
 800a61c:	200050f8 	.word	0x200050f8

0800a620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d04d      	beq.n	800a6ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a632:	2308      	movs	r3, #8
 800a634:	425b      	negs	r3, r3
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	4413      	add	r3, r2
 800a63a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	4b24      	ldr	r3, [pc, #144]	; (800a6d8 <vPortFree+0xb8>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4013      	ands	r3, r2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10a      	bne.n	800a664 <vPortFree+0x44>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	60fb      	str	r3, [r7, #12]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00a      	beq.n	800a682 <vPortFree+0x62>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	f383 8811 	msr	BASEPRI, r3
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	60bb      	str	r3, [r7, #8]
}
 800a67e:	bf00      	nop
 800a680:	e7fe      	b.n	800a680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <vPortFree+0xb8>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4013      	ands	r3, r2
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d01e      	beq.n	800a6ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d11a      	bne.n	800a6ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <vPortFree+0xb8>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	43db      	mvns	r3, r3
 800a6a2:	401a      	ands	r2, r3
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6a8:	f7fe fc82 	bl	8008fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <vPortFree+0xbc>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	4a09      	ldr	r2, [pc, #36]	; (800a6dc <vPortFree+0xbc>)
 800a6b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6ba:	6938      	ldr	r0, [r7, #16]
 800a6bc:	f000 f874 	bl	800a7a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6c0:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <vPortFree+0xc0>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	4a06      	ldr	r2, [pc, #24]	; (800a6e0 <vPortFree+0xc0>)
 800a6c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a6ca:	f7fe fc7f 	bl	8008fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6ce:	bf00      	nop
 800a6d0:	3718      	adds	r7, #24
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20005100 	.word	0x20005100
 800a6dc:	200050f0 	.word	0x200050f0
 800a6e0:	200050fc 	.word	0x200050fc

0800a6e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a6ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6f0:	4b27      	ldr	r3, [pc, #156]	; (800a790 <prvHeapInit+0xac>)
 800a6f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00c      	beq.n	800a718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3307      	adds	r3, #7
 800a702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0307 	bic.w	r3, r3, #7
 800a70a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	4a1f      	ldr	r2, [pc, #124]	; (800a790 <prvHeapInit+0xac>)
 800a714:	4413      	add	r3, r2
 800a716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a71c:	4a1d      	ldr	r2, [pc, #116]	; (800a794 <prvHeapInit+0xb0>)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a722:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <prvHeapInit+0xb0>)
 800a724:	2200      	movs	r2, #0
 800a726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	4413      	add	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a730:	2208      	movs	r2, #8
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	1a9b      	subs	r3, r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f023 0307 	bic.w	r3, r3, #7
 800a73e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4a15      	ldr	r2, [pc, #84]	; (800a798 <prvHeapInit+0xb4>)
 800a744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a746:	4b14      	ldr	r3, [pc, #80]	; (800a798 <prvHeapInit+0xb4>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2200      	movs	r2, #0
 800a74c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a74e:	4b12      	ldr	r3, [pc, #72]	; (800a798 <prvHeapInit+0xb4>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <prvHeapInit+0xb4>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <prvHeapInit+0xb8>)
 800a772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	4a09      	ldr	r2, [pc, #36]	; (800a7a0 <prvHeapInit+0xbc>)
 800a77a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a77c:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <prvHeapInit+0xc0>)
 800a77e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a782:	601a      	str	r2, [r3, #0]
}
 800a784:	bf00      	nop
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	200014e4 	.word	0x200014e4
 800a794:	200050e4 	.word	0x200050e4
 800a798:	200050ec 	.word	0x200050ec
 800a79c:	200050f4 	.word	0x200050f4
 800a7a0:	200050f0 	.word	0x200050f0
 800a7a4:	20005100 	.word	0x20005100

0800a7a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7b0:	4b28      	ldr	r3, [pc, #160]	; (800a854 <prvInsertBlockIntoFreeList+0xac>)
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	e002      	b.n	800a7bc <prvInsertBlockIntoFreeList+0x14>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d8f7      	bhi.n	800a7b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d108      	bne.n	800a7ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	441a      	add	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	441a      	add	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d118      	bne.n	800a830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	4b15      	ldr	r3, [pc, #84]	; (800a858 <prvInsertBlockIntoFreeList+0xb0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	d00d      	beq.n	800a826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	441a      	add	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	e008      	b.n	800a838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a826:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <prvInsertBlockIntoFreeList+0xb0>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	e003      	b.n	800a838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d002      	beq.n	800a846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a846:	bf00      	nop
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	200050e4 	.word	0x200050e4
 800a858:	200050ec 	.word	0x200050ec

0800a85c <siprintf>:
 800a85c:	b40e      	push	{r1, r2, r3}
 800a85e:	b500      	push	{lr}
 800a860:	b09c      	sub	sp, #112	; 0x70
 800a862:	ab1d      	add	r3, sp, #116	; 0x74
 800a864:	9002      	str	r0, [sp, #8]
 800a866:	9006      	str	r0, [sp, #24]
 800a868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a86c:	4809      	ldr	r0, [pc, #36]	; (800a894 <siprintf+0x38>)
 800a86e:	9107      	str	r1, [sp, #28]
 800a870:	9104      	str	r1, [sp, #16]
 800a872:	4909      	ldr	r1, [pc, #36]	; (800a898 <siprintf+0x3c>)
 800a874:	f853 2b04 	ldr.w	r2, [r3], #4
 800a878:	9105      	str	r1, [sp, #20]
 800a87a:	6800      	ldr	r0, [r0, #0]
 800a87c:	9301      	str	r3, [sp, #4]
 800a87e:	a902      	add	r1, sp, #8
 800a880:	f000 f9f6 	bl	800ac70 <_svfiprintf_r>
 800a884:	9b02      	ldr	r3, [sp, #8]
 800a886:	2200      	movs	r2, #0
 800a888:	701a      	strb	r2, [r3, #0]
 800a88a:	b01c      	add	sp, #112	; 0x70
 800a88c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a890:	b003      	add	sp, #12
 800a892:	4770      	bx	lr
 800a894:	20000060 	.word	0x20000060
 800a898:	ffff0208 	.word	0xffff0208

0800a89c <memset>:
 800a89c:	4402      	add	r2, r0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d100      	bne.n	800a8a6 <memset+0xa>
 800a8a4:	4770      	bx	lr
 800a8a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8aa:	e7f9      	b.n	800a8a0 <memset+0x4>

0800a8ac <_reclaim_reent>:
 800a8ac:	4b29      	ldr	r3, [pc, #164]	; (800a954 <_reclaim_reent+0xa8>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4283      	cmp	r3, r0
 800a8b2:	b570      	push	{r4, r5, r6, lr}
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	d04b      	beq.n	800a950 <_reclaim_reent+0xa4>
 800a8b8:	69c3      	ldr	r3, [r0, #28]
 800a8ba:	b143      	cbz	r3, 800a8ce <_reclaim_reent+0x22>
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d144      	bne.n	800a94c <_reclaim_reent+0xa0>
 800a8c2:	69e3      	ldr	r3, [r4, #28]
 800a8c4:	6819      	ldr	r1, [r3, #0]
 800a8c6:	b111      	cbz	r1, 800a8ce <_reclaim_reent+0x22>
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f000 f87f 	bl	800a9cc <_free_r>
 800a8ce:	6961      	ldr	r1, [r4, #20]
 800a8d0:	b111      	cbz	r1, 800a8d8 <_reclaim_reent+0x2c>
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f000 f87a 	bl	800a9cc <_free_r>
 800a8d8:	69e1      	ldr	r1, [r4, #28]
 800a8da:	b111      	cbz	r1, 800a8e2 <_reclaim_reent+0x36>
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 f875 	bl	800a9cc <_free_r>
 800a8e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a8e4:	b111      	cbz	r1, 800a8ec <_reclaim_reent+0x40>
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f000 f870 	bl	800a9cc <_free_r>
 800a8ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ee:	b111      	cbz	r1, 800a8f6 <_reclaim_reent+0x4a>
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f000 f86b 	bl	800a9cc <_free_r>
 800a8f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a8f8:	b111      	cbz	r1, 800a900 <_reclaim_reent+0x54>
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 f866 	bl	800a9cc <_free_r>
 800a900:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a902:	b111      	cbz	r1, 800a90a <_reclaim_reent+0x5e>
 800a904:	4620      	mov	r0, r4
 800a906:	f000 f861 	bl	800a9cc <_free_r>
 800a90a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a90c:	b111      	cbz	r1, 800a914 <_reclaim_reent+0x68>
 800a90e:	4620      	mov	r0, r4
 800a910:	f000 f85c 	bl	800a9cc <_free_r>
 800a914:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a916:	b111      	cbz	r1, 800a91e <_reclaim_reent+0x72>
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 f857 	bl	800a9cc <_free_r>
 800a91e:	6a23      	ldr	r3, [r4, #32]
 800a920:	b1b3      	cbz	r3, 800a950 <_reclaim_reent+0xa4>
 800a922:	4620      	mov	r0, r4
 800a924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a928:	4718      	bx	r3
 800a92a:	5949      	ldr	r1, [r1, r5]
 800a92c:	b941      	cbnz	r1, 800a940 <_reclaim_reent+0x94>
 800a92e:	3504      	adds	r5, #4
 800a930:	69e3      	ldr	r3, [r4, #28]
 800a932:	2d80      	cmp	r5, #128	; 0x80
 800a934:	68d9      	ldr	r1, [r3, #12]
 800a936:	d1f8      	bne.n	800a92a <_reclaim_reent+0x7e>
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 f847 	bl	800a9cc <_free_r>
 800a93e:	e7c0      	b.n	800a8c2 <_reclaim_reent+0x16>
 800a940:	680e      	ldr	r6, [r1, #0]
 800a942:	4620      	mov	r0, r4
 800a944:	f000 f842 	bl	800a9cc <_free_r>
 800a948:	4631      	mov	r1, r6
 800a94a:	e7ef      	b.n	800a92c <_reclaim_reent+0x80>
 800a94c:	2500      	movs	r5, #0
 800a94e:	e7ef      	b.n	800a930 <_reclaim_reent+0x84>
 800a950:	bd70      	pop	{r4, r5, r6, pc}
 800a952:	bf00      	nop
 800a954:	20000060 	.word	0x20000060

0800a958 <__errno>:
 800a958:	4b01      	ldr	r3, [pc, #4]	; (800a960 <__errno+0x8>)
 800a95a:	6818      	ldr	r0, [r3, #0]
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	20000060 	.word	0x20000060

0800a964 <__libc_init_array>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	4d0d      	ldr	r5, [pc, #52]	; (800a99c <__libc_init_array+0x38>)
 800a968:	4c0d      	ldr	r4, [pc, #52]	; (800a9a0 <__libc_init_array+0x3c>)
 800a96a:	1b64      	subs	r4, r4, r5
 800a96c:	10a4      	asrs	r4, r4, #2
 800a96e:	2600      	movs	r6, #0
 800a970:	42a6      	cmp	r6, r4
 800a972:	d109      	bne.n	800a988 <__libc_init_array+0x24>
 800a974:	4d0b      	ldr	r5, [pc, #44]	; (800a9a4 <__libc_init_array+0x40>)
 800a976:	4c0c      	ldr	r4, [pc, #48]	; (800a9a8 <__libc_init_array+0x44>)
 800a978:	f000 fc6a 	bl	800b250 <_init>
 800a97c:	1b64      	subs	r4, r4, r5
 800a97e:	10a4      	asrs	r4, r4, #2
 800a980:	2600      	movs	r6, #0
 800a982:	42a6      	cmp	r6, r4
 800a984:	d105      	bne.n	800a992 <__libc_init_array+0x2e>
 800a986:	bd70      	pop	{r4, r5, r6, pc}
 800a988:	f855 3b04 	ldr.w	r3, [r5], #4
 800a98c:	4798      	blx	r3
 800a98e:	3601      	adds	r6, #1
 800a990:	e7ee      	b.n	800a970 <__libc_init_array+0xc>
 800a992:	f855 3b04 	ldr.w	r3, [r5], #4
 800a996:	4798      	blx	r3
 800a998:	3601      	adds	r6, #1
 800a99a:	e7f2      	b.n	800a982 <__libc_init_array+0x1e>
 800a99c:	0800bf08 	.word	0x0800bf08
 800a9a0:	0800bf08 	.word	0x0800bf08
 800a9a4:	0800bf08 	.word	0x0800bf08
 800a9a8:	0800bf0c 	.word	0x0800bf0c

0800a9ac <__retarget_lock_acquire_recursive>:
 800a9ac:	4770      	bx	lr

0800a9ae <__retarget_lock_release_recursive>:
 800a9ae:	4770      	bx	lr

0800a9b0 <memcpy>:
 800a9b0:	440a      	add	r2, r1
 800a9b2:	4291      	cmp	r1, r2
 800a9b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9b8:	d100      	bne.n	800a9bc <memcpy+0xc>
 800a9ba:	4770      	bx	lr
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9c6:	4291      	cmp	r1, r2
 800a9c8:	d1f9      	bne.n	800a9be <memcpy+0xe>
 800a9ca:	bd10      	pop	{r4, pc}

0800a9cc <_free_r>:
 800a9cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ce:	2900      	cmp	r1, #0
 800a9d0:	d044      	beq.n	800aa5c <_free_r+0x90>
 800a9d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d6:	9001      	str	r0, [sp, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f1a1 0404 	sub.w	r4, r1, #4
 800a9de:	bfb8      	it	lt
 800a9e0:	18e4      	addlt	r4, r4, r3
 800a9e2:	f000 f8df 	bl	800aba4 <__malloc_lock>
 800a9e6:	4a1e      	ldr	r2, [pc, #120]	; (800aa60 <_free_r+0x94>)
 800a9e8:	9801      	ldr	r0, [sp, #4]
 800a9ea:	6813      	ldr	r3, [r2, #0]
 800a9ec:	b933      	cbnz	r3, 800a9fc <_free_r+0x30>
 800a9ee:	6063      	str	r3, [r4, #4]
 800a9f0:	6014      	str	r4, [r2, #0]
 800a9f2:	b003      	add	sp, #12
 800a9f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9f8:	f000 b8da 	b.w	800abb0 <__malloc_unlock>
 800a9fc:	42a3      	cmp	r3, r4
 800a9fe:	d908      	bls.n	800aa12 <_free_r+0x46>
 800aa00:	6825      	ldr	r5, [r4, #0]
 800aa02:	1961      	adds	r1, r4, r5
 800aa04:	428b      	cmp	r3, r1
 800aa06:	bf01      	itttt	eq
 800aa08:	6819      	ldreq	r1, [r3, #0]
 800aa0a:	685b      	ldreq	r3, [r3, #4]
 800aa0c:	1949      	addeq	r1, r1, r5
 800aa0e:	6021      	streq	r1, [r4, #0]
 800aa10:	e7ed      	b.n	800a9ee <_free_r+0x22>
 800aa12:	461a      	mov	r2, r3
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	b10b      	cbz	r3, 800aa1c <_free_r+0x50>
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	d9fa      	bls.n	800aa12 <_free_r+0x46>
 800aa1c:	6811      	ldr	r1, [r2, #0]
 800aa1e:	1855      	adds	r5, r2, r1
 800aa20:	42a5      	cmp	r5, r4
 800aa22:	d10b      	bne.n	800aa3c <_free_r+0x70>
 800aa24:	6824      	ldr	r4, [r4, #0]
 800aa26:	4421      	add	r1, r4
 800aa28:	1854      	adds	r4, r2, r1
 800aa2a:	42a3      	cmp	r3, r4
 800aa2c:	6011      	str	r1, [r2, #0]
 800aa2e:	d1e0      	bne.n	800a9f2 <_free_r+0x26>
 800aa30:	681c      	ldr	r4, [r3, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	6053      	str	r3, [r2, #4]
 800aa36:	440c      	add	r4, r1
 800aa38:	6014      	str	r4, [r2, #0]
 800aa3a:	e7da      	b.n	800a9f2 <_free_r+0x26>
 800aa3c:	d902      	bls.n	800aa44 <_free_r+0x78>
 800aa3e:	230c      	movs	r3, #12
 800aa40:	6003      	str	r3, [r0, #0]
 800aa42:	e7d6      	b.n	800a9f2 <_free_r+0x26>
 800aa44:	6825      	ldr	r5, [r4, #0]
 800aa46:	1961      	adds	r1, r4, r5
 800aa48:	428b      	cmp	r3, r1
 800aa4a:	bf04      	itt	eq
 800aa4c:	6819      	ldreq	r1, [r3, #0]
 800aa4e:	685b      	ldreq	r3, [r3, #4]
 800aa50:	6063      	str	r3, [r4, #4]
 800aa52:	bf04      	itt	eq
 800aa54:	1949      	addeq	r1, r1, r5
 800aa56:	6021      	streq	r1, [r4, #0]
 800aa58:	6054      	str	r4, [r2, #4]
 800aa5a:	e7ca      	b.n	800a9f2 <_free_r+0x26>
 800aa5c:	b003      	add	sp, #12
 800aa5e:	bd30      	pop	{r4, r5, pc}
 800aa60:	20005244 	.word	0x20005244

0800aa64 <sbrk_aligned>:
 800aa64:	b570      	push	{r4, r5, r6, lr}
 800aa66:	4e0e      	ldr	r6, [pc, #56]	; (800aaa0 <sbrk_aligned+0x3c>)
 800aa68:	460c      	mov	r4, r1
 800aa6a:	6831      	ldr	r1, [r6, #0]
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	b911      	cbnz	r1, 800aa76 <sbrk_aligned+0x12>
 800aa70:	f000 fba6 	bl	800b1c0 <_sbrk_r>
 800aa74:	6030      	str	r0, [r6, #0]
 800aa76:	4621      	mov	r1, r4
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f000 fba1 	bl	800b1c0 <_sbrk_r>
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	d00a      	beq.n	800aa98 <sbrk_aligned+0x34>
 800aa82:	1cc4      	adds	r4, r0, #3
 800aa84:	f024 0403 	bic.w	r4, r4, #3
 800aa88:	42a0      	cmp	r0, r4
 800aa8a:	d007      	beq.n	800aa9c <sbrk_aligned+0x38>
 800aa8c:	1a21      	subs	r1, r4, r0
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f000 fb96 	bl	800b1c0 <_sbrk_r>
 800aa94:	3001      	adds	r0, #1
 800aa96:	d101      	bne.n	800aa9c <sbrk_aligned+0x38>
 800aa98:	f04f 34ff 	mov.w	r4, #4294967295
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	bd70      	pop	{r4, r5, r6, pc}
 800aaa0:	20005248 	.word	0x20005248

0800aaa4 <_malloc_r>:
 800aaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa8:	1ccd      	adds	r5, r1, #3
 800aaaa:	f025 0503 	bic.w	r5, r5, #3
 800aaae:	3508      	adds	r5, #8
 800aab0:	2d0c      	cmp	r5, #12
 800aab2:	bf38      	it	cc
 800aab4:	250c      	movcc	r5, #12
 800aab6:	2d00      	cmp	r5, #0
 800aab8:	4607      	mov	r7, r0
 800aaba:	db01      	blt.n	800aac0 <_malloc_r+0x1c>
 800aabc:	42a9      	cmp	r1, r5
 800aabe:	d905      	bls.n	800aacc <_malloc_r+0x28>
 800aac0:	230c      	movs	r3, #12
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	2600      	movs	r6, #0
 800aac6:	4630      	mov	r0, r6
 800aac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aacc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aba0 <_malloc_r+0xfc>
 800aad0:	f000 f868 	bl	800aba4 <__malloc_lock>
 800aad4:	f8d8 3000 	ldr.w	r3, [r8]
 800aad8:	461c      	mov	r4, r3
 800aada:	bb5c      	cbnz	r4, 800ab34 <_malloc_r+0x90>
 800aadc:	4629      	mov	r1, r5
 800aade:	4638      	mov	r0, r7
 800aae0:	f7ff ffc0 	bl	800aa64 <sbrk_aligned>
 800aae4:	1c43      	adds	r3, r0, #1
 800aae6:	4604      	mov	r4, r0
 800aae8:	d155      	bne.n	800ab96 <_malloc_r+0xf2>
 800aaea:	f8d8 4000 	ldr.w	r4, [r8]
 800aaee:	4626      	mov	r6, r4
 800aaf0:	2e00      	cmp	r6, #0
 800aaf2:	d145      	bne.n	800ab80 <_malloc_r+0xdc>
 800aaf4:	2c00      	cmp	r4, #0
 800aaf6:	d048      	beq.n	800ab8a <_malloc_r+0xe6>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	4631      	mov	r1, r6
 800aafc:	4638      	mov	r0, r7
 800aafe:	eb04 0903 	add.w	r9, r4, r3
 800ab02:	f000 fb5d 	bl	800b1c0 <_sbrk_r>
 800ab06:	4581      	cmp	r9, r0
 800ab08:	d13f      	bne.n	800ab8a <_malloc_r+0xe6>
 800ab0a:	6821      	ldr	r1, [r4, #0]
 800ab0c:	1a6d      	subs	r5, r5, r1
 800ab0e:	4629      	mov	r1, r5
 800ab10:	4638      	mov	r0, r7
 800ab12:	f7ff ffa7 	bl	800aa64 <sbrk_aligned>
 800ab16:	3001      	adds	r0, #1
 800ab18:	d037      	beq.n	800ab8a <_malloc_r+0xe6>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	442b      	add	r3, r5
 800ab1e:	6023      	str	r3, [r4, #0]
 800ab20:	f8d8 3000 	ldr.w	r3, [r8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d038      	beq.n	800ab9a <_malloc_r+0xf6>
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	42a2      	cmp	r2, r4
 800ab2c:	d12b      	bne.n	800ab86 <_malloc_r+0xe2>
 800ab2e:	2200      	movs	r2, #0
 800ab30:	605a      	str	r2, [r3, #4]
 800ab32:	e00f      	b.n	800ab54 <_malloc_r+0xb0>
 800ab34:	6822      	ldr	r2, [r4, #0]
 800ab36:	1b52      	subs	r2, r2, r5
 800ab38:	d41f      	bmi.n	800ab7a <_malloc_r+0xd6>
 800ab3a:	2a0b      	cmp	r2, #11
 800ab3c:	d917      	bls.n	800ab6e <_malloc_r+0xca>
 800ab3e:	1961      	adds	r1, r4, r5
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	6025      	str	r5, [r4, #0]
 800ab44:	bf18      	it	ne
 800ab46:	6059      	strne	r1, [r3, #4]
 800ab48:	6863      	ldr	r3, [r4, #4]
 800ab4a:	bf08      	it	eq
 800ab4c:	f8c8 1000 	streq.w	r1, [r8]
 800ab50:	5162      	str	r2, [r4, r5]
 800ab52:	604b      	str	r3, [r1, #4]
 800ab54:	4638      	mov	r0, r7
 800ab56:	f104 060b 	add.w	r6, r4, #11
 800ab5a:	f000 f829 	bl	800abb0 <__malloc_unlock>
 800ab5e:	f026 0607 	bic.w	r6, r6, #7
 800ab62:	1d23      	adds	r3, r4, #4
 800ab64:	1af2      	subs	r2, r6, r3
 800ab66:	d0ae      	beq.n	800aac6 <_malloc_r+0x22>
 800ab68:	1b9b      	subs	r3, r3, r6
 800ab6a:	50a3      	str	r3, [r4, r2]
 800ab6c:	e7ab      	b.n	800aac6 <_malloc_r+0x22>
 800ab6e:	42a3      	cmp	r3, r4
 800ab70:	6862      	ldr	r2, [r4, #4]
 800ab72:	d1dd      	bne.n	800ab30 <_malloc_r+0x8c>
 800ab74:	f8c8 2000 	str.w	r2, [r8]
 800ab78:	e7ec      	b.n	800ab54 <_malloc_r+0xb0>
 800ab7a:	4623      	mov	r3, r4
 800ab7c:	6864      	ldr	r4, [r4, #4]
 800ab7e:	e7ac      	b.n	800aada <_malloc_r+0x36>
 800ab80:	4634      	mov	r4, r6
 800ab82:	6876      	ldr	r6, [r6, #4]
 800ab84:	e7b4      	b.n	800aaf0 <_malloc_r+0x4c>
 800ab86:	4613      	mov	r3, r2
 800ab88:	e7cc      	b.n	800ab24 <_malloc_r+0x80>
 800ab8a:	230c      	movs	r3, #12
 800ab8c:	603b      	str	r3, [r7, #0]
 800ab8e:	4638      	mov	r0, r7
 800ab90:	f000 f80e 	bl	800abb0 <__malloc_unlock>
 800ab94:	e797      	b.n	800aac6 <_malloc_r+0x22>
 800ab96:	6025      	str	r5, [r4, #0]
 800ab98:	e7dc      	b.n	800ab54 <_malloc_r+0xb0>
 800ab9a:	605b      	str	r3, [r3, #4]
 800ab9c:	deff      	udf	#255	; 0xff
 800ab9e:	bf00      	nop
 800aba0:	20005244 	.word	0x20005244

0800aba4 <__malloc_lock>:
 800aba4:	4801      	ldr	r0, [pc, #4]	; (800abac <__malloc_lock+0x8>)
 800aba6:	f7ff bf01 	b.w	800a9ac <__retarget_lock_acquire_recursive>
 800abaa:	bf00      	nop
 800abac:	20005240 	.word	0x20005240

0800abb0 <__malloc_unlock>:
 800abb0:	4801      	ldr	r0, [pc, #4]	; (800abb8 <__malloc_unlock+0x8>)
 800abb2:	f7ff befc 	b.w	800a9ae <__retarget_lock_release_recursive>
 800abb6:	bf00      	nop
 800abb8:	20005240 	.word	0x20005240

0800abbc <__ssputs_r>:
 800abbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc0:	688e      	ldr	r6, [r1, #8]
 800abc2:	461f      	mov	r7, r3
 800abc4:	42be      	cmp	r6, r7
 800abc6:	680b      	ldr	r3, [r1, #0]
 800abc8:	4682      	mov	sl, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	4690      	mov	r8, r2
 800abce:	d82c      	bhi.n	800ac2a <__ssputs_r+0x6e>
 800abd0:	898a      	ldrh	r2, [r1, #12]
 800abd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abd6:	d026      	beq.n	800ac26 <__ssputs_r+0x6a>
 800abd8:	6965      	ldr	r5, [r4, #20]
 800abda:	6909      	ldr	r1, [r1, #16]
 800abdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abe0:	eba3 0901 	sub.w	r9, r3, r1
 800abe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abe8:	1c7b      	adds	r3, r7, #1
 800abea:	444b      	add	r3, r9
 800abec:	106d      	asrs	r5, r5, #1
 800abee:	429d      	cmp	r5, r3
 800abf0:	bf38      	it	cc
 800abf2:	461d      	movcc	r5, r3
 800abf4:	0553      	lsls	r3, r2, #21
 800abf6:	d527      	bpl.n	800ac48 <__ssputs_r+0x8c>
 800abf8:	4629      	mov	r1, r5
 800abfa:	f7ff ff53 	bl	800aaa4 <_malloc_r>
 800abfe:	4606      	mov	r6, r0
 800ac00:	b360      	cbz	r0, 800ac5c <__ssputs_r+0xa0>
 800ac02:	6921      	ldr	r1, [r4, #16]
 800ac04:	464a      	mov	r2, r9
 800ac06:	f7ff fed3 	bl	800a9b0 <memcpy>
 800ac0a:	89a3      	ldrh	r3, [r4, #12]
 800ac0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac14:	81a3      	strh	r3, [r4, #12]
 800ac16:	6126      	str	r6, [r4, #16]
 800ac18:	6165      	str	r5, [r4, #20]
 800ac1a:	444e      	add	r6, r9
 800ac1c:	eba5 0509 	sub.w	r5, r5, r9
 800ac20:	6026      	str	r6, [r4, #0]
 800ac22:	60a5      	str	r5, [r4, #8]
 800ac24:	463e      	mov	r6, r7
 800ac26:	42be      	cmp	r6, r7
 800ac28:	d900      	bls.n	800ac2c <__ssputs_r+0x70>
 800ac2a:	463e      	mov	r6, r7
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	4632      	mov	r2, r6
 800ac30:	4641      	mov	r1, r8
 800ac32:	f000 faab 	bl	800b18c <memmove>
 800ac36:	68a3      	ldr	r3, [r4, #8]
 800ac38:	1b9b      	subs	r3, r3, r6
 800ac3a:	60a3      	str	r3, [r4, #8]
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	4433      	add	r3, r6
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	2000      	movs	r0, #0
 800ac44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac48:	462a      	mov	r2, r5
 800ac4a:	f000 fac9 	bl	800b1e0 <_realloc_r>
 800ac4e:	4606      	mov	r6, r0
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d1e0      	bne.n	800ac16 <__ssputs_r+0x5a>
 800ac54:	6921      	ldr	r1, [r4, #16]
 800ac56:	4650      	mov	r0, sl
 800ac58:	f7ff feb8 	bl	800a9cc <_free_r>
 800ac5c:	230c      	movs	r3, #12
 800ac5e:	f8ca 3000 	str.w	r3, [sl]
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6e:	e7e9      	b.n	800ac44 <__ssputs_r+0x88>

0800ac70 <_svfiprintf_r>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	4698      	mov	r8, r3
 800ac76:	898b      	ldrh	r3, [r1, #12]
 800ac78:	061b      	lsls	r3, r3, #24
 800ac7a:	b09d      	sub	sp, #116	; 0x74
 800ac7c:	4607      	mov	r7, r0
 800ac7e:	460d      	mov	r5, r1
 800ac80:	4614      	mov	r4, r2
 800ac82:	d50e      	bpl.n	800aca2 <_svfiprintf_r+0x32>
 800ac84:	690b      	ldr	r3, [r1, #16]
 800ac86:	b963      	cbnz	r3, 800aca2 <_svfiprintf_r+0x32>
 800ac88:	2140      	movs	r1, #64	; 0x40
 800ac8a:	f7ff ff0b 	bl	800aaa4 <_malloc_r>
 800ac8e:	6028      	str	r0, [r5, #0]
 800ac90:	6128      	str	r0, [r5, #16]
 800ac92:	b920      	cbnz	r0, 800ac9e <_svfiprintf_r+0x2e>
 800ac94:	230c      	movs	r3, #12
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9c:	e0d0      	b.n	800ae40 <_svfiprintf_r+0x1d0>
 800ac9e:	2340      	movs	r3, #64	; 0x40
 800aca0:	616b      	str	r3, [r5, #20]
 800aca2:	2300      	movs	r3, #0
 800aca4:	9309      	str	r3, [sp, #36]	; 0x24
 800aca6:	2320      	movs	r3, #32
 800aca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acac:	f8cd 800c 	str.w	r8, [sp, #12]
 800acb0:	2330      	movs	r3, #48	; 0x30
 800acb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ae58 <_svfiprintf_r+0x1e8>
 800acb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acba:	f04f 0901 	mov.w	r9, #1
 800acbe:	4623      	mov	r3, r4
 800acc0:	469a      	mov	sl, r3
 800acc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acc6:	b10a      	cbz	r2, 800accc <_svfiprintf_r+0x5c>
 800acc8:	2a25      	cmp	r2, #37	; 0x25
 800acca:	d1f9      	bne.n	800acc0 <_svfiprintf_r+0x50>
 800accc:	ebba 0b04 	subs.w	fp, sl, r4
 800acd0:	d00b      	beq.n	800acea <_svfiprintf_r+0x7a>
 800acd2:	465b      	mov	r3, fp
 800acd4:	4622      	mov	r2, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	4638      	mov	r0, r7
 800acda:	f7ff ff6f 	bl	800abbc <__ssputs_r>
 800acde:	3001      	adds	r0, #1
 800ace0:	f000 80a9 	beq.w	800ae36 <_svfiprintf_r+0x1c6>
 800ace4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ace6:	445a      	add	r2, fp
 800ace8:	9209      	str	r2, [sp, #36]	; 0x24
 800acea:	f89a 3000 	ldrb.w	r3, [sl]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 80a1 	beq.w	800ae36 <_svfiprintf_r+0x1c6>
 800acf4:	2300      	movs	r3, #0
 800acf6:	f04f 32ff 	mov.w	r2, #4294967295
 800acfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acfe:	f10a 0a01 	add.w	sl, sl, #1
 800ad02:	9304      	str	r3, [sp, #16]
 800ad04:	9307      	str	r3, [sp, #28]
 800ad06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ad0c:	4654      	mov	r4, sl
 800ad0e:	2205      	movs	r2, #5
 800ad10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad14:	4850      	ldr	r0, [pc, #320]	; (800ae58 <_svfiprintf_r+0x1e8>)
 800ad16:	f7f5 fa5b 	bl	80001d0 <memchr>
 800ad1a:	9a04      	ldr	r2, [sp, #16]
 800ad1c:	b9d8      	cbnz	r0, 800ad56 <_svfiprintf_r+0xe6>
 800ad1e:	06d0      	lsls	r0, r2, #27
 800ad20:	bf44      	itt	mi
 800ad22:	2320      	movmi	r3, #32
 800ad24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad28:	0711      	lsls	r1, r2, #28
 800ad2a:	bf44      	itt	mi
 800ad2c:	232b      	movmi	r3, #43	; 0x2b
 800ad2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad32:	f89a 3000 	ldrb.w	r3, [sl]
 800ad36:	2b2a      	cmp	r3, #42	; 0x2a
 800ad38:	d015      	beq.n	800ad66 <_svfiprintf_r+0xf6>
 800ad3a:	9a07      	ldr	r2, [sp, #28]
 800ad3c:	4654      	mov	r4, sl
 800ad3e:	2000      	movs	r0, #0
 800ad40:	f04f 0c0a 	mov.w	ip, #10
 800ad44:	4621      	mov	r1, r4
 800ad46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad4a:	3b30      	subs	r3, #48	; 0x30
 800ad4c:	2b09      	cmp	r3, #9
 800ad4e:	d94d      	bls.n	800adec <_svfiprintf_r+0x17c>
 800ad50:	b1b0      	cbz	r0, 800ad80 <_svfiprintf_r+0x110>
 800ad52:	9207      	str	r2, [sp, #28]
 800ad54:	e014      	b.n	800ad80 <_svfiprintf_r+0x110>
 800ad56:	eba0 0308 	sub.w	r3, r0, r8
 800ad5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	9304      	str	r3, [sp, #16]
 800ad62:	46a2      	mov	sl, r4
 800ad64:	e7d2      	b.n	800ad0c <_svfiprintf_r+0x9c>
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	1d19      	adds	r1, r3, #4
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	9103      	str	r1, [sp, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bfbb      	ittet	lt
 800ad72:	425b      	neglt	r3, r3
 800ad74:	f042 0202 	orrlt.w	r2, r2, #2
 800ad78:	9307      	strge	r3, [sp, #28]
 800ad7a:	9307      	strlt	r3, [sp, #28]
 800ad7c:	bfb8      	it	lt
 800ad7e:	9204      	strlt	r2, [sp, #16]
 800ad80:	7823      	ldrb	r3, [r4, #0]
 800ad82:	2b2e      	cmp	r3, #46	; 0x2e
 800ad84:	d10c      	bne.n	800ada0 <_svfiprintf_r+0x130>
 800ad86:	7863      	ldrb	r3, [r4, #1]
 800ad88:	2b2a      	cmp	r3, #42	; 0x2a
 800ad8a:	d134      	bne.n	800adf6 <_svfiprintf_r+0x186>
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	1d1a      	adds	r2, r3, #4
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	9203      	str	r2, [sp, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	bfb8      	it	lt
 800ad98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad9c:	3402      	adds	r4, #2
 800ad9e:	9305      	str	r3, [sp, #20]
 800ada0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ae68 <_svfiprintf_r+0x1f8>
 800ada4:	7821      	ldrb	r1, [r4, #0]
 800ada6:	2203      	movs	r2, #3
 800ada8:	4650      	mov	r0, sl
 800adaa:	f7f5 fa11 	bl	80001d0 <memchr>
 800adae:	b138      	cbz	r0, 800adc0 <_svfiprintf_r+0x150>
 800adb0:	9b04      	ldr	r3, [sp, #16]
 800adb2:	eba0 000a 	sub.w	r0, r0, sl
 800adb6:	2240      	movs	r2, #64	; 0x40
 800adb8:	4082      	lsls	r2, r0
 800adba:	4313      	orrs	r3, r2
 800adbc:	3401      	adds	r4, #1
 800adbe:	9304      	str	r3, [sp, #16]
 800adc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc4:	4825      	ldr	r0, [pc, #148]	; (800ae5c <_svfiprintf_r+0x1ec>)
 800adc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adca:	2206      	movs	r2, #6
 800adcc:	f7f5 fa00 	bl	80001d0 <memchr>
 800add0:	2800      	cmp	r0, #0
 800add2:	d038      	beq.n	800ae46 <_svfiprintf_r+0x1d6>
 800add4:	4b22      	ldr	r3, [pc, #136]	; (800ae60 <_svfiprintf_r+0x1f0>)
 800add6:	bb1b      	cbnz	r3, 800ae20 <_svfiprintf_r+0x1b0>
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	3307      	adds	r3, #7
 800addc:	f023 0307 	bic.w	r3, r3, #7
 800ade0:	3308      	adds	r3, #8
 800ade2:	9303      	str	r3, [sp, #12]
 800ade4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade6:	4433      	add	r3, r6
 800ade8:	9309      	str	r3, [sp, #36]	; 0x24
 800adea:	e768      	b.n	800acbe <_svfiprintf_r+0x4e>
 800adec:	fb0c 3202 	mla	r2, ip, r2, r3
 800adf0:	460c      	mov	r4, r1
 800adf2:	2001      	movs	r0, #1
 800adf4:	e7a6      	b.n	800ad44 <_svfiprintf_r+0xd4>
 800adf6:	2300      	movs	r3, #0
 800adf8:	3401      	adds	r4, #1
 800adfa:	9305      	str	r3, [sp, #20]
 800adfc:	4619      	mov	r1, r3
 800adfe:	f04f 0c0a 	mov.w	ip, #10
 800ae02:	4620      	mov	r0, r4
 800ae04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae08:	3a30      	subs	r2, #48	; 0x30
 800ae0a:	2a09      	cmp	r2, #9
 800ae0c:	d903      	bls.n	800ae16 <_svfiprintf_r+0x1a6>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d0c6      	beq.n	800ada0 <_svfiprintf_r+0x130>
 800ae12:	9105      	str	r1, [sp, #20]
 800ae14:	e7c4      	b.n	800ada0 <_svfiprintf_r+0x130>
 800ae16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e7f0      	b.n	800ae02 <_svfiprintf_r+0x192>
 800ae20:	ab03      	add	r3, sp, #12
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	462a      	mov	r2, r5
 800ae26:	4b0f      	ldr	r3, [pc, #60]	; (800ae64 <_svfiprintf_r+0x1f4>)
 800ae28:	a904      	add	r1, sp, #16
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	f3af 8000 	nop.w
 800ae30:	1c42      	adds	r2, r0, #1
 800ae32:	4606      	mov	r6, r0
 800ae34:	d1d6      	bne.n	800ade4 <_svfiprintf_r+0x174>
 800ae36:	89ab      	ldrh	r3, [r5, #12]
 800ae38:	065b      	lsls	r3, r3, #25
 800ae3a:	f53f af2d 	bmi.w	800ac98 <_svfiprintf_r+0x28>
 800ae3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae40:	b01d      	add	sp, #116	; 0x74
 800ae42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae46:	ab03      	add	r3, sp, #12
 800ae48:	9300      	str	r3, [sp, #0]
 800ae4a:	462a      	mov	r2, r5
 800ae4c:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <_svfiprintf_r+0x1f4>)
 800ae4e:	a904      	add	r1, sp, #16
 800ae50:	4638      	mov	r0, r7
 800ae52:	f000 f879 	bl	800af48 <_printf_i>
 800ae56:	e7eb      	b.n	800ae30 <_svfiprintf_r+0x1c0>
 800ae58:	0800becc 	.word	0x0800becc
 800ae5c:	0800bed6 	.word	0x0800bed6
 800ae60:	00000000 	.word	0x00000000
 800ae64:	0800abbd 	.word	0x0800abbd
 800ae68:	0800bed2 	.word	0x0800bed2

0800ae6c <_printf_common>:
 800ae6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae70:	4616      	mov	r6, r2
 800ae72:	4699      	mov	r9, r3
 800ae74:	688a      	ldr	r2, [r1, #8]
 800ae76:	690b      	ldr	r3, [r1, #16]
 800ae78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	bfb8      	it	lt
 800ae80:	4613      	movlt	r3, r2
 800ae82:	6033      	str	r3, [r6, #0]
 800ae84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae88:	4607      	mov	r7, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	b10a      	cbz	r2, 800ae92 <_printf_common+0x26>
 800ae8e:	3301      	adds	r3, #1
 800ae90:	6033      	str	r3, [r6, #0]
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	0699      	lsls	r1, r3, #26
 800ae96:	bf42      	ittt	mi
 800ae98:	6833      	ldrmi	r3, [r6, #0]
 800ae9a:	3302      	addmi	r3, #2
 800ae9c:	6033      	strmi	r3, [r6, #0]
 800ae9e:	6825      	ldr	r5, [r4, #0]
 800aea0:	f015 0506 	ands.w	r5, r5, #6
 800aea4:	d106      	bne.n	800aeb4 <_printf_common+0x48>
 800aea6:	f104 0a19 	add.w	sl, r4, #25
 800aeaa:	68e3      	ldr	r3, [r4, #12]
 800aeac:	6832      	ldr	r2, [r6, #0]
 800aeae:	1a9b      	subs	r3, r3, r2
 800aeb0:	42ab      	cmp	r3, r5
 800aeb2:	dc26      	bgt.n	800af02 <_printf_common+0x96>
 800aeb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aeb8:	1e13      	subs	r3, r2, #0
 800aeba:	6822      	ldr	r2, [r4, #0]
 800aebc:	bf18      	it	ne
 800aebe:	2301      	movne	r3, #1
 800aec0:	0692      	lsls	r2, r2, #26
 800aec2:	d42b      	bmi.n	800af1c <_printf_common+0xb0>
 800aec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aec8:	4649      	mov	r1, r9
 800aeca:	4638      	mov	r0, r7
 800aecc:	47c0      	blx	r8
 800aece:	3001      	adds	r0, #1
 800aed0:	d01e      	beq.n	800af10 <_printf_common+0xa4>
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	6922      	ldr	r2, [r4, #16]
 800aed6:	f003 0306 	and.w	r3, r3, #6
 800aeda:	2b04      	cmp	r3, #4
 800aedc:	bf02      	ittt	eq
 800aede:	68e5      	ldreq	r5, [r4, #12]
 800aee0:	6833      	ldreq	r3, [r6, #0]
 800aee2:	1aed      	subeq	r5, r5, r3
 800aee4:	68a3      	ldr	r3, [r4, #8]
 800aee6:	bf0c      	ite	eq
 800aee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aeec:	2500      	movne	r5, #0
 800aeee:	4293      	cmp	r3, r2
 800aef0:	bfc4      	itt	gt
 800aef2:	1a9b      	subgt	r3, r3, r2
 800aef4:	18ed      	addgt	r5, r5, r3
 800aef6:	2600      	movs	r6, #0
 800aef8:	341a      	adds	r4, #26
 800aefa:	42b5      	cmp	r5, r6
 800aefc:	d11a      	bne.n	800af34 <_printf_common+0xc8>
 800aefe:	2000      	movs	r0, #0
 800af00:	e008      	b.n	800af14 <_printf_common+0xa8>
 800af02:	2301      	movs	r3, #1
 800af04:	4652      	mov	r2, sl
 800af06:	4649      	mov	r1, r9
 800af08:	4638      	mov	r0, r7
 800af0a:	47c0      	blx	r8
 800af0c:	3001      	adds	r0, #1
 800af0e:	d103      	bne.n	800af18 <_printf_common+0xac>
 800af10:	f04f 30ff 	mov.w	r0, #4294967295
 800af14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af18:	3501      	adds	r5, #1
 800af1a:	e7c6      	b.n	800aeaa <_printf_common+0x3e>
 800af1c:	18e1      	adds	r1, r4, r3
 800af1e:	1c5a      	adds	r2, r3, #1
 800af20:	2030      	movs	r0, #48	; 0x30
 800af22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af26:	4422      	add	r2, r4
 800af28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af30:	3302      	adds	r3, #2
 800af32:	e7c7      	b.n	800aec4 <_printf_common+0x58>
 800af34:	2301      	movs	r3, #1
 800af36:	4622      	mov	r2, r4
 800af38:	4649      	mov	r1, r9
 800af3a:	4638      	mov	r0, r7
 800af3c:	47c0      	blx	r8
 800af3e:	3001      	adds	r0, #1
 800af40:	d0e6      	beq.n	800af10 <_printf_common+0xa4>
 800af42:	3601      	adds	r6, #1
 800af44:	e7d9      	b.n	800aefa <_printf_common+0x8e>
	...

0800af48 <_printf_i>:
 800af48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af4c:	7e0f      	ldrb	r7, [r1, #24]
 800af4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af50:	2f78      	cmp	r7, #120	; 0x78
 800af52:	4691      	mov	r9, r2
 800af54:	4680      	mov	r8, r0
 800af56:	460c      	mov	r4, r1
 800af58:	469a      	mov	sl, r3
 800af5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af5e:	d807      	bhi.n	800af70 <_printf_i+0x28>
 800af60:	2f62      	cmp	r7, #98	; 0x62
 800af62:	d80a      	bhi.n	800af7a <_printf_i+0x32>
 800af64:	2f00      	cmp	r7, #0
 800af66:	f000 80d4 	beq.w	800b112 <_printf_i+0x1ca>
 800af6a:	2f58      	cmp	r7, #88	; 0x58
 800af6c:	f000 80c0 	beq.w	800b0f0 <_printf_i+0x1a8>
 800af70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af78:	e03a      	b.n	800aff0 <_printf_i+0xa8>
 800af7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af7e:	2b15      	cmp	r3, #21
 800af80:	d8f6      	bhi.n	800af70 <_printf_i+0x28>
 800af82:	a101      	add	r1, pc, #4	; (adr r1, 800af88 <_printf_i+0x40>)
 800af84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af88:	0800afe1 	.word	0x0800afe1
 800af8c:	0800aff5 	.word	0x0800aff5
 800af90:	0800af71 	.word	0x0800af71
 800af94:	0800af71 	.word	0x0800af71
 800af98:	0800af71 	.word	0x0800af71
 800af9c:	0800af71 	.word	0x0800af71
 800afa0:	0800aff5 	.word	0x0800aff5
 800afa4:	0800af71 	.word	0x0800af71
 800afa8:	0800af71 	.word	0x0800af71
 800afac:	0800af71 	.word	0x0800af71
 800afb0:	0800af71 	.word	0x0800af71
 800afb4:	0800b0f9 	.word	0x0800b0f9
 800afb8:	0800b021 	.word	0x0800b021
 800afbc:	0800b0b3 	.word	0x0800b0b3
 800afc0:	0800af71 	.word	0x0800af71
 800afc4:	0800af71 	.word	0x0800af71
 800afc8:	0800b11b 	.word	0x0800b11b
 800afcc:	0800af71 	.word	0x0800af71
 800afd0:	0800b021 	.word	0x0800b021
 800afd4:	0800af71 	.word	0x0800af71
 800afd8:	0800af71 	.word	0x0800af71
 800afdc:	0800b0bb 	.word	0x0800b0bb
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	1d1a      	adds	r2, r3, #4
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	602a      	str	r2, [r5, #0]
 800afe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aff0:	2301      	movs	r3, #1
 800aff2:	e09f      	b.n	800b134 <_printf_i+0x1ec>
 800aff4:	6820      	ldr	r0, [r4, #0]
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	0607      	lsls	r7, r0, #24
 800affa:	f103 0104 	add.w	r1, r3, #4
 800affe:	6029      	str	r1, [r5, #0]
 800b000:	d501      	bpl.n	800b006 <_printf_i+0xbe>
 800b002:	681e      	ldr	r6, [r3, #0]
 800b004:	e003      	b.n	800b00e <_printf_i+0xc6>
 800b006:	0646      	lsls	r6, r0, #25
 800b008:	d5fb      	bpl.n	800b002 <_printf_i+0xba>
 800b00a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b00e:	2e00      	cmp	r6, #0
 800b010:	da03      	bge.n	800b01a <_printf_i+0xd2>
 800b012:	232d      	movs	r3, #45	; 0x2d
 800b014:	4276      	negs	r6, r6
 800b016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b01a:	485a      	ldr	r0, [pc, #360]	; (800b184 <_printf_i+0x23c>)
 800b01c:	230a      	movs	r3, #10
 800b01e:	e012      	b.n	800b046 <_printf_i+0xfe>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	6820      	ldr	r0, [r4, #0]
 800b024:	1d19      	adds	r1, r3, #4
 800b026:	6029      	str	r1, [r5, #0]
 800b028:	0605      	lsls	r5, r0, #24
 800b02a:	d501      	bpl.n	800b030 <_printf_i+0xe8>
 800b02c:	681e      	ldr	r6, [r3, #0]
 800b02e:	e002      	b.n	800b036 <_printf_i+0xee>
 800b030:	0641      	lsls	r1, r0, #25
 800b032:	d5fb      	bpl.n	800b02c <_printf_i+0xe4>
 800b034:	881e      	ldrh	r6, [r3, #0]
 800b036:	4853      	ldr	r0, [pc, #332]	; (800b184 <_printf_i+0x23c>)
 800b038:	2f6f      	cmp	r7, #111	; 0x6f
 800b03a:	bf0c      	ite	eq
 800b03c:	2308      	moveq	r3, #8
 800b03e:	230a      	movne	r3, #10
 800b040:	2100      	movs	r1, #0
 800b042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b046:	6865      	ldr	r5, [r4, #4]
 800b048:	60a5      	str	r5, [r4, #8]
 800b04a:	2d00      	cmp	r5, #0
 800b04c:	bfa2      	ittt	ge
 800b04e:	6821      	ldrge	r1, [r4, #0]
 800b050:	f021 0104 	bicge.w	r1, r1, #4
 800b054:	6021      	strge	r1, [r4, #0]
 800b056:	b90e      	cbnz	r6, 800b05c <_printf_i+0x114>
 800b058:	2d00      	cmp	r5, #0
 800b05a:	d04b      	beq.n	800b0f4 <_printf_i+0x1ac>
 800b05c:	4615      	mov	r5, r2
 800b05e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b062:	fb03 6711 	mls	r7, r3, r1, r6
 800b066:	5dc7      	ldrb	r7, [r0, r7]
 800b068:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b06c:	4637      	mov	r7, r6
 800b06e:	42bb      	cmp	r3, r7
 800b070:	460e      	mov	r6, r1
 800b072:	d9f4      	bls.n	800b05e <_printf_i+0x116>
 800b074:	2b08      	cmp	r3, #8
 800b076:	d10b      	bne.n	800b090 <_printf_i+0x148>
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	07de      	lsls	r6, r3, #31
 800b07c:	d508      	bpl.n	800b090 <_printf_i+0x148>
 800b07e:	6923      	ldr	r3, [r4, #16]
 800b080:	6861      	ldr	r1, [r4, #4]
 800b082:	4299      	cmp	r1, r3
 800b084:	bfde      	ittt	le
 800b086:	2330      	movle	r3, #48	; 0x30
 800b088:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b08c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b090:	1b52      	subs	r2, r2, r5
 800b092:	6122      	str	r2, [r4, #16]
 800b094:	f8cd a000 	str.w	sl, [sp]
 800b098:	464b      	mov	r3, r9
 800b09a:	aa03      	add	r2, sp, #12
 800b09c:	4621      	mov	r1, r4
 800b09e:	4640      	mov	r0, r8
 800b0a0:	f7ff fee4 	bl	800ae6c <_printf_common>
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	d14a      	bne.n	800b13e <_printf_i+0x1f6>
 800b0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ac:	b004      	add	sp, #16
 800b0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	f043 0320 	orr.w	r3, r3, #32
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	4833      	ldr	r0, [pc, #204]	; (800b188 <_printf_i+0x240>)
 800b0bc:	2778      	movs	r7, #120	; 0x78
 800b0be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	6829      	ldr	r1, [r5, #0]
 800b0c6:	061f      	lsls	r7, r3, #24
 800b0c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0cc:	d402      	bmi.n	800b0d4 <_printf_i+0x18c>
 800b0ce:	065f      	lsls	r7, r3, #25
 800b0d0:	bf48      	it	mi
 800b0d2:	b2b6      	uxthmi	r6, r6
 800b0d4:	07df      	lsls	r7, r3, #31
 800b0d6:	bf48      	it	mi
 800b0d8:	f043 0320 	orrmi.w	r3, r3, #32
 800b0dc:	6029      	str	r1, [r5, #0]
 800b0de:	bf48      	it	mi
 800b0e0:	6023      	strmi	r3, [r4, #0]
 800b0e2:	b91e      	cbnz	r6, 800b0ec <_printf_i+0x1a4>
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	f023 0320 	bic.w	r3, r3, #32
 800b0ea:	6023      	str	r3, [r4, #0]
 800b0ec:	2310      	movs	r3, #16
 800b0ee:	e7a7      	b.n	800b040 <_printf_i+0xf8>
 800b0f0:	4824      	ldr	r0, [pc, #144]	; (800b184 <_printf_i+0x23c>)
 800b0f2:	e7e4      	b.n	800b0be <_printf_i+0x176>
 800b0f4:	4615      	mov	r5, r2
 800b0f6:	e7bd      	b.n	800b074 <_printf_i+0x12c>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	6826      	ldr	r6, [r4, #0]
 800b0fc:	6961      	ldr	r1, [r4, #20]
 800b0fe:	1d18      	adds	r0, r3, #4
 800b100:	6028      	str	r0, [r5, #0]
 800b102:	0635      	lsls	r5, r6, #24
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	d501      	bpl.n	800b10c <_printf_i+0x1c4>
 800b108:	6019      	str	r1, [r3, #0]
 800b10a:	e002      	b.n	800b112 <_printf_i+0x1ca>
 800b10c:	0670      	lsls	r0, r6, #25
 800b10e:	d5fb      	bpl.n	800b108 <_printf_i+0x1c0>
 800b110:	8019      	strh	r1, [r3, #0]
 800b112:	2300      	movs	r3, #0
 800b114:	6123      	str	r3, [r4, #16]
 800b116:	4615      	mov	r5, r2
 800b118:	e7bc      	b.n	800b094 <_printf_i+0x14c>
 800b11a:	682b      	ldr	r3, [r5, #0]
 800b11c:	1d1a      	adds	r2, r3, #4
 800b11e:	602a      	str	r2, [r5, #0]
 800b120:	681d      	ldr	r5, [r3, #0]
 800b122:	6862      	ldr	r2, [r4, #4]
 800b124:	2100      	movs	r1, #0
 800b126:	4628      	mov	r0, r5
 800b128:	f7f5 f852 	bl	80001d0 <memchr>
 800b12c:	b108      	cbz	r0, 800b132 <_printf_i+0x1ea>
 800b12e:	1b40      	subs	r0, r0, r5
 800b130:	6060      	str	r0, [r4, #4]
 800b132:	6863      	ldr	r3, [r4, #4]
 800b134:	6123      	str	r3, [r4, #16]
 800b136:	2300      	movs	r3, #0
 800b138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b13c:	e7aa      	b.n	800b094 <_printf_i+0x14c>
 800b13e:	6923      	ldr	r3, [r4, #16]
 800b140:	462a      	mov	r2, r5
 800b142:	4649      	mov	r1, r9
 800b144:	4640      	mov	r0, r8
 800b146:	47d0      	blx	sl
 800b148:	3001      	adds	r0, #1
 800b14a:	d0ad      	beq.n	800b0a8 <_printf_i+0x160>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	079b      	lsls	r3, r3, #30
 800b150:	d413      	bmi.n	800b17a <_printf_i+0x232>
 800b152:	68e0      	ldr	r0, [r4, #12]
 800b154:	9b03      	ldr	r3, [sp, #12]
 800b156:	4298      	cmp	r0, r3
 800b158:	bfb8      	it	lt
 800b15a:	4618      	movlt	r0, r3
 800b15c:	e7a6      	b.n	800b0ac <_printf_i+0x164>
 800b15e:	2301      	movs	r3, #1
 800b160:	4632      	mov	r2, r6
 800b162:	4649      	mov	r1, r9
 800b164:	4640      	mov	r0, r8
 800b166:	47d0      	blx	sl
 800b168:	3001      	adds	r0, #1
 800b16a:	d09d      	beq.n	800b0a8 <_printf_i+0x160>
 800b16c:	3501      	adds	r5, #1
 800b16e:	68e3      	ldr	r3, [r4, #12]
 800b170:	9903      	ldr	r1, [sp, #12]
 800b172:	1a5b      	subs	r3, r3, r1
 800b174:	42ab      	cmp	r3, r5
 800b176:	dcf2      	bgt.n	800b15e <_printf_i+0x216>
 800b178:	e7eb      	b.n	800b152 <_printf_i+0x20a>
 800b17a:	2500      	movs	r5, #0
 800b17c:	f104 0619 	add.w	r6, r4, #25
 800b180:	e7f5      	b.n	800b16e <_printf_i+0x226>
 800b182:	bf00      	nop
 800b184:	0800bedd 	.word	0x0800bedd
 800b188:	0800beee 	.word	0x0800beee

0800b18c <memmove>:
 800b18c:	4288      	cmp	r0, r1
 800b18e:	b510      	push	{r4, lr}
 800b190:	eb01 0402 	add.w	r4, r1, r2
 800b194:	d902      	bls.n	800b19c <memmove+0x10>
 800b196:	4284      	cmp	r4, r0
 800b198:	4623      	mov	r3, r4
 800b19a:	d807      	bhi.n	800b1ac <memmove+0x20>
 800b19c:	1e43      	subs	r3, r0, #1
 800b19e:	42a1      	cmp	r1, r4
 800b1a0:	d008      	beq.n	800b1b4 <memmove+0x28>
 800b1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1aa:	e7f8      	b.n	800b19e <memmove+0x12>
 800b1ac:	4402      	add	r2, r0
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	428a      	cmp	r2, r1
 800b1b2:	d100      	bne.n	800b1b6 <memmove+0x2a>
 800b1b4:	bd10      	pop	{r4, pc}
 800b1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1be:	e7f7      	b.n	800b1b0 <memmove+0x24>

0800b1c0 <_sbrk_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4d06      	ldr	r5, [pc, #24]	; (800b1dc <_sbrk_r+0x1c>)
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	f7f7 feae 	bl	8002f2c <_sbrk>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_sbrk_r+0x1a>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_sbrk_r+0x1a>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	2000523c 	.word	0x2000523c

0800b1e0 <_realloc_r>:
 800b1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e4:	4680      	mov	r8, r0
 800b1e6:	4614      	mov	r4, r2
 800b1e8:	460e      	mov	r6, r1
 800b1ea:	b921      	cbnz	r1, 800b1f6 <_realloc_r+0x16>
 800b1ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	f7ff bc57 	b.w	800aaa4 <_malloc_r>
 800b1f6:	b92a      	cbnz	r2, 800b204 <_realloc_r+0x24>
 800b1f8:	f7ff fbe8 	bl	800a9cc <_free_r>
 800b1fc:	4625      	mov	r5, r4
 800b1fe:	4628      	mov	r0, r5
 800b200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b204:	f000 f81b 	bl	800b23e <_malloc_usable_size_r>
 800b208:	4284      	cmp	r4, r0
 800b20a:	4607      	mov	r7, r0
 800b20c:	d802      	bhi.n	800b214 <_realloc_r+0x34>
 800b20e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b212:	d812      	bhi.n	800b23a <_realloc_r+0x5a>
 800b214:	4621      	mov	r1, r4
 800b216:	4640      	mov	r0, r8
 800b218:	f7ff fc44 	bl	800aaa4 <_malloc_r>
 800b21c:	4605      	mov	r5, r0
 800b21e:	2800      	cmp	r0, #0
 800b220:	d0ed      	beq.n	800b1fe <_realloc_r+0x1e>
 800b222:	42bc      	cmp	r4, r7
 800b224:	4622      	mov	r2, r4
 800b226:	4631      	mov	r1, r6
 800b228:	bf28      	it	cs
 800b22a:	463a      	movcs	r2, r7
 800b22c:	f7ff fbc0 	bl	800a9b0 <memcpy>
 800b230:	4631      	mov	r1, r6
 800b232:	4640      	mov	r0, r8
 800b234:	f7ff fbca 	bl	800a9cc <_free_r>
 800b238:	e7e1      	b.n	800b1fe <_realloc_r+0x1e>
 800b23a:	4635      	mov	r5, r6
 800b23c:	e7df      	b.n	800b1fe <_realloc_r+0x1e>

0800b23e <_malloc_usable_size_r>:
 800b23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b242:	1f18      	subs	r0, r3, #4
 800b244:	2b00      	cmp	r3, #0
 800b246:	bfbc      	itt	lt
 800b248:	580b      	ldrlt	r3, [r1, r0]
 800b24a:	18c0      	addlt	r0, r0, r3
 800b24c:	4770      	bx	lr
	...

0800b250 <_init>:
 800b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b252:	bf00      	nop
 800b254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b256:	bc08      	pop	{r3}
 800b258:	469e      	mov	lr, r3
 800b25a:	4770      	bx	lr

0800b25c <_fini>:
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25e:	bf00      	nop
 800b260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b262:	bc08      	pop	{r3}
 800b264:	469e      	mov	lr, r3
 800b266:	4770      	bx	lr
